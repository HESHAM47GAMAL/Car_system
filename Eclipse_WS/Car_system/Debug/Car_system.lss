
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003b9c  00003c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000cc  008000cc  00003c9c  2**0
                  ALLOC
  3 .stab         00004254  00000000  00000000  00003c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020e0  00000000  00000000  00007ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000db64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dcc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000df51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e71f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_1>
       8:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_2>
       c:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3d       	cpi	r26, 0xDF	; 223
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <main>
      8a:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ea       	ldi	r26, 0xAF	; 175
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ea       	ldi	r24, 0xAF	; 175
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	57 c0       	rjmp	.+174    	; 0xc02 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	c9 01       	movw	r24, r18
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	fc 01       	movw	r30, r24
     b66:	e8 54       	subi	r30, 0x48	; 72
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	80 81       	ld	r24, Z
     b6c:	88 30       	cpi	r24, 0x08	; 8
     b6e:	e9 f4       	brne	.+58     	; 0xbaa <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	c9 01       	movw	r24, r18
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	82 0f       	add	r24, r18
     b7e:	93 1f       	adc	r25, r19
     b80:	fc 01       	movw	r30, r24
     b82:	e9 54       	subi	r30, 0x49	; 73
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	40 81       	ld	r20, Z
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	c9 01       	movw	r24, r18
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	fc 01       	movw	r30, r24
     b9a:	e7 54       	subi	r30, 0x47	; 71
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	90 81       	ld	r25, Z
     ba0:	84 2f       	mov	r24, r20
     ba2:	69 2f       	mov	r22, r25
     ba4:	0e 94 11 0a 	call	0x1422	; 0x1422 <GPIO_SetPortDirection>
     ba8:	29 c0       	rjmp	.+82     	; 0xbfc <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	c9 01       	movw	r24, r18
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	fc 01       	movw	r30, r24
     bbc:	e9 54       	subi	r30, 0x49	; 73
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	50 81       	ld	r21, Z
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	c9 01       	movw	r24, r18
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	fc 01       	movw	r30, r24
     bd4:	e8 54       	subi	r30, 0x48	; 72
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	40 81       	ld	r20, Z
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	c9 01       	movw	r24, r18
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	fc 01       	movw	r30, r24
     bec:	e7 54       	subi	r30, 0x47	; 71
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	90 81       	ld	r25, Z
     bf2:	85 2f       	mov	r24, r21
     bf4:	64 2f       	mov	r22, r20
     bf6:	49 2f       	mov	r20, r25
     bf8:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <GPIO_init+0xc4>
     c08:	a5 cf       	rjmp	.-182    	; 0xb54 <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <GPIO_SetPinDirection+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <GPIO_SetPinDirection+0x8>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	6a 83       	std	Y+2, r22	; 0x02
     c24:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <GPIO_SetPinDirection+0x1c>
     c2c:	d8 c1       	rjmp	.+944    	; 0xfde <GPIO_SetPinDirection+0x3cc>
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	08 f0       	brcs	.+2      	; 0xc36 <GPIO_SetPinDirection+0x24>
     c34:	d4 c1       	rjmp	.+936    	; 0xfde <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	3d 83       	std	Y+5, r19	; 0x05
     c3e:	2c 83       	std	Y+4, r18	; 0x04
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	09 f4       	brne	.+2      	; 0xc4c <GPIO_SetPinDirection+0x3a>
     c4a:	84 c0       	rjmp	.+264    	; 0xd54 <GPIO_SetPinDirection+0x142>
     c4c:	2c 81       	ldd	r18, Y+4	; 0x04
     c4e:	3d 81       	ldd	r19, Y+5	; 0x05
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	31 05       	cpc	r19, r1
     c54:	2c f4       	brge	.+10     	; 0xc60 <GPIO_SetPinDirection+0x4e>
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	9d 81       	ldd	r25, Y+5	; 0x05
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	71 f0       	breq	.+28     	; 0xc7a <GPIO_SetPinDirection+0x68>
     c5e:	bf c1       	rjmp	.+894    	; 0xfde <GPIO_SetPinDirection+0x3cc>
     c60:	2c 81       	ldd	r18, Y+4	; 0x04
     c62:	3d 81       	ldd	r19, Y+5	; 0x05
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <GPIO_SetPinDirection+0x5a>
     c6a:	e1 c0       	rjmp	.+450    	; 0xe2e <GPIO_SetPinDirection+0x21c>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	91 05       	cpc	r25, r1
     c74:	09 f4       	brne	.+2      	; 0xc78 <GPIO_SetPinDirection+0x66>
     c76:	48 c1       	rjmp	.+656    	; 0xf08 <GPIO_SetPinDirection+0x2f6>
     c78:	b2 c1       	rjmp	.+868    	; 0xfde <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	88 23       	and	r24, r24
     c7e:	41 f5       	brne	.+80     	; 0xcd0 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
     c80:	aa e3       	ldi	r26, 0x3A	; 58
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	ea e3       	ldi	r30, 0x3A	; 58
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <GPIO_SetPinDirection+0x8a>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	2a 95       	dec	r18
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <GPIO_SetPinDirection+0x86>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
     ca6:	ab e3       	ldi	r26, 0x3B	; 59
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	eb e3       	ldi	r30, 0x3B	; 59
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <GPIO_SetPinDirection+0xb2>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <GPIO_SetPinDirection+0xae>
     cc8:	80 95       	com	r24
     cca:	84 23       	and	r24, r20
     ccc:	8c 93       	st	X, r24
     cce:	87 c1       	rjmp	.+782    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	39 f5       	brne	.+78     	; 0xd24 <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
     cd6:	aa e3       	ldi	r26, 0x3A	; 58
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ea e3       	ldi	r30, 0x3A	; 58
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_SetPinDirection+0xe0>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	2a 95       	dec	r18
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_SetPinDirection+0xdc>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
     cfc:	ab e3       	ldi	r26, 0x3B	; 59
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	eb e3       	ldi	r30, 0x3B	; 59
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_SetPinDirection+0x108>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_SetPinDirection+0x104>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	5d c1       	rjmp	.+698    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	09 f0       	breq	.+2      	; 0xd2c <GPIO_SetPinDirection+0x11a>
     d2a:	59 c1       	rjmp	.+690    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
     d2c:	aa e3       	ldi	r26, 0x3A	; 58
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e3       	ldi	r30, 0x3A	; 58
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <GPIO_SetPinDirection+0x138>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <GPIO_SetPinDirection+0x134>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	45 c1       	rjmp	.+650    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	41 f5       	brne	.+80     	; 0xdaa <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <GPIO_SetPinDirection+0x164>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	2a 95       	dec	r18
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <GPIO_SetPinDirection+0x160>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
     d80:	a8 e3       	ldi	r26, 0x38	; 56
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e8 e3       	ldi	r30, 0x38	; 56
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <GPIO_SetPinDirection+0x18c>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <GPIO_SetPinDirection+0x188>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	1a c1       	rjmp	.+564    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	39 f5       	brne	.+78     	; 0xdfe <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
     db0:	a7 e3       	ldi	r26, 0x37	; 55
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_SetPinDirection+0x1ba>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	2a 95       	dec	r18
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_SetPinDirection+0x1b6>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
     dd6:	a8 e3       	ldi	r26, 0x38	; 56
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e3       	ldi	r30, 0x38	; 56
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_SetPinDirection+0x1e2>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_SetPinDirection+0x1de>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	f0 c0       	rjmp	.+480    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	09 f0       	breq	.+2      	; 0xe06 <GPIO_SetPinDirection+0x1f4>
     e04:	ec c0       	rjmp	.+472    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
     e06:	a7 e3       	ldi	r26, 0x37	; 55
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_SetPinDirection+0x212>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_SetPinDirection+0x20e>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	d8 c0       	rjmp	.+432    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	41 f5       	brne	.+80     	; 0xe84 <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
     e34:	a4 e3       	ldi	r26, 0x34	; 52
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e4 e3       	ldi	r30, 0x34	; 52
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_SetPinDirection+0x23e>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	2a 95       	dec	r18
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_SetPinDirection+0x23a>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
     e5a:	a5 e3       	ldi	r26, 0x35	; 53
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_SetPinDirection+0x266>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_SetPinDirection+0x262>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	ad c0       	rjmp	.+346    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	39 f5       	brne	.+78     	; 0xed8 <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e4 e3       	ldi	r30, 0x34	; 52
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <GPIO_SetPinDirection+0x294>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	2a 95       	dec	r18
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <GPIO_SetPinDirection+0x290>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
     eb0:	a5 e3       	ldi	r26, 0x35	; 53
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e3       	ldi	r30, 0x35	; 53
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <GPIO_SetPinDirection+0x2bc>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <GPIO_SetPinDirection+0x2b8>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	83 c0       	rjmp	.+262    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	09 f0       	breq	.+2      	; 0xee0 <GPIO_SetPinDirection+0x2ce>
     ede:	7f c0       	rjmp	.+254    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
     ee0:	a4 e3       	ldi	r26, 0x34	; 52
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e4 e3       	ldi	r30, 0x34	; 52
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO_SetPinDirection+0x2ec>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <GPIO_SetPinDirection+0x2e8>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	6b c0       	rjmp	.+214    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	41 f5       	brne	.+80     	; 0xf5e <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_SetPinDirection+0x318>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	2a 95       	dec	r18
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_SetPinDirection+0x314>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
     f34:	a2 e3       	ldi	r26, 0x32	; 50
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e2 e3       	ldi	r30, 0x32	; 50
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <GPIO_SetPinDirection+0x340>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <GPIO_SetPinDirection+0x33c>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	40 c0       	rjmp	.+128    	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	39 f5       	brne	.+78     	; 0xfb2 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
     f64:	a1 e3       	ldi	r26, 0x31	; 49
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_SetPinDirection+0x36e>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_SetPinDirection+0x36a>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
     f8a:	a2 e3       	ldi	r26, 0x32	; 50
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e2 e3       	ldi	r30, 0x32	; 50
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_SetPinDirection+0x396>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_SetPinDirection+0x392>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	16 c0       	rjmp	.+44     	; 0xfde <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	99 f4       	brne	.+38     	; 0xfde <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_SetPinDirection+0x3c4>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_SetPinDirection+0x3c0>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <GPIO_ReadPin+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <GPIO_ReadPin+0x8>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	8a 83       	std	Y+2, r24	; 0x02
     ffe:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1000:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	08 f0       	brcs	.+2      	; 0x100a <GPIO_ReadPin+0x1c>
    1008:	84 c0       	rjmp	.+264    	; 0x1112 <GPIO_ReadPin+0x124>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPIO_ReadPin+0x24>
    1010:	80 c0       	rjmp	.+256    	; 0x1112 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	4c 81       	ldd	r20, Y+4	; 0x04
    101e:	5d 81       	ldd	r21, Y+5	; 0x05
    1020:	41 30       	cpi	r20, 0x01	; 1
    1022:	51 05       	cpc	r21, r1
    1024:	79 f1       	breq	.+94     	; 0x1084 <GPIO_ReadPin+0x96>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	91 05       	cpc	r25, r1
    102e:	34 f4       	brge	.+12     	; 0x103c <GPIO_ReadPin+0x4e>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	69 f0       	breq	.+26     	; 0x1054 <GPIO_ReadPin+0x66>
    103a:	6b c0       	rjmp	.+214    	; 0x1112 <GPIO_ReadPin+0x124>
    103c:	4c 81       	ldd	r20, Y+4	; 0x04
    103e:	5d 81       	ldd	r21, Y+5	; 0x05
    1040:	42 30       	cpi	r20, 0x02	; 2
    1042:	51 05       	cpc	r21, r1
    1044:	b9 f1       	breq	.+110    	; 0x10b4 <GPIO_ReadPin+0xc6>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <GPIO_ReadPin+0x64>
    1050:	49 c0       	rjmp	.+146    	; 0x10e4 <GPIO_ReadPin+0xf6>
    1052:	5f c0       	rjmp	.+190    	; 0x1112 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    1054:	e9 e3       	ldi	r30, 0x39	; 57
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_ReadPin+0x7e>
    1068:	55 95       	asr	r21
    106a:	47 95       	ror	r20
    106c:	8a 95       	dec	r24
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_ReadPin+0x7a>
    1070:	ca 01       	movw	r24, r20
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	88 23       	and	r24, r24
    1078:	19 f0       	breq	.+6      	; 0x1080 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	49 c0       	rjmp	.+146    	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	47 c0       	rjmp	.+142    	; 0x1112 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    1084:	e6 e3       	ldi	r30, 0x36	; 54
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_ReadPin+0xae>
    1098:	55 95       	asr	r21
    109a:	47 95       	ror	r20
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_ReadPin+0xaa>
    10a0:	ca 01       	movw	r24, r20
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	88 23       	and	r24, r24
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	31 c0       	rjmp	.+98     	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    10b0:	19 82       	std	Y+1, r1	; 0x01
    10b2:	2f c0       	rjmp	.+94     	; 0x1112 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    10b4:	e3 e3       	ldi	r30, 0x33	; 51
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a9 01       	movw	r20, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_ReadPin+0xde>
    10c8:	55 95       	asr	r21
    10ca:	47 95       	ror	r20
    10cc:	8a 95       	dec	r24
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_ReadPin+0xda>
    10d0:	ca 01       	movw	r24, r20
    10d2:	81 70       	andi	r24, 0x01	; 1
    10d4:	90 70       	andi	r25, 0x00	; 0
    10d6:	88 23       	and	r24, r24
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	19 c0       	rjmp	.+50     	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    10e0:	19 82       	std	Y+1, r1	; 0x01
    10e2:	17 c0       	rjmp	.+46     	; 0x1112 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    10e4:	e0 e3       	ldi	r30, 0x30	; 48
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_ReadPin+0x10e>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_ReadPin+0x10a>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	90 70       	andi	r25, 0x00	; 0
    1106:	88 23       	and	r24, r24
    1108:	19 f0       	breq	.+6      	; 0x1110 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1110:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <GPIO_WritePin+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <GPIO_WritePin+0x8>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	6a 83       	std	Y+2, r22	; 0x02
    1136:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <GPIO_WritePin+0x1c>
    113e:	e4 c0       	rjmp	.+456    	; 0x1308 <GPIO_WritePin+0x1e4>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <GPIO_WritePin+0x24>
    1146:	e0 c0       	rjmp	.+448    	; 0x1308 <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 83       	std	Y+5, r19	; 0x05
    1150:	2c 83       	std	Y+4, r18	; 0x04
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <GPIO_WritePin+0x3a>
    115c:	47 c0       	rjmp	.+142    	; 0x11ec <GPIO_WritePin+0xc8>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	2c f4       	brge	.+10     	; 0x1172 <GPIO_WritePin+0x4e>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	71 f0       	breq	.+28     	; 0x118c <GPIO_WritePin+0x68>
    1170:	cb c0       	rjmp	.+406    	; 0x1308 <GPIO_WritePin+0x1e4>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <GPIO_WritePin+0x5a>
    117c:	67 c0       	rjmp	.+206    	; 0x124c <GPIO_WritePin+0x128>
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <GPIO_WritePin+0x66>
    1188:	91 c0       	rjmp	.+290    	; 0x12ac <GPIO_WritePin+0x188>
    118a:	be c0       	rjmp	.+380    	; 0x1308 <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1192:	ab e3       	ldi	r26, 0x3B	; 59
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e3       	ldi	r30, 0x3B	; 59
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_WritePin+0x8c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_WritePin+0x88>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	a7 c0       	rjmp	.+334    	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <GPIO_WritePin+0x9e>
    11c0:	a3 c0       	rjmp	.+326    	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    11c2:	ab e3       	ldi	r26, 0x3B	; 59
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e3       	ldi	r30, 0x3B	; 59
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_WritePin+0xbc>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_WritePin+0xb8>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	8e c0       	rjmp	.+284    	; 0x1308 <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	a1 f4       	brne	.+40     	; 0x121a <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_WritePin+0xec>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_WritePin+0xe8>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	77 c0       	rjmp	.+238    	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 23       	and	r24, r24
    121e:	09 f0       	breq	.+2      	; 0x1222 <GPIO_WritePin+0xfe>
    1220:	73 c0       	rjmp	.+230    	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_WritePin+0x11c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_WritePin+0x118>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	5e c0       	rjmp	.+188    	; 0x1308 <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	a1 f4       	brne	.+40     	; 0x127a <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <GPIO_WritePin+0x14c>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <GPIO_WritePin+0x148>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	47 c0       	rjmp	.+142    	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 23       	and	r24, r24
    127e:	09 f0       	breq	.+2      	; 0x1282 <GPIO_WritePin+0x15e>
    1280:	43 c0       	rjmp	.+134    	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    1282:	a5 e3       	ldi	r26, 0x35	; 53
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_WritePin+0x17c>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_WritePin+0x178>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	a1 f4       	brne	.+40     	; 0x12da <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    12b2:	a2 e3       	ldi	r26, 0x32	; 50
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e2 e3       	ldi	r30, 0x32	; 50
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_WritePin+0x1ac>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_WritePin+0x1a8>
    12d4:	84 2b       	or	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	17 c0       	rjmp	.+46     	; 0x1308 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 23       	and	r24, r24
    12de:	a1 f4       	brne	.+40     	; 0x1308 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_WritePin+0x1da>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_WritePin+0x1d6>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
                break;

        }
    }
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <GPIO_TogglePin+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_TogglePin+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	08 f0       	brcs	.+2      	; 0x1330 <GPIO_TogglePin+0x18>
    132e:	72 c0       	rjmp	.+228    	; 0x1414 <GPIO_TogglePin+0xfc>
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	08 f0       	brcs	.+2      	; 0x1338 <GPIO_TogglePin+0x20>
    1336:	6e c0       	rjmp	.+220    	; 0x1414 <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3c 83       	std	Y+4, r19	; 0x04
    1340:	2b 83       	std	Y+3, r18	; 0x03
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	49 f1       	breq	.+82     	; 0x139e <GPIO_TogglePin+0x86>
    134c:	2b 81       	ldd	r18, Y+3	; 0x03
    134e:	3c 81       	ldd	r19, Y+4	; 0x04
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <GPIO_TogglePin+0x48>
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	61 f0       	breq	.+24     	; 0x1376 <GPIO_TogglePin+0x5e>
    135e:	5a c0       	rjmp	.+180    	; 0x1414 <GPIO_TogglePin+0xfc>
    1360:	2b 81       	ldd	r18, Y+3	; 0x03
    1362:	3c 81       	ldd	r19, Y+4	; 0x04
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	71 f1       	breq	.+92     	; 0x13c6 <GPIO_TogglePin+0xae>
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	e9 f1       	breq	.+122    	; 0x13ee <GPIO_TogglePin+0xd6>
    1374:	4f c0       	rjmp	.+158    	; 0x1414 <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    1376:	ab e3       	ldi	r26, 0x3B	; 59
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	eb e3       	ldi	r30, 0x3B	; 59
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_TogglePin+0x7c>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_TogglePin+0x78>
    1398:	84 27       	eor	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	3b c0       	rjmp	.+118    	; 0x1414 <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    139e:	a8 e3       	ldi	r26, 0x38	; 56
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_TogglePin+0xa4>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_TogglePin+0xa0>
    13c0:	84 27       	eor	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	27 c0       	rjmp	.+78     	; 0x1414 <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    13c6:	a5 e3       	ldi	r26, 0x35	; 53
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e3       	ldi	r30, 0x35	; 53
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_TogglePin+0xcc>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_TogglePin+0xc8>
    13e8:	84 27       	eor	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <GPIO_TogglePin+0xf4>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <GPIO_TogglePin+0xf0>
    1410:	84 27       	eor	r24, r20
    1412:	8c 93       	st	X, r24
                break;

        }
    }

}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <GPIO_SetPortDirection+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <GPIO_SetPortDirection+0x8>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	08 f0       	brcs	.+2      	; 0x143a <GPIO_SetPortDirection+0x18>
    1438:	96 c0       	rjmp	.+300    	; 0x1566 <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	a9 f1       	breq	.+106    	; 0x14b8 <GPIO_SetPortDirection+0x96>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <GPIO_SetPortDirection+0x40>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	71 f0       	breq	.+28     	; 0x147c <GPIO_SetPortDirection+0x5a>
    1460:	82 c0       	rjmp	.+260    	; 0x1566 <GPIO_SetPortDirection+0x144>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <GPIO_SetPortDirection+0x4c>
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <GPIO_SetPortDirection+0xd2>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <GPIO_SetPortDirection+0x58>
    1478:	5a c0       	rjmp	.+180    	; 0x152e <GPIO_SetPortDirection+0x10c>
    147a:	75 c0       	rjmp	.+234    	; 0x1566 <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	88 23       	and	r24, r24
    1480:	39 f4       	brne	.+14     	; 0x1490 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1488:	eb e3       	ldi	r30, 0x3B	; 59
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
    148e:	6b c0       	rjmp	.+214    	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	41 f4       	brne	.+16     	; 0x14a6 <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1496:	ea e3       	ldi	r30, 0x3A	; 58
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	80 83       	st	Z, r24
    14a4:	60 c0       	rjmp	.+192    	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	8f 3f       	cpi	r24, 0xFF	; 255
    14aa:	09 f0       	breq	.+2      	; 0x14ae <GPIO_SetPortDirection+0x8c>
    14ac:	5c c0       	rjmp	.+184    	; 0x1566 <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    14ae:	ea e3       	ldi	r30, 0x3A	; 58
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	80 83       	st	Z, r24
    14b6:	57 c0       	rjmp	.+174    	; 0x1566 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	88 23       	and	r24, r24
    14bc:	39 f4       	brne	.+14     	; 0x14cc <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    14be:	e7 e3       	ldi	r30, 0x37	; 55
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    14c4:	e8 e3       	ldi	r30, 0x38	; 56
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	10 82       	st	Z, r1
    14ca:	4d c0       	rjmp	.+154    	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	41 f4       	brne	.+16     	; 0x14e2 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	80 83       	st	Z, r24
    14e0:	42 c0       	rjmp	.+132    	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	8f 3f       	cpi	r24, 0xFF	; 255
    14e6:	09 f0       	breq	.+2      	; 0x14ea <GPIO_SetPortDirection+0xc8>
    14e8:	3e c0       	rjmp	.+124    	; 0x1566 <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    14ea:	e7 e3       	ldi	r30, 0x37	; 55
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
    14f2:	39 c0       	rjmp	.+114    	; 0x1566 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	88 23       	and	r24, r24
    14f8:	39 f4       	brne	.+14     	; 0x1508 <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1500:	e5 e3       	ldi	r30, 0x35	; 53
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	10 82       	st	Z, r1
    1506:	2f c0       	rjmp	.+94     	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	41 f4       	brne	.+16     	; 0x151e <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    150e:	e4 e3       	ldi	r30, 0x34	; 52
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1514:	e5 e3       	ldi	r30, 0x35	; 53
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	80 83       	st	Z, r24
    151c:	24 c0       	rjmp	.+72     	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	09 f5       	brne	.+66     	; 0x1566 <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    1524:	e4 e3       	ldi	r30, 0x34	; 52
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	80 83       	st	Z, r24
    152c:	1c c0       	rjmp	.+56     	; 0x1566 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	88 23       	and	r24, r24
    1532:	39 f4       	brne	.+14     	; 0x1542 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    1534:	e1 e3       	ldi	r30, 0x31	; 49
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	10 82       	st	Z, r1
    1540:	12 c0       	rjmp	.+36     	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	41 f4       	brne	.+16     	; 0x1558 <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	80 83       	st	Z, r24
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	8f 3f       	cpi	r24, 0xFF	; 255
    155c:	21 f4       	brne	.+8      	; 0x1566 <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    155e:	e1 e3       	ldi	r30, 0x31	; 49
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <GPIO_ReadPort+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_ReadPort+0x8>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    1582:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	90 f5       	brcc	.+100    	; 0x15ee <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3c 83       	std	Y+4, r19	; 0x04
    1592:	2b 83       	std	Y+3, r18	; 0x03
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	d1 f0       	breq	.+52     	; 0x15d2 <GPIO_ReadPort+0x5e>
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <GPIO_ReadPort+0x3e>
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <GPIO_ReadPort+0x54>
    15b0:	1e c0       	rjmp	.+60     	; 0x15ee <GPIO_ReadPort+0x7a>
    15b2:	2b 81       	ldd	r18, Y+3	; 0x03
    15b4:	3c 81       	ldd	r19, Y+4	; 0x04
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <GPIO_ReadPort+0x68>
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	91 05       	cpc	r25, r1
    15c4:	81 f0       	breq	.+32     	; 0x15e6 <GPIO_ReadPort+0x72>
    15c6:	13 c0       	rjmp	.+38     	; 0x15ee <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    15c8:	e9 e3       	ldi	r30, 0x39	; 57
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	0e c0       	rjmp	.+28     	; 0x15ee <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    15d2:	e6 e3       	ldi	r30, 0x36	; 54
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    15dc:	e3 e3       	ldi	r30, 0x33	; 51
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    15e6:	e0 e3       	ldi	r30, 0x30	; 48
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <GPIO_WritePort+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_WritePort+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	90 f5       	brcc	.+100    	; 0x1678 <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	d1 f0       	breq	.+52     	; 0x165c <GPIO_WritePort+0x5e>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <GPIO_WritePort+0x3e>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <GPIO_WritePort+0x54>
    163a:	1e c0       	rjmp	.+60     	; 0x1678 <GPIO_WritePort+0x7a>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_WritePort+0x68>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_WritePort+0x72>
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1652:	eb e3       	ldi	r30, 0x3B	; 59
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	80 83       	st	Z, r24
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    165c:	e8 e3       	ldi	r30, 0x38	; 56
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 83       	st	Z, r24
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    1666:	e5 e3       	ldi	r30, 0x35	; 53
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <GPIO_TogglePort+0x6>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	84 30       	cpi	r24, 0x04	; 4
    1698:	08 f0       	brcs	.+2      	; 0x169c <GPIO_TogglePort+0x16>
    169a:	3e c0       	rjmp	.+124    	; 0x1718 <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3b 83       	std	Y+3, r19	; 0x03
    16a4:	2a 83       	std	Y+2, r18	; 0x02
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	e9 f0       	breq	.+58     	; 0x16ea <GPIO_TogglePort+0x64>
    16b0:	2a 81       	ldd	r18, Y+2	; 0x02
    16b2:	3b 81       	ldd	r19, Y+3	; 0x03
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <GPIO_TogglePort+0x3e>
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	61 f0       	breq	.+24     	; 0x16da <GPIO_TogglePort+0x54>
    16c2:	2a c0       	rjmp	.+84     	; 0x1718 <GPIO_TogglePort+0x92>
    16c4:	2a 81       	ldd	r18, Y+2	; 0x02
    16c6:	3b 81       	ldd	r19, Y+3	; 0x03
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	b1 f0       	breq	.+44     	; 0x16fa <GPIO_TogglePort+0x74>
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	9b 81       	ldd	r25, Y+3	; 0x03
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	c9 f0       	breq	.+50     	; 0x170a <GPIO_TogglePort+0x84>
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 95       	com	r24
    16e6:	8c 93       	st	X, r24
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 95       	com	r24
    16f6:	8c 93       	st	X, r24
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    16fa:	a5 e3       	ldi	r26, 0x35	; 53
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e5 e3       	ldi	r30, 0x35	; 53
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 95       	com	r24
    1706:	8c 93       	st	X, r24
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    170a:	a2 e3       	ldi	r26, 0x32	; 50
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e2 e3       	ldi	r30, 0x32	; 50
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	80 95       	com	r24
    1716:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	2f 93       	push	r18
    1730:	3f 93       	push	r19
    1732:	4f 93       	push	r20
    1734:	5f 93       	push	r21
    1736:	6f 93       	push	r22
    1738:	7f 93       	push	r23
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
    173e:	af 93       	push	r26
    1740:	bf 93       	push	r27
    1742:	ef 93       	push	r30
    1744:	ff 93       	push	r31
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    174e:	80 91 cc 00 	lds	r24, 0x00CC
    1752:	90 91 cd 00 	lds	r25, 0x00CD
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	29 f0       	breq	.+10     	; 0x1764 <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    175a:	e0 91 cc 00 	lds	r30, 0x00CC
    175e:	f0 91 cd 00 	lds	r31, 0x00CD
    1762:	09 95       	icall
    }
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_2>:

ISR(INT1)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    17b4:	80 91 ce 00 	lds	r24, 0x00CE
    17b8:	90 91 cf 00 	lds	r25, 0x00CF
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	29 f0       	breq	.+10     	; 0x17ca <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    17c0:	e0 91 ce 00 	lds	r30, 0x00CE
    17c4:	f0 91 cf 00 	lds	r31, 0x00CF
    17c8:	09 95       	icall
    }
}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	bf 91       	pop	r27
    17d4:	af 91       	pop	r26
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	7f 91       	pop	r23
    17dc:	6f 91       	pop	r22
    17de:	5f 91       	pop	r21
    17e0:	4f 91       	pop	r20
    17e2:	3f 91       	pop	r19
    17e4:	2f 91       	pop	r18
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <__vector_3>:

ISR(INT2)
{
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    181a:	80 91 d0 00 	lds	r24, 0x00D0
    181e:	90 91 d1 00 	lds	r25, 0x00D1
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	29 f0       	breq	.+10     	; 0x1830 <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    1826:	e0 91 d0 00 	lds	r30, 0x00D0
    182a:	f0 91 d1 00 	lds	r31, 0x00D1
    182e:	09 95       	icall
    }
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <INT0_SetCallBack+0x6>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	90 93 cd 00 	sts	0x00CD, r25
    186c:	80 93 cc 00 	sts	0x00CC, r24
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <INT1_SetCallBack+0x6>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	90 93 cf 00 	sts	0x00CF, r25
    1890:	80 93 ce 00 	sts	0x00CE, r24
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <INT2_SetCallBack+0x6>
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	90 93 d1 00 	sts	0x00D1, r25
    18b4:	80 93 d0 00 	sts	0x00D0, r24
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <INT0_init+0x6>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	4a 81       	ldd	r20, Y+2	; 0x02
    18d6:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    18da:	a5 e5       	ldi	r26, 0x55	; 85
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e5       	ldi	r30, 0x55	; 85
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	98 2f       	mov	r25, r24
    18e6:	9c 7f       	andi	r25, 0xFC	; 252
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	89 2b       	or	r24, r25
    18ec:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    18ee:	ab e5       	ldi	r26, 0x5B	; 91
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e5       	ldi	r30, 0x5B	; 91
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	8c 93       	st	X, r24
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <INT1_init+0x6>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	63 e0       	ldi	r22, 0x03	; 3
    1918:	4a 81       	ldd	r20, Y+2	; 0x02
    191a:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    191e:	a5 e5       	ldi	r26, 0x55	; 85
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e5 e5       	ldi	r30, 0x55	; 85
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	28 2f       	mov	r18, r24
    192a:	23 7f       	andi	r18, 0xF3	; 243
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	82 2b       	or	r24, r18
    193c:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    193e:	ab e5       	ldi	r26, 0x5B	; 91
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	eb e5       	ldi	r30, 0x5B	; 91
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <INT2_init+0x6>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	4a 81       	ldd	r20, Y+2	; 0x02
    196a:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	41 f4       	brne	.+16     	; 0x1984 <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    1974:	a4 e5       	ldi	r26, 0x54	; 84
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e4 e5       	ldi	r30, 0x54	; 84
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7b       	andi	r24, 0xBF	; 191
    1980:	8c 93       	st	X, r24
    1982:	0a c0       	rjmp	.+20     	; 0x1998 <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	39 f4       	brne	.+14     	; 0x1998 <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    198a:	a4 e5       	ldi	r26, 0x54	; 84
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e4 e5       	ldi	r30, 0x54	; 84
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 64       	ori	r24, 0x40	; 64
    1996:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    1998:	ab e5       	ldi	r26, 0x5B	; 91
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	eb e5       	ldi	r30, 0x5B	; 91
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 62       	ori	r24, 0x20	; 32
    19a4:	8c 93       	st	X, r24
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <INT0_DeInit>:


void INT0_DeInit(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    19b8:	ab e5       	ldi	r26, 0x5B	; 91
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e5       	ldi	r30, 0x5B	; 91
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7b       	andi	r24, 0xBF	; 191
    19c4:	8c 93       	st	X, r24
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <INT1_DeInit>:


void INT1_DeInit(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    19d4:	ab e5       	ldi	r26, 0x5B	; 91
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e5       	ldi	r30, 0x5B	; 91
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8f 77       	andi	r24, 0x7F	; 127
    19e0:	8c 93       	st	X, r24
}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <INT2_DeInit>:

void INT2_DeInit(void)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    19f0:	ab e5       	ldi	r26, 0x5B	; 91
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	eb e5       	ldi	r30, 0x5B	; 91
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8f 7d       	andi	r24, 0xDF	; 223
    19fc:	8c 93       	st	X, r24
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <LED_Init+0x6>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	6a 81       	ldd	r22, Y+2	; 0x02
    1a16:	42 e0       	ldi	r20, 0x02	; 2
    1a18:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <LED_OnOffPositiveLogic+0x6>
    1a2c:	0f 92       	push	r0
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	6a 83       	std	Y+2, r22	; 0x02
    1a36:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 23       	and	r24, r24
    1a3c:	31 f4       	brne	.+12     	; 0x1a4a <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	6a 81       	ldd	r22, Y+2	; 0x02
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	6a 81       	ldd	r22, Y+2	; 0x02
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    }


}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <LED_OnOffNegativeLogic+0x6>
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	6a 83       	std	Y+2, r22	; 0x02
    1a76:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	88 23       	and	r24, r24
    1a7c:	31 f4       	brne	.+12     	; 0x1a8a <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	6a 81       	ldd	r22, Y+2	; 0x02
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	29 f4       	brne	.+10     	; 0x1a9a <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	6a 81       	ldd	r22, Y+2	; 0x02
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    }


}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <LED_Toggle+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ab8:	0e 94 8c 09 	call	0x1318	; 0x1318 <GPIO_TogglePin>
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    /*  Configure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	63 e0       	ldi	r22, 0x03	; 3
    1ad2:	42 e0       	ldi	r20, 0x02	; 2
    1ad4:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  Configure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  Configure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	42 e0       	ldi	r20, 0x02	; 2
    1ade:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	42 e0       	ldi	r20, 0x02	; 2
    1ae8:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	42 e0       	ldi	r20, 0x02	; 2
    1af2:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	62 e0       	ldi	r22, 0x02	; 2
    1afa:	42 e0       	ldi	r20, 0x02	; 2
    1afc:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	64 e0       	ldi	r22, 0x04	; 4
    1b04:	42 e0       	ldi	r20, 0x02	; 2
    1b06:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    1b10:	88 e2       	ldi	r24, 0x28	; 40
    1b12:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1b16:	8c e0       	ldi	r24, 0x0C	; 12
    1b18:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	c4 56       	subi	r28, 0x64	; 100
    1b36:	d0 40       	sbci	r29, 0x00	; 0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	fe 01       	movw	r30, r28
    1b44:	ec 59       	subi	r30, 0x9C	; 156
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	63 e0       	ldi	r22, 0x03	; 3
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1b54:	fe 01       	movw	r30, r28
    1b56:	e1 5a       	subi	r30, 0xA1	; 161
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e8       	ldi	r26, 0x80	; 128
    1b60:	bf e3       	ldi	r27, 0x3F	; 63
    1b62:	80 83       	st	Z, r24
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	a2 83       	std	Z+2, r26	; 0x02
    1b68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	8e 01       	movw	r16, r28
    1b6c:	05 5a       	subi	r16, 0xA5	; 165
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	fe 01       	movw	r30, r28
    1b72:	e1 5a       	subi	r30, 0xA1	; 161
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	f8 01       	movw	r30, r16
    1b90:	80 83       	st	Z, r24
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	a2 83       	std	Z+2, r26	; 0x02
    1b96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e5 5a       	subi	r30, 0xA5	; 165
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	44 f4       	brge	.+16     	; 0x1bc6 <LCD_SendCommand+0x9e>
		__ticks = 1;
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e7 5a       	subi	r30, 0xA7	; 167
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	64 c0       	rjmp	.+200    	; 0x1c8e <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e5 5a       	subi	r30, 0xA5	; 165
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	0c f0       	brlt	.+2      	; 0x1be6 <LCD_SendCommand+0xbe>
    1be4:	43 c0       	rjmp	.+134    	; 0x1c6c <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	fe 01       	movw	r30, r28
    1be8:	e1 5a       	subi	r30, 0xA1	; 161
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8e 01       	movw	r16, r28
    1c06:	07 5a       	subi	r16, 0xA7	; 167
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
    1c1c:	1f c0       	rjmp	.+62     	; 0x1c5c <LCD_SendCommand+0x134>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e9 5a       	subi	r30, 0xA9	; 169
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e9 5a       	subi	r30, 0xA9	; 169
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_SendCommand+0x10e>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e9 5a       	subi	r30, 0xA9	; 169
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	de 01       	movw	r26, r28
    1c46:	a7 5a       	subi	r26, 0xA7	; 167
    1c48:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5a       	subi	r30, 0xA7	; 167
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	11 96       	adiw	r26, 0x01	; 1
    1c58:	9c 93       	st	X, r25
    1c5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e7 5a       	subi	r30, 0xA7	; 167
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	d1 f6       	brne	.-76     	; 0x1c1e <LCD_SendCommand+0xf6>
    1c6a:	27 c0       	rjmp	.+78     	; 0x1cba <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	07 5a       	subi	r16, 0xA7	; 167
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	fe 01       	movw	r30, r28
    1c74:	e5 5a       	subi	r30, 0xA5	; 165
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	de 01       	movw	r26, r28
    1c90:	ab 5a       	subi	r26, 0xAB	; 171
    1c92:	bf 4f       	sbci	r27, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 5a       	subi	r30, 0xA7	; 167
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	8d 93       	st	X+, r24
    1ca0:	9c 93       	st	X, r25
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	eb 5a       	subi	r30, 0xAB	; 171
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_SendCommand+0x184>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	eb 5a       	subi	r30, 0xAB	; 171
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	62 e0       	ldi	r22, 0x02	; 2
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ef 5a       	subi	r30, 0xAF	; 175
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e8       	ldi	r26, 0x80	; 128
    1cd0:	bf e3       	ldi	r27, 0x3F	; 63
    1cd2:	80 83       	st	Z, r24
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	a2 83       	std	Z+2, r26	; 0x02
    1cd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	8e 01       	movw	r16, r28
    1cdc:	03 5b       	subi	r16, 0xB3	; 179
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ef 5a       	subi	r30, 0xAF	; 175
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a e7       	ldi	r20, 0x7A	; 122
    1cf4:	53 e4       	ldi	r21, 0x43	; 67
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	f8 01       	movw	r30, r16
    1d00:	80 83       	st	Z, r24
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	a2 83       	std	Z+2, r26	; 0x02
    1d06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e3 5b       	subi	r30, 0xB3	; 179
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	44 f4       	brge	.+16     	; 0x1d36 <LCD_SendCommand+0x20e>
		__ticks = 1;
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 5b       	subi	r30, 0xB5	; 181
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	64 c0       	rjmp	.+200    	; 0x1dfe <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    1d36:	fe 01       	movw	r30, r28
    1d38:	e3 5b       	subi	r30, 0xB3	; 179
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	0c f0       	brlt	.+2      	; 0x1d56 <LCD_SendCommand+0x22e>
    1d54:	43 c0       	rjmp	.+134    	; 0x1ddc <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	fe 01       	movw	r30, r28
    1d58:	ef 5a       	subi	r30, 0xAF	; 175
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	8e 01       	movw	r16, r28
    1d76:	05 5b       	subi	r16, 0xB5	; 181
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	f8 01       	movw	r30, r16
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
    1d8c:	1f c0       	rjmp	.+62     	; 0x1dcc <LCD_SendCommand+0x2a4>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e7 5b       	subi	r30, 0xB7	; 183
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	89 e1       	ldi	r24, 0x19	; 25
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e7 5b       	subi	r30, 0xB7	; 183
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_SendCommand+0x27e>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e7 5b       	subi	r30, 0xB7	; 183
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	de 01       	movw	r26, r28
    1db6:	a5 5b       	subi	r26, 0xB5	; 181
    1db8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e5 5b       	subi	r30, 0xB5	; 181
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	9c 93       	st	X, r25
    1dca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e5 5b       	subi	r30, 0xB5	; 181
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	d1 f6       	brne	.-76     	; 0x1d8e <LCD_SendCommand+0x266>
    1dda:	27 c0       	rjmp	.+78     	; 0x1e2a <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	8e 01       	movw	r16, r28
    1dde:	05 5b       	subi	r16, 0xB5	; 181
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	e3 5b       	subi	r30, 0xB3	; 179
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	f8 01       	movw	r30, r16
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	de 01       	movw	r26, r28
    1e00:	a9 5b       	subi	r26, 0xB9	; 185
    1e02:	bf 4f       	sbci	r27, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	e5 5b       	subi	r30, 0xB5	; 181
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	8d 93       	st	X+, r24
    1e10:	9c 93       	st	X, r25
    1e12:	fe 01       	movw	r30, r28
    1e14:	e9 5b       	subi	r30, 0xB9	; 185
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_SendCommand+0x2f4>
    1e20:	fe 01       	movw	r30, r28
    1e22:	e9 5b       	subi	r30, 0xB9	; 185
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    1e2a:	de 01       	movw	r26, r28
    1e2c:	ad 59       	subi	r26, 0x9D	; 157
    1e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e30:	fe 01       	movw	r30, r28
    1e32:	ec 59       	subi	r30, 0x9C	; 156
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	82 95       	swap	r24
    1e3a:	8f 70       	andi	r24, 0x0F	; 15
    1e3c:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ed 59       	subi	r30, 0x9D	; 157
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	98 2f       	mov	r25, r24
    1e48:	91 70       	andi	r25, 0x01	; 1
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	49 2f       	mov	r20, r25
    1e50:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 59       	subi	r30, 0x9D	; 157
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	86 95       	lsr	r24
    1e5e:	98 2f       	mov	r25, r24
    1e60:	91 70       	andi	r25, 0x01	; 1
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	49 2f       	mov	r20, r25
    1e68:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ed 59       	subi	r30, 0x9D	; 157
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	86 95       	lsr	r24
    1e76:	86 95       	lsr	r24
    1e78:	98 2f       	mov	r25, r24
    1e7a:	91 70       	andi	r25, 0x01	; 1
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	49 2f       	mov	r20, r25
    1e82:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    1e86:	fe 01       	movw	r30, r28
    1e88:	ed 59       	subi	r30, 0x9D	; 157
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	86 95       	lsr	r24
    1e90:	86 95       	lsr	r24
    1e92:	86 95       	lsr	r24
    1e94:	98 2f       	mov	r25, r24
    1e96:	91 70       	andi	r25, 0x01	; 1
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	64 e0       	ldi	r22, 0x04	; 4
    1e9c:	49 2f       	mov	r20, r25
    1e9e:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 5b       	subi	r30, 0xBD	; 189
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e8       	ldi	r26, 0x80	; 128
    1eae:	bf e3       	ldi	r27, 0x3F	; 63
    1eb0:	80 83       	st	Z, r24
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	a2 83       	std	Z+2, r26	; 0x02
    1eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	01 5c       	subi	r16, 0xC1	; 193
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ed 5b       	subi	r30, 0xBD	; 189
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a e7       	ldi	r20, 0x7A	; 122
    1ed2:	53 e4       	ldi	r21, 0x43	; 67
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 83       	st	Z, r24
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	a2 83       	std	Z+2, r26	; 0x02
    1ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	ff 96       	adiw	r30, 0x3f	; 63
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_SendCommand+0x3e4>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9e af       	std	Y+62, r25	; 0x3e
    1f08:	8d af       	std	Y+61, r24	; 0x3d
    1f0a:	46 c0       	rjmp	.+140    	; 0x1f98 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ff 96       	adiw	r30, 0x3f	; 63
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	64 f5       	brge	.+88     	; 0x1f80 <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ed 5b       	subi	r30, 0xBD	; 189
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e af       	std	Y+62, r25	; 0x3e
    1f54:	8d af       	std	Y+61, r24	; 0x3d
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <LCD_SendCommand+0x44e>
    1f58:	89 e1       	ldi	r24, 0x19	; 25
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c af       	std	Y+60, r25	; 0x3c
    1f5e:	8b af       	std	Y+59, r24	; 0x3b
    1f60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_SendCommand+0x43c>
    1f68:	9c af       	std	Y+60, r25	; 0x3c
    1f6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	9e af       	std	Y+62, r25	; 0x3e
    1f74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <LCD_SendCommand+0x430>
    1f7e:	16 c0       	rjmp	.+44     	; 0x1fac <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	fe 01       	movw	r30, r28
    1f82:	ff 96       	adiw	r30, 0x3f	; 63
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9e af       	std	Y+62, r25	; 0x3e
    1f96:	8d af       	std	Y+61, r24	; 0x3d
    1f98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f9c:	9a af       	std	Y+58, r25	; 0x3a
    1f9e:	89 af       	std	Y+57, r24	; 0x39
    1fa0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_SendCommand+0x47c>
    1fa8:	9a af       	std	Y+58, r25	; 0x3a
    1faa:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e8       	ldi	r26, 0x80	; 128
    1fbc:	bf e3       	ldi	r27, 0x3F	; 63
    1fbe:	8d ab       	std	Y+53, r24	; 0x35
    1fc0:	9e ab       	std	Y+54, r25	; 0x36
    1fc2:	af ab       	std	Y+55, r26	; 0x37
    1fc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fca:	8f a9       	ldd	r24, Y+55	; 0x37
    1fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	53 e4       	ldi	r21, 0x43	; 67
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	89 ab       	std	Y+49, r24	; 0x31
    1fe0:	9a ab       	std	Y+50, r25	; 0x32
    1fe2:	ab ab       	std	Y+51, r26	; 0x33
    1fe4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fea:	8b a9       	ldd	r24, Y+51	; 0x33
    1fec:	9c a9       	ldd	r25, Y+52	; 0x34
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	98 ab       	std	Y+48, r25	; 0x30
    2004:	8f a7       	std	Y+47, r24	; 0x2f
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    2008:	69 a9       	ldd	r22, Y+49	; 0x31
    200a:	7a a9       	ldd	r23, Y+50	; 0x32
    200c:	8b a9       	ldd	r24, Y+51	; 0x33
    200e:	9c a9       	ldd	r25, Y+52	; 0x34
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6d a9       	ldd	r22, Y+53	; 0x35
    2022:	7e a9       	ldd	r23, Y+54	; 0x36
    2024:	8f a9       	ldd	r24, Y+55	; 0x37
    2026:	98 ad       	ldd	r25, Y+56	; 0x38
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	98 ab       	std	Y+48, r25	; 0x30
    2046:	8f a7       	std	Y+47, r24	; 0x2f
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_SendCommand+0x540>
    204a:	89 e1       	ldi	r24, 0x19	; 25
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9e a7       	std	Y+46, r25	; 0x2e
    2050:	8d a7       	std	Y+45, r24	; 0x2d
    2052:	8d a5       	ldd	r24, Y+45	; 0x2d
    2054:	9e a5       	ldd	r25, Y+46	; 0x2e
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_SendCommand+0x52e>
    205a:	9e a7       	std	Y+46, r25	; 0x2e
    205c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	98 ab       	std	Y+48, r25	; 0x30
    2066:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8f a5       	ldd	r24, Y+47	; 0x2f
    206a:	98 a9       	ldd	r25, Y+48	; 0x30
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_SendCommand+0x522>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	69 a9       	ldd	r22, Y+49	; 0x31
    2074:	7a a9       	ldd	r23, Y+50	; 0x32
    2076:	8b a9       	ldd	r24, Y+51	; 0x33
    2078:	9c a9       	ldd	r25, Y+52	; 0x34
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	98 ab       	std	Y+48, r25	; 0x30
    2084:	8f a7       	std	Y+47, r24	; 0x2f
    2086:	8f a5       	ldd	r24, Y+47	; 0x2f
    2088:	98 a9       	ldd	r25, Y+48	; 0x30
    208a:	9c a7       	std	Y+44, r25	; 0x2c
    208c:	8b a7       	std	Y+43, r24	; 0x2b
    208e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2090:	9c a5       	ldd	r25, Y+44	; 0x2c
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_SendCommand+0x56a>
    2096:	9c a7       	std	Y+44, r25	; 0x2c
    2098:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	62 e0       	ldi	r22, 0x02	; 2
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	8f a3       	std	Y+39, r24	; 0x27
    20ae:	98 a7       	std	Y+40, r25	; 0x28
    20b0:	a9 a7       	std	Y+41, r26	; 0x29
    20b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	53 e4       	ldi	r21, 0x43	; 67
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8b a3       	std	Y+35, r24	; 0x23
    20ce:	9c a3       	std	Y+36, r25	; 0x24
    20d0:	ad a3       	std	Y+37, r26	; 0x25
    20d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_SendCommand+0x5ce>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    20f6:	6b a1       	ldd	r22, Y+35	; 0x23
    20f8:	7c a1       	ldd	r23, Y+36	; 0x24
    20fa:	8d a1       	ldd	r24, Y+37	; 0x25
    20fc:	9e a1       	ldd	r25, Y+38	; 0x26
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6f a1       	ldd	r22, Y+39	; 0x27
    2110:	78 a5       	ldd	r23, Y+40	; 0x28
    2112:	89 a5       	ldd	r24, Y+41	; 0x29
    2114:	9a a5       	ldd	r25, Y+42	; 0x2a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9a a3       	std	Y+34, r25	; 0x22
    2134:	89 a3       	std	Y+33, r24	; 0x21
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_SendCommand+0x62e>
    2138:	89 e1       	ldi	r24, 0x19	; 25
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	98 a3       	std	Y+32, r25	; 0x20
    213e:	8f 8f       	std	Y+31, r24	; 0x1f
    2140:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2142:	98 a1       	ldd	r25, Y+32	; 0x20
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_SendCommand+0x61c>
    2148:	98 a3       	std	Y+32, r25	; 0x20
    214a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9a a3       	std	Y+34, r25	; 0x22
    2154:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	89 a1       	ldd	r24, Y+33	; 0x21
    2158:	9a a1       	ldd	r25, Y+34	; 0x22
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_SendCommand+0x610>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	9e 8f       	std	Y+30, r25	; 0x1e
    217a:	8d 8f       	std	Y+29, r24	; 0x1d
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_SendCommand+0x658>
    2184:	9e 8f       	std	Y+30, r25	; 0x1e
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    2188:	de 01       	movw	r26, r28
    218a:	ad 59       	subi	r26, 0x9D	; 157
    218c:	bf 4f       	sbci	r27, 0xFF	; 255
    218e:	fe 01       	movw	r30, r28
    2190:	ec 59       	subi	r30, 0x9C	; 156
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 81       	ld	r24, Z
    2196:	8f 70       	andi	r24, 0x0F	; 15
    2198:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    219a:	fe 01       	movw	r30, r28
    219c:	ed 59       	subi	r30, 0x9D	; 157
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	98 2f       	mov	r25, r24
    21a4:	91 70       	andi	r25, 0x01	; 1
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	49 2f       	mov	r20, r25
    21ac:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    21b0:	fe 01       	movw	r30, r28
    21b2:	ed 59       	subi	r30, 0x9D	; 157
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	86 95       	lsr	r24
    21ba:	98 2f       	mov	r25, r24
    21bc:	91 70       	andi	r25, 0x01	; 1
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	49 2f       	mov	r20, r25
    21c4:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    21c8:	fe 01       	movw	r30, r28
    21ca:	ed 59       	subi	r30, 0x9D	; 157
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	86 95       	lsr	r24
    21d2:	86 95       	lsr	r24
    21d4:	98 2f       	mov	r25, r24
    21d6:	91 70       	andi	r25, 0x01	; 1
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	62 e0       	ldi	r22, 0x02	; 2
    21dc:	49 2f       	mov	r20, r25
    21de:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    21e2:	fe 01       	movw	r30, r28
    21e4:	ed 59       	subi	r30, 0x9D	; 157
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	86 95       	lsr	r24
    21ec:	86 95       	lsr	r24
    21ee:	86 95       	lsr	r24
    21f0:	98 2f       	mov	r25, r24
    21f2:	91 70       	andi	r25, 0x01	; 1
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	49 2f       	mov	r20, r25
    21fa:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	89 8f       	std	Y+25, r24	; 0x19
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	ab 8f       	std	Y+27, r26	; 0x1b
    220c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8d 8b       	std	Y+21, r24	; 0x15
    2228:	9e 8b       	std	Y+22, r25	; 0x16
    222a:	af 8b       	std	Y+23, r26	; 0x17
    222c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_SendCommand+0x728>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_SendCommand+0x788>
    2292:	89 e1       	ldi	r24, 0x19	; 25
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9a 8b       	std	Y+18, r25	; 0x12
    2298:	89 8b       	std	Y+17, r24	; 0x11
    229a:	89 89       	ldd	r24, Y+17	; 0x11
    229c:	9a 89       	ldd	r25, Y+18	; 0x12
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_SendCommand+0x776>
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8b 89       	ldd	r24, Y+19	; 0x13
    22a8:	9c 89       	ldd	r25, Y+20	; 0x14
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_SendCommand+0x76a>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9c 8b       	std	Y+20, r25	; 0x14
    22cc:	8b 8b       	std	Y+19, r24	; 0x13
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	98 8b       	std	Y+16, r25	; 0x10
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	98 89       	ldd	r25, Y+16	; 0x10
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_SendCommand+0x7b2>
    22de:	98 8b       	std	Y+16, r25	; 0x10
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	62 e0       	ldi	r22, 0x02	; 2
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e8       	ldi	r26, 0x80	; 128
    22f2:	bf e3       	ldi	r27, 0x3F	; 63
    22f4:	8b 87       	std	Y+11, r24	; 0x0b
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	ad 87       	std	Y+13, r26	; 0x0d
    22fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	53 e4       	ldi	r21, 0x43	; 67
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <LCD_SendCommand+0x816>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	0f c0       	rjmp	.+30     	; 0x239e <LCD_SendCommand+0x876>
    2380:	89 e1       	ldi	r24, 0x19	; 25
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_SendCommand+0x864>
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <LCD_SendCommand+0x858>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_SendCommand+0x8a0>
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    23d0:	cc 59       	subi	r28, 0x9C	; 156
    23d2:	df 4f       	sbci	r29, 0xFF	; 255
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	c4 56       	subi	r28, 0x64	; 100
    23f6:	d0 40       	sbci	r29, 0x00	; 0
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	fe 01       	movw	r30, r28
    2404:	ec 59       	subi	r30, 0x9C	; 156
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	63 e0       	ldi	r22, 0x03	; 3
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2414:	fe 01       	movw	r30, r28
    2416:	e1 5a       	subi	r30, 0xA1	; 161
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e8       	ldi	r26, 0x80	; 128
    2420:	bf e3       	ldi	r27, 0x3F	; 63
    2422:	80 83       	st	Z, r24
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	a2 83       	std	Z+2, r26	; 0x02
    2428:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	8e 01       	movw	r16, r28
    242c:	05 5a       	subi	r16, 0xA5	; 165
    242e:	1f 4f       	sbci	r17, 0xFF	; 255
    2430:	fe 01       	movw	r30, r28
    2432:	e1 5a       	subi	r30, 0xA1	; 161
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a e7       	ldi	r20, 0x7A	; 122
    2444:	53 e4       	ldi	r21, 0x43	; 67
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	f8 01       	movw	r30, r16
    2450:	80 83       	st	Z, r24
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	a2 83       	std	Z+2, r26	; 0x02
    2456:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2458:	fe 01       	movw	r30, r28
    245a:	e5 5a       	subi	r30, 0xA5	; 165
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	44 f4       	brge	.+16     	; 0x2486 <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    2476:	fe 01       	movw	r30, r28
    2478:	e7 5a       	subi	r30, 0xA7	; 167
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	64 c0       	rjmp	.+200    	; 0x254e <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    2486:	fe 01       	movw	r30, r28
    2488:	e5 5a       	subi	r30, 0xA5	; 165
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	3f ef       	ldi	r19, 0xFF	; 255
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	57 e4       	ldi	r21, 0x47	; 71
    249c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	0c f0       	brlt	.+2      	; 0x24a6 <LCD_DisplayCharacter+0xbe>
    24a4:	43 c0       	rjmp	.+134    	; 0x252c <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	fe 01       	movw	r30, r28
    24a8:	e1 5a       	subi	r30, 0xA1	; 161
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8e 01       	movw	r16, r28
    24c6:	07 5a       	subi	r16, 0xA7	; 167
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	f8 01       	movw	r30, r16
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	1f c0       	rjmp	.+62     	; 0x251c <LCD_DisplayCharacter+0x134>
    24de:	fe 01       	movw	r30, r28
    24e0:	e9 5a       	subi	r30, 0xA9	; 169
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	89 e1       	ldi	r24, 0x19	; 25
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
    24ec:	fe 01       	movw	r30, r28
    24ee:	e9 5a       	subi	r30, 0xA9	; 169
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_DisplayCharacter+0x10e>
    24fa:	fe 01       	movw	r30, r28
    24fc:	e9 5a       	subi	r30, 0xA9	; 169
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2504:	de 01       	movw	r26, r28
    2506:	a7 5a       	subi	r26, 0xA7	; 167
    2508:	bf 4f       	sbci	r27, 0xFF	; 255
    250a:	fe 01       	movw	r30, r28
    250c:	e7 5a       	subi	r30, 0xA7	; 167
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	11 96       	adiw	r26, 0x01	; 1
    2518:	9c 93       	st	X, r25
    251a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	fe 01       	movw	r30, r28
    251e:	e7 5a       	subi	r30, 0xA7	; 167
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	d1 f6       	brne	.-76     	; 0x24de <LCD_DisplayCharacter+0xf6>
    252a:	27 c0       	rjmp	.+78     	; 0x257a <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	8e 01       	movw	r16, r28
    252e:	07 5a       	subi	r16, 0xA7	; 167
    2530:	1f 4f       	sbci	r17, 0xFF	; 255
    2532:	fe 01       	movw	r30, r28
    2534:	e5 5a       	subi	r30, 0xA5	; 165
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	f8 01       	movw	r30, r16
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	de 01       	movw	r26, r28
    2550:	ab 5a       	subi	r26, 0xAB	; 171
    2552:	bf 4f       	sbci	r27, 0xFF	; 255
    2554:	fe 01       	movw	r30, r28
    2556:	e7 5a       	subi	r30, 0xA7	; 167
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	8d 93       	st	X+, r24
    2560:	9c 93       	st	X, r25
    2562:	fe 01       	movw	r30, r28
    2564:	eb 5a       	subi	r30, 0xAB	; 171
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_DisplayCharacter+0x184>
    2570:	fe 01       	movw	r30, r28
    2572:	eb 5a       	subi	r30, 0xAB	; 171
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	62 e0       	ldi	r22, 0x02	; 2
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2584:	fe 01       	movw	r30, r28
    2586:	ef 5a       	subi	r30, 0xAF	; 175
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	a0 e8       	ldi	r26, 0x80	; 128
    2590:	bf e3       	ldi	r27, 0x3F	; 63
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	8e 01       	movw	r16, r28
    259c:	03 5b       	subi	r16, 0xB3	; 179
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	ef 5a       	subi	r30, 0xAF	; 175
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a e7       	ldi	r20, 0x7A	; 122
    25b4:	53 e4       	ldi	r21, 0x43	; 67
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	80 83       	st	Z, r24
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	a2 83       	std	Z+2, r26	; 0x02
    25c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c8:	fe 01       	movw	r30, r28
    25ca:	e3 5b       	subi	r30, 0xB3	; 179
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	44 f4       	brge	.+16     	; 0x25f6 <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    25e6:	fe 01       	movw	r30, r28
    25e8:	e5 5b       	subi	r30, 0xB5	; 181
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	64 c0       	rjmp	.+200    	; 0x26be <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    25f6:	fe 01       	movw	r30, r28
    25f8:	e3 5b       	subi	r30, 0xB3	; 179
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	60 81       	ld	r22, Z
    25fe:	71 81       	ldd	r23, Z+1	; 0x01
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	0c f0       	brlt	.+2      	; 0x2616 <LCD_DisplayCharacter+0x22e>
    2614:	43 c0       	rjmp	.+134    	; 0x269c <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	fe 01       	movw	r30, r28
    2618:	ef 5a       	subi	r30, 0xAF	; 175
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8e 01       	movw	r16, r28
    2636:	05 5b       	subi	r16, 0xB5	; 181
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	f8 01       	movw	r30, r16
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	1f c0       	rjmp	.+62     	; 0x268c <LCD_DisplayCharacter+0x2a4>
    264e:	fe 01       	movw	r30, r28
    2650:	e7 5b       	subi	r30, 0xB7	; 183
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	89 e1       	ldi	r24, 0x19	; 25
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	fe 01       	movw	r30, r28
    265e:	e7 5b       	subi	r30, 0xB7	; 183
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_DisplayCharacter+0x27e>
    266a:	fe 01       	movw	r30, r28
    266c:	e7 5b       	subi	r30, 0xB7	; 183
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	de 01       	movw	r26, r28
    2676:	a5 5b       	subi	r26, 0xB5	; 181
    2678:	bf 4f       	sbci	r27, 0xFF	; 255
    267a:	fe 01       	movw	r30, r28
    267c:	e5 5b       	subi	r30, 0xB5	; 181
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	11 96       	adiw	r26, 0x01	; 1
    2688:	9c 93       	st	X, r25
    268a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	fe 01       	movw	r30, r28
    268e:	e5 5b       	subi	r30, 0xB5	; 181
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	d1 f6       	brne	.-76     	; 0x264e <LCD_DisplayCharacter+0x266>
    269a:	27 c0       	rjmp	.+78     	; 0x26ea <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269c:	8e 01       	movw	r16, r28
    269e:	05 5b       	subi	r16, 0xB5	; 181
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	e3 5b       	subi	r30, 0xB3	; 179
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	f8 01       	movw	r30, r16
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	de 01       	movw	r26, r28
    26c0:	a9 5b       	subi	r26, 0xB9	; 185
    26c2:	bf 4f       	sbci	r27, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 5b       	subi	r30, 0xB5	; 181
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	8d 93       	st	X+, r24
    26d0:	9c 93       	st	X, r25
    26d2:	fe 01       	movw	r30, r28
    26d4:	e9 5b       	subi	r30, 0xB9	; 185
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_DisplayCharacter+0x2f4>
    26e0:	fe 01       	movw	r30, r28
    26e2:	e9 5b       	subi	r30, 0xB9	; 185
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    26ea:	de 01       	movw	r26, r28
    26ec:	ad 59       	subi	r26, 0x9D	; 157
    26ee:	bf 4f       	sbci	r27, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	ec 59       	subi	r30, 0x9C	; 156
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	82 95       	swap	r24
    26fa:	8f 70       	andi	r24, 0x0F	; 15
    26fc:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 59       	subi	r30, 0x9D	; 157
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	98 2f       	mov	r25, r24
    2708:	91 70       	andi	r25, 0x01	; 1
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	49 2f       	mov	r20, r25
    2710:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2714:	fe 01       	movw	r30, r28
    2716:	ed 59       	subi	r30, 0x9D	; 157
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	86 95       	lsr	r24
    271e:	98 2f       	mov	r25, r24
    2720:	91 70       	andi	r25, 0x01	; 1
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	49 2f       	mov	r20, r25
    2728:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    272c:	fe 01       	movw	r30, r28
    272e:	ed 59       	subi	r30, 0x9D	; 157
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	86 95       	lsr	r24
    2736:	86 95       	lsr	r24
    2738:	98 2f       	mov	r25, r24
    273a:	91 70       	andi	r25, 0x01	; 1
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	62 e0       	ldi	r22, 0x02	; 2
    2740:	49 2f       	mov	r20, r25
    2742:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2746:	fe 01       	movw	r30, r28
    2748:	ed 59       	subi	r30, 0x9D	; 157
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	86 95       	lsr	r24
    2750:	86 95       	lsr	r24
    2752:	86 95       	lsr	r24
    2754:	98 2f       	mov	r25, r24
    2756:	91 70       	andi	r25, 0x01	; 1
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	64 e0       	ldi	r22, 0x04	; 4
    275c:	49 2f       	mov	r20, r25
    275e:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2762:	fe 01       	movw	r30, r28
    2764:	ed 5b       	subi	r30, 0xBD	; 189
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 e8       	ldi	r26, 0x80	; 128
    276e:	bf e3       	ldi	r27, 0x3F	; 63
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	8e 01       	movw	r16, r28
    277a:	01 5c       	subi	r16, 0xC1	; 193
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	ed 5b       	subi	r30, 0xBD	; 189
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a e7       	ldi	r20, 0x7A	; 122
    2792:	53 e4       	ldi	r21, 0x43	; 67
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	f8 01       	movw	r30, r16
    279e:	80 83       	st	Z, r24
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	a2 83       	std	Z+2, r26	; 0x02
    27a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a6:	fe 01       	movw	r30, r28
    27a8:	ff 96       	adiw	r30, 0x3f	; 63
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9e af       	std	Y+62, r25	; 0x3e
    27c8:	8d af       	std	Y+61, r24	; 0x3d
    27ca:	46 c0       	rjmp	.+140    	; 0x2858 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    27cc:	fe 01       	movw	r30, r28
    27ce:	ff 96       	adiw	r30, 0x3f	; 63
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	64 f5       	brge	.+88     	; 0x2840 <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	fe 01       	movw	r30, r28
    27ea:	ed 5b       	subi	r30, 0xBD	; 189
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e af       	std	Y+62, r25	; 0x3e
    2814:	8d af       	std	Y+61, r24	; 0x3d
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <LCD_DisplayCharacter+0x44e>
    2818:	89 e1       	ldi	r24, 0x19	; 25
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9c af       	std	Y+60, r25	; 0x3c
    281e:	8b af       	std	Y+59, r24	; 0x3b
    2820:	8b ad       	ldd	r24, Y+59	; 0x3b
    2822:	9c ad       	ldd	r25, Y+60	; 0x3c
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_DisplayCharacter+0x43c>
    2828:	9c af       	std	Y+60, r25	; 0x3c
    282a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	8d ad       	ldd	r24, Y+61	; 0x3d
    282e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	9e af       	std	Y+62, r25	; 0x3e
    2834:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	8d ad       	ldd	r24, Y+61	; 0x3d
    2838:	9e ad       	ldd	r25, Y+62	; 0x3e
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	69 f7       	brne	.-38     	; 0x2818 <LCD_DisplayCharacter+0x430>
    283e:	16 c0       	rjmp	.+44     	; 0x286c <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2840:	fe 01       	movw	r30, r28
    2842:	ff 96       	adiw	r30, 0x3f	; 63
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9e af       	std	Y+62, r25	; 0x3e
    2856:	8d af       	std	Y+61, r24	; 0x3d
    2858:	8d ad       	ldd	r24, Y+61	; 0x3d
    285a:	9e ad       	ldd	r25, Y+62	; 0x3e
    285c:	9a af       	std	Y+58, r25	; 0x3a
    285e:	89 af       	std	Y+57, r24	; 0x39
    2860:	89 ad       	ldd	r24, Y+57	; 0x39
    2862:	9a ad       	ldd	r25, Y+58	; 0x3a
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_DisplayCharacter+0x47c>
    2868:	9a af       	std	Y+58, r25	; 0x3a
    286a:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	62 e0       	ldi	r22, 0x02	; 2
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e8       	ldi	r26, 0x80	; 128
    287c:	bf e3       	ldi	r27, 0x3F	; 63
    287e:	8d ab       	std	Y+53, r24	; 0x35
    2880:	9e ab       	std	Y+54, r25	; 0x36
    2882:	af ab       	std	Y+55, r26	; 0x37
    2884:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6d a9       	ldd	r22, Y+53	; 0x35
    2888:	7e a9       	ldd	r23, Y+54	; 0x36
    288a:	8f a9       	ldd	r24, Y+55	; 0x37
    288c:	98 ad       	ldd	r25, Y+56	; 0x38
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a e7       	ldi	r20, 0x7A	; 122
    2894:	53 e4       	ldi	r21, 0x43	; 67
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	89 ab       	std	Y+49, r24	; 0x31
    28a0:	9a ab       	std	Y+50, r25	; 0x32
    28a2:	ab ab       	std	Y+51, r26	; 0x33
    28a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28a6:	69 a9       	ldd	r22, Y+49	; 0x31
    28a8:	7a a9       	ldd	r23, Y+50	; 0x32
    28aa:	8b a9       	ldd	r24, Y+51	; 0x33
    28ac:	9c a9       	ldd	r25, Y+52	; 0x34
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    28c8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ca:	7a a9       	ldd	r23, Y+50	; 0x32
    28cc:	8b a9       	ldd	r24, Y+51	; 0x33
    28ce:	9c a9       	ldd	r25, Y+52	; 0x34
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6d a9       	ldd	r22, Y+53	; 0x35
    28e2:	7e a9       	ldd	r23, Y+54	; 0x36
    28e4:	8f a9       	ldd	r24, Y+55	; 0x37
    28e6:	98 ad       	ldd	r25, Y+56	; 0x38
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_DisplayCharacter+0x540>
    290a:	89 e1       	ldi	r24, 0x19	; 25
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e a7       	std	Y+46, r25	; 0x2e
    2910:	8d a7       	std	Y+45, r24	; 0x2d
    2912:	8d a5       	ldd	r24, Y+45	; 0x2d
    2914:	9e a5       	ldd	r25, Y+46	; 0x2e
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_DisplayCharacter+0x52e>
    291a:	9e a7       	std	Y+46, r25	; 0x2e
    291c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	98 a9       	ldd	r25, Y+48	; 0x30
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LCD_DisplayCharacter+0x522>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	98 ab       	std	Y+48, r25	; 0x30
    2944:	8f a7       	std	Y+47, r24	; 0x2f
    2946:	8f a5       	ldd	r24, Y+47	; 0x2f
    2948:	98 a9       	ldd	r25, Y+48	; 0x30
    294a:	9c a7       	std	Y+44, r25	; 0x2c
    294c:	8b a7       	std	Y+43, r24	; 0x2b
    294e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2950:	9c a5       	ldd	r25, Y+44	; 0x2c
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_DisplayCharacter+0x56a>
    2956:	9c a7       	std	Y+44, r25	; 0x2c
    2958:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	62 e0       	ldi	r22, 0x02	; 2
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e8       	ldi	r26, 0x80	; 128
    296a:	bf e3       	ldi	r27, 0x3F	; 63
    296c:	8f a3       	std	Y+39, r24	; 0x27
    296e:	98 a7       	std	Y+40, r25	; 0x28
    2970:	a9 a7       	std	Y+41, r26	; 0x29
    2972:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6f a1       	ldd	r22, Y+39	; 0x27
    2976:	78 a5       	ldd	r23, Y+40	; 0x28
    2978:	89 a5       	ldd	r24, Y+41	; 0x29
    297a:	9a a5       	ldd	r25, Y+42	; 0x2a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a e7       	ldi	r20, 0x7A	; 122
    2982:	53 e4       	ldi	r21, 0x43	; 67
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8b a3       	std	Y+35, r24	; 0x23
    298e:	9c a3       	std	Y+36, r25	; 0x24
    2990:	ad a3       	std	Y+37, r26	; 0x25
    2992:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2994:	6b a1       	ldd	r22, Y+35	; 0x23
    2996:	7c a1       	ldd	r23, Y+36	; 0x24
    2998:	8d a1       	ldd	r24, Y+37	; 0x25
    299a:	9e a1       	ldd	r25, Y+38	; 0x26
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    29b6:	6b a1       	ldd	r22, Y+35	; 0x23
    29b8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ba:	8d a1       	ldd	r24, Y+37	; 0x25
    29bc:	9e a1       	ldd	r25, Y+38	; 0x26
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6f a1       	ldd	r22, Y+39	; 0x27
    29d0:	78 a5       	ldd	r23, Y+40	; 0x28
    29d2:	89 a5       	ldd	r24, Y+41	; 0x29
    29d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9a a3       	std	Y+34, r25	; 0x22
    29f4:	89 a3       	std	Y+33, r24	; 0x21
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <LCD_DisplayCharacter+0x62e>
    29f8:	89 e1       	ldi	r24, 0x19	; 25
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	98 a3       	std	Y+32, r25	; 0x20
    29fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2a00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a02:	98 a1       	ldd	r25, Y+32	; 0x20
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_DisplayCharacter+0x61c>
    2a08:	98 a3       	std	Y+32, r25	; 0x20
    2a0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	89 a1       	ldd	r24, Y+33	; 0x21
    2a18:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <LCD_DisplayCharacter+0x610>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6b a1       	ldd	r22, Y+35	; 0x23
    2a22:	7c a1       	ldd	r23, Y+36	; 0x24
    2a24:	8d a1       	ldd	r24, Y+37	; 0x25
    2a26:	9e a1       	ldd	r25, Y+38	; 0x26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9a a3       	std	Y+34, r25	; 0x22
    2a32:	89 a3       	std	Y+33, r24	; 0x21
    2a34:	89 a1       	ldd	r24, Y+33	; 0x21
    2a36:	9a a1       	ldd	r25, Y+34	; 0x22
    2a38:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_DisplayCharacter+0x658>
    2a44:	9e 8f       	std	Y+30, r25	; 0x1e
    2a46:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    2a48:	de 01       	movw	r26, r28
    2a4a:	ad 59       	subi	r26, 0x9D	; 157
    2a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ec 59       	subi	r30, 0x9C	; 156
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	8f 70       	andi	r24, 0x0F	; 15
    2a58:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ed 59       	subi	r30, 0x9D	; 157
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	98 2f       	mov	r25, r24
    2a64:	91 70       	andi	r25, 0x01	; 1
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	49 2f       	mov	r20, r25
    2a6c:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2a70:	fe 01       	movw	r30, r28
    2a72:	ed 59       	subi	r30, 0x9D	; 157
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	86 95       	lsr	r24
    2a7a:	98 2f       	mov	r25, r24
    2a7c:	91 70       	andi	r25, 0x01	; 1
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	61 e0       	ldi	r22, 0x01	; 1
    2a82:	49 2f       	mov	r20, r25
    2a84:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ed 59       	subi	r30, 0x9D	; 157
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	86 95       	lsr	r24
    2a92:	86 95       	lsr	r24
    2a94:	98 2f       	mov	r25, r24
    2a96:	91 70       	andi	r25, 0x01	; 1
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	62 e0       	ldi	r22, 0x02	; 2
    2a9c:	49 2f       	mov	r20, r25
    2a9e:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ed 59       	subi	r30, 0x9D	; 157
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	86 95       	lsr	r24
    2aac:	86 95       	lsr	r24
    2aae:	86 95       	lsr	r24
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	91 70       	andi	r25, 0x01	; 1
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	64 e0       	ldi	r22, 0x04	; 4
    2ab8:	49 2f       	mov	r20, r25
    2aba:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e8       	ldi	r26, 0x80	; 128
    2ac4:	bf e3       	ldi	r27, 0x3F	; 63
    2ac6:	89 8f       	std	Y+25, r24	; 0x19
    2ac8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aca:	ab 8f       	std	Y+27, r26	; 0x1b
    2acc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a e7       	ldi	r20, 0x7A	; 122
    2adc:	53 e4       	ldi	r21, 0x43	; 67
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8d 8b       	std	Y+21, r24	; 0x15
    2ae8:	9e 8b       	std	Y+22, r25	; 0x16
    2aea:	af 8b       	std	Y+23, r26	; 0x17
    2aec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aee:	6d 89       	ldd	r22, Y+21	; 0x15
    2af0:	7e 89       	ldd	r23, Y+22	; 0x16
    2af2:	8f 89       	ldd	r24, Y+23	; 0x17
    2af4:	98 8d       	ldd	r25, Y+24	; 0x18
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9c 8b       	std	Y+20, r25	; 0x14
    2b0c:	8b 8b       	std	Y+19, r24	; 0x13
    2b0e:	3f c0       	rjmp	.+126    	; 0x2b8e <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    2b10:	6d 89       	ldd	r22, Y+21	; 0x15
    2b12:	7e 89       	ldd	r23, Y+22	; 0x16
    2b14:	8f 89       	ldd	r24, Y+23	; 0x17
    2b16:	98 8d       	ldd	r25, Y+24	; 0x18
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	4c f5       	brge	.+82     	; 0x2b7a <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	69 8d       	ldd	r22, Y+25	; 0x19
    2b2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <LCD_DisplayCharacter+0x788>
    2b52:	89 e1       	ldi	r24, 0x19	; 25
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	9a 8b       	std	Y+18, r25	; 0x12
    2b58:	89 8b       	std	Y+17, r24	; 0x11
    2b5a:	89 89       	ldd	r24, Y+17	; 0x11
    2b5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <LCD_DisplayCharacter+0x776>
    2b62:	9a 8b       	std	Y+18, r25	; 0x12
    2b64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9c 8b       	std	Y+20, r25	; 0x14
    2b6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b70:	8b 89       	ldd	r24, Y+19	; 0x13
    2b72:	9c 89       	ldd	r25, Y+20	; 0x14
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	69 f7       	brne	.-38     	; 0x2b52 <LCD_DisplayCharacter+0x76a>
    2b78:	14 c0       	rjmp	.+40     	; 0x2ba2 <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b80:	98 8d       	ldd	r25, Y+24	; 0x18
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9c 8b       	std	Y+20, r25	; 0x14
    2b8c:	8b 8b       	std	Y+19, r24	; 0x13
    2b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b90:	9c 89       	ldd	r25, Y+20	; 0x14
    2b92:	98 8b       	std	Y+16, r25	; 0x10
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
    2b96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b98:	98 89       	ldd	r25, Y+16	; 0x10
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_DisplayCharacter+0x7b2>
    2b9e:	98 8b       	std	Y+16, r25	; 0x10
    2ba0:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	62 e0       	ldi	r22, 0x02	; 2
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e8       	ldi	r26, 0x80	; 128
    2bb2:	bf e3       	ldi	r27, 0x3F	; 63
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	9c 87       	std	Y+12, r25	; 0x0c
    2bb8:	ad 87       	std	Y+13, r26	; 0x0d
    2bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	53 e4       	ldi	r21, 0x43	; 67
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8f 83       	std	Y+7, r24	; 0x07
    2bd6:	98 87       	std	Y+8, r25	; 0x08
    2bd8:	a9 87       	std	Y+9, r26	; 0x09
    2bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <LCD_DisplayCharacter+0x876>
    2c40:	89 e1       	ldi	r24, 0x19	; 25
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_DisplayCharacter+0x864>
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <LCD_DisplayCharacter+0x858>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_DisplayCharacter+0x8a0>
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    2c90:	80 91 d3 00 	lds	r24, 0x00D3
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	80 93 d3 00 	sts	0x00D3, r24
    if(col_global == MAX_NUM_COL_LCD)
    2c9a:	80 91 d3 00 	lds	r24, 0x00D3
    2c9e:	84 31       	cpi	r24, 0x14	; 20
    2ca0:	69 f4       	brne	.+26     	; 0x2cbc <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    2ca2:	80 91 d2 00 	lds	r24, 0x00D2
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	80 93 d2 00 	sts	0x00D2, r24
        col_global = 0 ;
    2cac:	10 92 d3 00 	sts	0x00D3, r1
        if(row_global == MAX_NUM_COL_LCD)
    2cb0:	80 91 d2 00 	lds	r24, 0x00D2
    2cb4:	84 31       	cpi	r24, 0x14	; 20
    2cb6:	11 f4       	brne	.+4      	; 0x2cbc <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    2cb8:	10 92 d2 00 	sts	0x00D2, r1
    }
}
    2cbc:	cc 59       	subi	r28, 0x9C	; 156
    2cbe:	df 4f       	sbci	r29, 0xFF	; 255
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <LCD_DisplayString+0x6>
    2cda:	0f 92       	push	r0
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	9b 83       	std	Y+3, r25	; 0x03
    2ce2:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    2ce4:	19 82       	std	Y+1, r1	; 0x01
    2ce6:	0e c0       	rjmp	.+28     	; 0x2d04 <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	80 81       	ld	r24, Z
    2cfa:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_DisplayCharacter>
        it++;
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e2 0f       	add	r30, r18
    2d12:	f3 1f       	adc	r31, r19
    2d14:	80 81       	ld	r24, Z
    2d16:	88 23       	and	r24, r24
    2d18:	39 f7       	brne	.-50     	; 0x2ce8 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <LCD_MoveCursor+0x6>
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <LCD_MoveCursor+0x8>
    2d2e:	0f 92       	push	r0
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	3d 83       	std	Y+5, r19	; 0x05
    2d40:	2c 83       	std	Y+4, r18	; 0x04
    2d42:	8c 81       	ldd	r24, Y+4	; 0x04
    2d44:	9d 81       	ldd	r25, Y+5	; 0x05
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	91 05       	cpc	r25, r1
    2d4a:	e9 f0       	breq	.+58     	; 0x2d86 <LCD_MoveCursor+0x60>
    2d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d50:	22 30       	cpi	r18, 0x02	; 2
    2d52:	31 05       	cpc	r19, r1
    2d54:	2c f4       	brge	.+10     	; 0x2d60 <LCD_MoveCursor+0x3a>
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	61 f0       	breq	.+24     	; 0x2d76 <LCD_MoveCursor+0x50>
    2d5e:	30 c0       	rjmp	.+96     	; 0x2dc0 <LCD_MoveCursor+0x9a>
    2d60:	2c 81       	ldd	r18, Y+4	; 0x04
    2d62:	3d 81       	ldd	r19, Y+5	; 0x05
    2d64:	22 30       	cpi	r18, 0x02	; 2
    2d66:	31 05       	cpc	r19, r1
    2d68:	c1 f0       	breq	.+48     	; 0x2d9a <LCD_MoveCursor+0x74>
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6e:	83 30       	cpi	r24, 0x03	; 3
    2d70:	91 05       	cpc	r25, r1
    2d72:	e9 f0       	breq	.+58     	; 0x2dae <LCD_MoveCursor+0x88>
    2d74:	25 c0       	rjmp	.+74     	; 0x2dc0 <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	80 93 d3 00 	sts	0x00D3, r24
            row_global = 0 ;
    2d80:	10 92 d2 00 	sts	0x00D2, r1
    2d84:	1d c0       	rjmp	.+58     	; 0x2dc0 <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	80 5c       	subi	r24, 0xC0	; 192
    2d8a:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	80 93 d3 00 	sts	0x00D3, r24
            row_global = 1 ;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	80 93 d2 00 	sts	0x00D2, r24
    2d98:	13 c0       	rjmp	.+38     	; 0x2dc0 <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	8c 5e       	subi	r24, 0xEC	; 236
    2d9e:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	80 93 d3 00 	sts	0x00D3, r24
                row_global = 2 ;
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	80 93 d2 00 	sts	0x00D2, r24
    2dac:	09 c0       	rjmp	.+18     	; 0x2dc0 <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	8c 5a       	subi	r24, 0xAC	; 172
    2db2:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	80 93 d3 00 	sts	0x00D3, r24
                row_global = 3 ;
    2dba:	83 e0       	ldi	r24, 0x03	; 3
    2dbc:	80 93 d2 00 	sts	0x00D2, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	80 68       	ori	r24, 0x80	; 128
    2dc4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <LCD_DisplayStringRowCol+0x6>
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <LCD_DisplayStringRowCol+0x8>
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	6b 83       	std	Y+3, r22	; 0x03
    2dea:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	6c 81       	ldd	r22, Y+4	; 0x04
    2df0:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    2e12:	10 92 d3 00 	sts	0x00D3, r1
    2e16:	10 92 d2 00 	sts	0x00D2, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    2e2e:	80 91 d3 00 	lds	r24, 0x00D3
    2e32:	83 31       	cpi	r24, 0x13	; 19
    2e34:	89 f4       	brne	.+34     	; 0x2e58 <LCD_MoveCursorRight+0x32>
    2e36:	80 91 d2 00 	lds	r24, 0x00D2
    2e3a:	88 23       	and	r24, r24
    2e3c:	69 f4       	brne	.+26     	; 0x2e58 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    2e3e:	10 92 d3 00 	sts	0x00D3, r1
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	80 93 d2 00 	sts	0x00D2, r24
        LCD_MoveCursor(row_global,col_global);
    2e48:	80 91 d2 00 	lds	r24, 0x00D2
    2e4c:	90 91 d3 00 	lds	r25, 0x00D3
    2e50:	69 2f       	mov	r22, r25
    2e52:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2e56:	46 c0       	rjmp	.+140    	; 0x2ee4 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    2e58:	80 91 d3 00 	lds	r24, 0x00D3
    2e5c:	83 31       	cpi	r24, 0x13	; 19
    2e5e:	89 f4       	brne	.+34     	; 0x2e82 <LCD_MoveCursorRight+0x5c>
    2e60:	80 91 d2 00 	lds	r24, 0x00D2
    2e64:	81 30       	cpi	r24, 0x01	; 1
    2e66:	69 f4       	brne	.+26     	; 0x2e82 <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    2e68:	10 92 d3 00 	sts	0x00D3, r1
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	80 93 d2 00 	sts	0x00D2, r24
        LCD_MoveCursor(row_global,col_global);
    2e72:	80 91 d2 00 	lds	r24, 0x00D2
    2e76:	90 91 d3 00 	lds	r25, 0x00D3
    2e7a:	69 2f       	mov	r22, r25
    2e7c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2e80:	31 c0       	rjmp	.+98     	; 0x2ee4 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    2e82:	80 91 d3 00 	lds	r24, 0x00D3
    2e86:	83 31       	cpi	r24, 0x13	; 19
    2e88:	89 f4       	brne	.+34     	; 0x2eac <LCD_MoveCursorRight+0x86>
    2e8a:	80 91 d2 00 	lds	r24, 0x00D2
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	69 f4       	brne	.+26     	; 0x2eac <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    2e92:	10 92 d3 00 	sts	0x00D3, r1
    2e96:	83 e0       	ldi	r24, 0x03	; 3
    2e98:	80 93 d2 00 	sts	0x00D2, r24
        LCD_MoveCursor(row_global,col_global);
    2e9c:	80 91 d2 00 	lds	r24, 0x00D2
    2ea0:	90 91 d3 00 	lds	r25, 0x00D3
    2ea4:	69 2f       	mov	r22, r25
    2ea6:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2eaa:	1c c0       	rjmp	.+56     	; 0x2ee4 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    2eac:	80 91 d3 00 	lds	r24, 0x00D3
    2eb0:	83 31       	cpi	r24, 0x13	; 19
    2eb2:	81 f4       	brne	.+32     	; 0x2ed4 <LCD_MoveCursorRight+0xae>
    2eb4:	80 91 d2 00 	lds	r24, 0x00D2
    2eb8:	83 30       	cpi	r24, 0x03	; 3
    2eba:	61 f4       	brne	.+24     	; 0x2ed4 <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    2ebc:	10 92 d3 00 	sts	0x00D3, r1
    2ec0:	10 92 d2 00 	sts	0x00D2, r1
        LCD_MoveCursor(row_global,col_global);
    2ec4:	80 91 d2 00 	lds	r24, 0x00D2
    2ec8:	90 91 d3 00 	lds	r25, 0x00D3
    2ecc:	69 2f       	mov	r22, r25
    2ece:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2ed2:	08 c0       	rjmp	.+16     	; 0x2ee4 <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    2ed4:	84 e1       	ldi	r24, 0x14	; 20
    2ed6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
        col_global++;
    2eda:	80 91 d3 00 	lds	r24, 0x00D3
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	80 93 d3 00 	sts	0x00D3, r24
    }
}
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	08 95       	ret

00002eea <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    2ef2:	80 91 d3 00 	lds	r24, 0x00D3
    2ef6:	88 23       	and	r24, r24
    2ef8:	91 f4       	brne	.+36     	; 0x2f1e <LCD_MoveCursorLeft+0x34>
    2efa:	80 91 d2 00 	lds	r24, 0x00D2
    2efe:	88 23       	and	r24, r24
    2f00:	71 f4       	brne	.+28     	; 0x2f1e <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    2f02:	83 e1       	ldi	r24, 0x13	; 19
    2f04:	80 93 d3 00 	sts	0x00D3, r24
    2f08:	83 e0       	ldi	r24, 0x03	; 3
    2f0a:	80 93 d2 00 	sts	0x00D2, r24
        LCD_MoveCursor(row_global,col_global);
    2f0e:	80 91 d2 00 	lds	r24, 0x00D2
    2f12:	90 91 d3 00 	lds	r25, 0x00D3
    2f16:	69 2f       	mov	r22, r25
    2f18:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2f1c:	49 c0       	rjmp	.+146    	; 0x2fb0 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    2f1e:	80 91 d3 00 	lds	r24, 0x00D3
    2f22:	88 23       	and	r24, r24
    2f24:	89 f4       	brne	.+34     	; 0x2f48 <LCD_MoveCursorLeft+0x5e>
    2f26:	80 91 d2 00 	lds	r24, 0x00D2
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	69 f4       	brne	.+26     	; 0x2f48 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    2f2e:	83 e1       	ldi	r24, 0x13	; 19
    2f30:	80 93 d3 00 	sts	0x00D3, r24
    2f34:	10 92 d2 00 	sts	0x00D2, r1
        LCD_MoveCursor(row_global,col_global);
    2f38:	80 91 d2 00 	lds	r24, 0x00D2
    2f3c:	90 91 d3 00 	lds	r25, 0x00D3
    2f40:	69 2f       	mov	r22, r25
    2f42:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2f46:	34 c0       	rjmp	.+104    	; 0x2fb0 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    2f48:	80 91 d3 00 	lds	r24, 0x00D3
    2f4c:	88 23       	and	r24, r24
    2f4e:	91 f4       	brne	.+36     	; 0x2f74 <LCD_MoveCursorLeft+0x8a>
    2f50:	80 91 d2 00 	lds	r24, 0x00D2
    2f54:	82 30       	cpi	r24, 0x02	; 2
    2f56:	71 f4       	brne	.+28     	; 0x2f74 <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    2f58:	83 e1       	ldi	r24, 0x13	; 19
    2f5a:	80 93 d3 00 	sts	0x00D3, r24
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	80 93 d2 00 	sts	0x00D2, r24
        LCD_MoveCursor(row_global,col_global);
    2f64:	80 91 d2 00 	lds	r24, 0x00D2
    2f68:	90 91 d3 00 	lds	r25, 0x00D3
    2f6c:	69 2f       	mov	r22, r25
    2f6e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2f72:	1e c0       	rjmp	.+60     	; 0x2fb0 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    2f74:	80 91 d3 00 	lds	r24, 0x00D3
    2f78:	88 23       	and	r24, r24
    2f7a:	91 f4       	brne	.+36     	; 0x2fa0 <LCD_MoveCursorLeft+0xb6>
    2f7c:	80 91 d2 00 	lds	r24, 0x00D2
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	71 f4       	brne	.+28     	; 0x2fa0 <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    2f84:	83 e1       	ldi	r24, 0x13	; 19
    2f86:	80 93 d3 00 	sts	0x00D3, r24
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	80 93 d2 00 	sts	0x00D2, r24
        LCD_MoveCursor(row_global,col_global);
    2f90:	80 91 d2 00 	lds	r24, 0x00D2
    2f94:	90 91 d3 00 	lds	r25, 0x00D3
    2f98:	69 2f       	mov	r22, r25
    2f9a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    2fa0:	80 e1       	ldi	r24, 0x10	; 16
    2fa2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
        col_global--;
    2fa6:	80 91 d3 00 	lds	r24, 0x00D3
    2faa:	81 50       	subi	r24, 0x01	; 1
    2fac:	80 93 d3 00 	sts	0x00D3, r24
    }
    
}
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    2fbe:	8c e1       	ldi	r24, 0x1C	; 28
    2fc0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
}
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    2fd2:	88 e1       	ldi	r24, 0x18	; 24
    2fd4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
}
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <LCD_GenerateCharacterCGRAM+0x6>
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <LCD_GenerateCharacterCGRAM+0x8>
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	9b 83       	std	Y+3, r25	; 0x03
    2fec:	8a 83       	std	Y+2, r24	; 0x02
    2fee:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	08 96       	adiw	r24, 0x08	; 8
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    3008:	19 82       	std	Y+1, r1	; 0x01
    300a:	0e c0       	rjmp	.+28     	; 0x3028 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	fc 01       	movw	r30, r24
    3018:	e2 0f       	add	r30, r18
    301a:	f3 1f       	adc	r31, r19
    301c:	80 81       	ld	r24, Z
    301e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	8f 5f       	subi	r24, 0xFF	; 255
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	88 30       	cpi	r24, 0x08	; 8
    302c:	78 f3       	brcs	.-34     	; 0x300c <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_DisplayCharacter>
}
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <LCD_DisplayCustomCharacterRowCol+0x6>
    305c:	0f 92       	push	r0
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	6a 83       	std	Y+2, r22	; 0x02
    3066:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	6b 81       	ldd	r22, Y+3	; 0x03
    306c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_DisplayCharacter>
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	65 97       	sbiw	r28, 0x15	; 21
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	6a 8b       	std	Y+18, r22	; 0x12
    3098:	7b 8b       	std	Y+19, r23	; 0x13
    309a:	8c 8b       	std	Y+20, r24	; 0x14
    309c:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    309e:	8a 89       	ldd	r24, Y+18	; 0x12
    30a0:	9b 89       	ldd	r25, Y+19	; 0x13
    30a2:	9e 01       	movw	r18, r28
    30a4:	2f 5f       	subi	r18, 0xFF	; 255
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	b9 01       	movw	r22, r18
    30aa:	4a e0       	ldi	r20, 0x0A	; 10
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>
}
    30ba:	65 96       	adiw	r28, 0x15	; 21
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	cf 91       	pop	r28
    30c8:	df 91       	pop	r29
    30ca:	08 95       	ret

000030cc <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(BUZZER_PORT,BUZZER_PIN, OUTPUT_PIN);
    30d4:	82 e0       	ldi	r24, 0x02	; 2
    30d6:	66 e0       	ldi	r22, 0x06	; 6
    30d8:	42 e0       	ldi	r20, 0x02	; 2
    30da:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
}
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62

	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	66 e0       	ldi	r22, 0x06	; 6
    30f0:	41 e0       	ldi	r20, 0x01	; 1
    30f2:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3104:	82 e0       	ldi	r24, 0x02	; 2
    3106:	66 e0       	ldi	r22, 0x06	; 6
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
}
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
	GPIO_TogglePin(BUZZER_PORT,BUZZER_PIN);
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	66 e0       	ldi	r22, 0x06	; 6
    3120:	0e 94 8c 09 	call	0x1318	; 0x1318 <GPIO_TogglePin>
}
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	2e 97       	sbiw	r28, 0x0e	; 14
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	66 e0       	ldi	r22, 0x06	; 6
    3142:	41 e0       	ldi	r20, 0x01	; 1
    3144:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	aa ef       	ldi	r26, 0xFA	; 250
    314e:	b3 e4       	ldi	r27, 0x43	; 67
    3150:	8b 87       	std	Y+11, r24	; 0x0b
    3152:	9c 87       	std	Y+12, r25	; 0x0c
    3154:	ad 87       	std	Y+13, r26	; 0x0d
    3156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3158:	6b 85       	ldd	r22, Y+11	; 0x0b
    315a:	7c 85       	ldd	r23, Y+12	; 0x0c
    315c:	8d 85       	ldd	r24, Y+13	; 0x0d
    315e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	4a e7       	ldi	r20, 0x7A	; 122
    3166:	53 e4       	ldi	r21, 0x43	; 67
    3168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	8f 83       	std	Y+7, r24	; 0x07
    3172:	98 87       	std	Y+8, r25	; 0x08
    3174:	a9 87       	std	Y+9, r26	; 0x09
    3176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3178:	6f 81       	ldd	r22, Y+7	; 0x07
    317a:	78 85       	ldd	r23, Y+8	; 0x08
    317c:	89 85       	ldd	r24, Y+9	; 0x09
    317e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e8       	ldi	r20, 0x80	; 128
    3186:	5f e3       	ldi	r21, 0x3F	; 63
    3188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    318c:	88 23       	and	r24, r24
    318e:	2c f4       	brge	.+10     	; 0x319a <H_Buzzer_Void_BuzzerOnce+0x70>
		__ticks = 1;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	9e 83       	std	Y+6, r25	; 0x06
    3196:	8d 83       	std	Y+5, r24	; 0x05
    3198:	3f c0       	rjmp	.+126    	; 0x3218 <H_Buzzer_Void_BuzzerOnce+0xee>
	else if (__tmp > 65535)
    319a:	6f 81       	ldd	r22, Y+7	; 0x07
    319c:	78 85       	ldd	r23, Y+8	; 0x08
    319e:	89 85       	ldd	r24, Y+9	; 0x09
    31a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	3f ef       	ldi	r19, 0xFF	; 255
    31a6:	4f e7       	ldi	r20, 0x7F	; 127
    31a8:	57 e4       	ldi	r21, 0x47	; 71
    31aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ae:	18 16       	cp	r1, r24
    31b0:	4c f5       	brge	.+82     	; 0x3204 <H_Buzzer_Void_BuzzerOnce+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e2       	ldi	r20, 0x20	; 32
    31c0:	51 e4       	ldi	r21, 0x41	; 65
    31c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	bc 01       	movw	r22, r24
    31cc:	cd 01       	movw	r24, r26
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
    31da:	0f c0       	rjmp	.+30     	; 0x31fa <H_Buzzer_Void_BuzzerOnce+0xd0>
    31dc:	89 e1       	ldi	r24, 0x19	; 25
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	9c 83       	std	Y+4, r25	; 0x04
    31e2:	8b 83       	std	Y+3, r24	; 0x03
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <H_Buzzer_Void_BuzzerOnce+0xbe>
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f0:	8d 81       	ldd	r24, Y+5	; 0x05
    31f2:	9e 81       	ldd	r25, Y+6	; 0x06
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	9e 83       	std	Y+6, r25	; 0x06
    31f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fa:	8d 81       	ldd	r24, Y+5	; 0x05
    31fc:	9e 81       	ldd	r25, Y+6	; 0x06
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	69 f7       	brne	.-38     	; 0x31dc <H_Buzzer_Void_BuzzerOnce+0xb2>
    3202:	14 c0       	rjmp	.+40     	; 0x322c <H_Buzzer_Void_BuzzerOnce+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3204:	6f 81       	ldd	r22, Y+7	; 0x07
    3206:	78 85       	ldd	r23, Y+8	; 0x08
    3208:	89 85       	ldd	r24, Y+9	; 0x09
    320a:	9a 85       	ldd	r25, Y+10	; 0x0a
    320c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	8d 81       	ldd	r24, Y+5	; 0x05
    321a:	9e 81       	ldd	r25, Y+6	; 0x06
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <H_Buzzer_Void_BuzzerOnce+0xfa>
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	66 e0       	ldi	r22, 0x06	; 6
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>



}
    3236:	2e 96       	adiw	r28, 0x0e	; 14
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	aa 97       	sbiw	r28, 0x2a	; 42
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	66 e0       	ldi	r22, 0x06	; 6
    3260:	41 e0       	ldi	r20, 0x01	; 1
    3262:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	aa ef       	ldi	r26, 0xFA	; 250
    326c:	b3 e4       	ldi	r27, 0x43	; 67
    326e:	8f a3       	std	Y+39, r24	; 0x27
    3270:	98 a7       	std	Y+40, r25	; 0x28
    3272:	a9 a7       	std	Y+41, r26	; 0x29
    3274:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3276:	6f a1       	ldd	r22, Y+39	; 0x27
    3278:	78 a5       	ldd	r23, Y+40	; 0x28
    327a:	89 a5       	ldd	r24, Y+41	; 0x29
    327c:	9a a5       	ldd	r25, Y+42	; 0x2a
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a e7       	ldi	r20, 0x7A	; 122
    3284:	53 e4       	ldi	r21, 0x43	; 67
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	8b a3       	std	Y+35, r24	; 0x23
    3290:	9c a3       	std	Y+36, r25	; 0x24
    3292:	ad a3       	std	Y+37, r26	; 0x25
    3294:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3296:	6b a1       	ldd	r22, Y+35	; 0x23
    3298:	7c a1       	ldd	r23, Y+36	; 0x24
    329a:	8d a1       	ldd	r24, Y+37	; 0x25
    329c:	9e a1       	ldd	r25, Y+38	; 0x26
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	2c f4       	brge	.+10     	; 0x32b8 <H_Buzzer_Void_BuzzerTwice+0x70>
		__ticks = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
    32b6:	3f c0       	rjmp	.+126    	; 0x3336 <H_Buzzer_Void_BuzzerTwice+0xee>
	else if (__tmp > 65535)
    32b8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ba:	7c a1       	ldd	r23, Y+36	; 0x24
    32bc:	8d a1       	ldd	r24, Y+37	; 0x25
    32be:	9e a1       	ldd	r25, Y+38	; 0x26
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	57 e4       	ldi	r21, 0x47	; 71
    32c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	4c f5       	brge	.+82     	; 0x3322 <H_Buzzer_Void_BuzzerTwice+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d0:	6f a1       	ldd	r22, Y+39	; 0x27
    32d2:	78 a5       	ldd	r23, Y+40	; 0x28
    32d4:	89 a5       	ldd	r24, Y+41	; 0x29
    32d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	51 e4       	ldi	r21, 0x41	; 65
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9a a3       	std	Y+34, r25	; 0x22
    32f6:	89 a3       	std	Y+33, r24	; 0x21
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <H_Buzzer_Void_BuzzerTwice+0xd0>
    32fa:	89 e1       	ldi	r24, 0x19	; 25
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	98 a3       	std	Y+32, r25	; 0x20
    3300:	8f 8f       	std	Y+31, r24	; 0x1f
    3302:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3304:	98 a1       	ldd	r25, Y+32	; 0x20
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <H_Buzzer_Void_BuzzerTwice+0xbe>
    330a:	98 a3       	std	Y+32, r25	; 0x20
    330c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	89 a1       	ldd	r24, Y+33	; 0x21
    3310:	9a a1       	ldd	r25, Y+34	; 0x22
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	9a a3       	std	Y+34, r25	; 0x22
    3316:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	89 a1       	ldd	r24, Y+33	; 0x21
    331a:	9a a1       	ldd	r25, Y+34	; 0x22
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	69 f7       	brne	.-38     	; 0x32fa <H_Buzzer_Void_BuzzerTwice+0xb2>
    3320:	14 c0       	rjmp	.+40     	; 0x334a <H_Buzzer_Void_BuzzerTwice+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3322:	6b a1       	ldd	r22, Y+35	; 0x23
    3324:	7c a1       	ldd	r23, Y+36	; 0x24
    3326:	8d a1       	ldd	r24, Y+37	; 0x25
    3328:	9e a1       	ldd	r25, Y+38	; 0x26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9a a3       	std	Y+34, r25	; 0x22
    3334:	89 a3       	std	Y+33, r24	; 0x21
    3336:	89 a1       	ldd	r24, Y+33	; 0x21
    3338:	9a a1       	ldd	r25, Y+34	; 0x22
    333a:	9e 8f       	std	Y+30, r25	; 0x1e
    333c:	8d 8f       	std	Y+29, r24	; 0x1d
    333e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3340:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <H_Buzzer_Void_BuzzerTwice+0xfa>
    3346:	9e 8f       	std	Y+30, r25	; 0x1e
    3348:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	66 e0       	ldi	r22, 0x06	; 6
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	a0 e7       	ldi	r26, 0x70	; 112
    335a:	b2 e4       	ldi	r27, 0x42	; 66
    335c:	89 8f       	std	Y+25, r24	; 0x19
    335e:	9a 8f       	std	Y+26, r25	; 0x1a
    3360:	ab 8f       	std	Y+27, r26	; 0x1b
    3362:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3364:	69 8d       	ldd	r22, Y+25	; 0x19
    3366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	4a e7       	ldi	r20, 0x7A	; 122
    3372:	53 e4       	ldi	r21, 0x43	; 67
    3374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	8d 8b       	std	Y+21, r24	; 0x15
    337e:	9e 8b       	std	Y+22, r25	; 0x16
    3380:	af 8b       	std	Y+23, r26	; 0x17
    3382:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3384:	6d 89       	ldd	r22, Y+21	; 0x15
    3386:	7e 89       	ldd	r23, Y+22	; 0x16
    3388:	8f 89       	ldd	r24, Y+23	; 0x17
    338a:	98 8d       	ldd	r25, Y+24	; 0x18
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e8       	ldi	r20, 0x80	; 128
    3392:	5f e3       	ldi	r21, 0x3F	; 63
    3394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3398:	88 23       	and	r24, r24
    339a:	2c f4       	brge	.+10     	; 0x33a6 <H_Buzzer_Void_BuzzerTwice+0x15e>
		__ticks = 1;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9c 8b       	std	Y+20, r25	; 0x14
    33a2:	8b 8b       	std	Y+19, r24	; 0x13
    33a4:	3f c0       	rjmp	.+126    	; 0x3424 <H_Buzzer_Void_BuzzerTwice+0x1dc>
	else if (__tmp > 65535)
    33a6:	6d 89       	ldd	r22, Y+21	; 0x15
    33a8:	7e 89       	ldd	r23, Y+22	; 0x16
    33aa:	8f 89       	ldd	r24, Y+23	; 0x17
    33ac:	98 8d       	ldd	r25, Y+24	; 0x18
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	3f ef       	ldi	r19, 0xFF	; 255
    33b2:	4f e7       	ldi	r20, 0x7F	; 127
    33b4:	57 e4       	ldi	r21, 0x47	; 71
    33b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ba:	18 16       	cp	r1, r24
    33bc:	4c f5       	brge	.+82     	; 0x3410 <H_Buzzer_Void_BuzzerTwice+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33be:	69 8d       	ldd	r22, Y+25	; 0x19
    33c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e2       	ldi	r20, 0x20	; 32
    33cc:	51 e4       	ldi	r21, 0x41	; 65
    33ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	9c 8b       	std	Y+20, r25	; 0x14
    33e4:	8b 8b       	std	Y+19, r24	; 0x13
    33e6:	0f c0       	rjmp	.+30     	; 0x3406 <H_Buzzer_Void_BuzzerTwice+0x1be>
    33e8:	89 e1       	ldi	r24, 0x19	; 25
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9a 8b       	std	Y+18, r25	; 0x12
    33ee:	89 8b       	std	Y+17, r24	; 0x11
    33f0:	89 89       	ldd	r24, Y+17	; 0x11
    33f2:	9a 89       	ldd	r25, Y+18	; 0x12
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <H_Buzzer_Void_BuzzerTwice+0x1ac>
    33f8:	9a 8b       	std	Y+18, r25	; 0x12
    33fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fc:	8b 89       	ldd	r24, Y+19	; 0x13
    33fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	9c 8b       	std	Y+20, r25	; 0x14
    3404:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3406:	8b 89       	ldd	r24, Y+19	; 0x13
    3408:	9c 89       	ldd	r25, Y+20	; 0x14
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	69 f7       	brne	.-38     	; 0x33e8 <H_Buzzer_Void_BuzzerTwice+0x1a0>
    340e:	14 c0       	rjmp	.+40     	; 0x3438 <H_Buzzer_Void_BuzzerTwice+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3410:	6d 89       	ldd	r22, Y+21	; 0x15
    3412:	7e 89       	ldd	r23, Y+22	; 0x16
    3414:	8f 89       	ldd	r24, Y+23	; 0x17
    3416:	98 8d       	ldd	r25, Y+24	; 0x18
    3418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	9c 8b       	std	Y+20, r25	; 0x14
    3422:	8b 8b       	std	Y+19, r24	; 0x13
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	98 8b       	std	Y+16, r25	; 0x10
    342a:	8f 87       	std	Y+15, r24	; 0x0f
    342c:	8f 85       	ldd	r24, Y+15	; 0x0f
    342e:	98 89       	ldd	r25, Y+16	; 0x10
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <H_Buzzer_Void_BuzzerTwice+0x1e8>
    3434:	98 8b       	std	Y+16, r25	; 0x10
    3436:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	66 e0       	ldi	r22, 0x06	; 6
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	aa ef       	ldi	r26, 0xFA	; 250
    3448:	b3 e4       	ldi	r27, 0x43	; 67
    344a:	8b 87       	std	Y+11, r24	; 0x0b
    344c:	9c 87       	std	Y+12, r25	; 0x0c
    344e:	ad 87       	std	Y+13, r26	; 0x0d
    3450:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3452:	6b 85       	ldd	r22, Y+11	; 0x0b
    3454:	7c 85       	ldd	r23, Y+12	; 0x0c
    3456:	8d 85       	ldd	r24, Y+13	; 0x0d
    3458:	9e 85       	ldd	r25, Y+14	; 0x0e
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	4a e7       	ldi	r20, 0x7A	; 122
    3460:	53 e4       	ldi	r21, 0x43	; 67
    3462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	8f 83       	std	Y+7, r24	; 0x07
    346c:	98 87       	std	Y+8, r25	; 0x08
    346e:	a9 87       	std	Y+9, r26	; 0x09
    3470:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3472:	6f 81       	ldd	r22, Y+7	; 0x07
    3474:	78 85       	ldd	r23, Y+8	; 0x08
    3476:	89 85       	ldd	r24, Y+9	; 0x09
    3478:	9a 85       	ldd	r25, Y+10	; 0x0a
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e8       	ldi	r20, 0x80	; 128
    3480:	5f e3       	ldi	r21, 0x3F	; 63
    3482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3486:	88 23       	and	r24, r24
    3488:	2c f4       	brge	.+10     	; 0x3494 <H_Buzzer_Void_BuzzerTwice+0x24c>
		__ticks = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	3f c0       	rjmp	.+126    	; 0x3512 <H_Buzzer_Void_BuzzerTwice+0x2ca>
	else if (__tmp > 65535)
    3494:	6f 81       	ldd	r22, Y+7	; 0x07
    3496:	78 85       	ldd	r23, Y+8	; 0x08
    3498:	89 85       	ldd	r24, Y+9	; 0x09
    349a:	9a 85       	ldd	r25, Y+10	; 0x0a
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	3f ef       	ldi	r19, 0xFF	; 255
    34a0:	4f e7       	ldi	r20, 0x7F	; 127
    34a2:	57 e4       	ldi	r21, 0x47	; 71
    34a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a8:	18 16       	cp	r1, r24
    34aa:	4c f5       	brge	.+82     	; 0x34fe <H_Buzzer_Void_BuzzerTwice+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    34b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e2       	ldi	r20, 0x20	; 32
    34ba:	51 e4       	ldi	r21, 0x41	; 65
    34bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	0f c0       	rjmp	.+30     	; 0x34f4 <H_Buzzer_Void_BuzzerTwice+0x2ac>
    34d6:	89 e1       	ldi	r24, 0x19	; 25
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9c 83       	std	Y+4, r25	; 0x04
    34dc:	8b 83       	std	Y+3, r24	; 0x03
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	9c 81       	ldd	r25, Y+4	; 0x04
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <H_Buzzer_Void_BuzzerTwice+0x29a>
    34e6:	9c 83       	std	Y+4, r25	; 0x04
    34e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	9e 83       	std	Y+6, r25	; 0x06
    34f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	69 f7       	brne	.-38     	; 0x34d6 <H_Buzzer_Void_BuzzerTwice+0x28e>
    34fc:	14 c0       	rjmp	.+40     	; 0x3526 <H_Buzzer_Void_BuzzerTwice+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3500:	78 85       	ldd	r23, Y+8	; 0x08
    3502:	89 85       	ldd	r24, Y+9	; 0x09
    3504:	9a 85       	ldd	r25, Y+10	; 0x0a
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	9a 81       	ldd	r25, Y+2	; 0x02
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	f1 f7       	brne	.-4      	; 0x351e <H_Buzzer_Void_BuzzerTwice+0x2d6>
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	66 e0       	ldi	r22, 0x06	; 6
    352a:	40 e0       	ldi	r20, 0x00	; 0
    352c:	0e 94 92 08 	call	0x1124	; 0x1124 <GPIO_WritePin>
}
    3530:	aa 96       	adiw	r28, 0x2a	; 42
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	00 d0       	rcall	.+0      	; 0x3548 <BUTTON_Init+0x6>
    3548:	0f 92       	push	r0
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	6a 83       	std	Y+2, r22	; 0x02
    3552:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	6a 81       	ldd	r22, Y+2	; 0x02
    3558:	4b 81       	ldd	r20, Y+3	; 0x03
    355a:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	00 d0       	rcall	.+0      	; 0x3570 <BUTTON_GetValue+0x6>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	6a 81       	ldd	r22, Y+2	; 0x02
    357c:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	08 95       	ret

0000358a <init>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR INITIALIZE FUNCITON,
 * THIS FUNCTION INITIALIZED WHAT NEEDED TO BE INITIALIZED THROUGHOUT THE WHOLE SYSTEM .	  */
/*--------------------------------------------------------------------------------------------*/

void init(void){
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(RED_LED_PORT,RED_LED_PIN,OUTPUT_PIN);
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	67 e0       	ldi	r22, 0x07	; 7
    3596:	42 e0       	ldi	r20, 0x02	; 2
    3598:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(GRN_LED_PORT,GRN_LED_PIN,OUTPUT_PIN);
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	64 e0       	ldi	r22, 0x04	; 4
    35a0:	42 e0       	ldi	r20, 0x02	; 2
    35a2:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(BLU_LED_PORT,BLU_LED_PIN,OUTPUT_PIN);
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	65 e0       	ldi	r22, 0x05	; 5
    35aa:	42 e0       	ldi	r20, 0x02	; 2
    35ac:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(YLW_LED_PORT,YLW_LED_PIN,OUTPUT_PIN);
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	66 e0       	ldi	r22, 0x06	; 6
    35b4:	42 e0       	ldi	r20, 0x02	; 2
    35b6:	0e 94 09 06 	call	0xc12	; 0xc12 <GPIO_SetPinDirection>

	BUTTON_Init(ACL_BTN_PORT,ACL_BTN_PIN, INPUT_PIN);
    35ba:	83 e0       	ldi	r24, 0x03	; 3
    35bc:	67 e0       	ldi	r22, 0x07	; 7
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	0e 94 a1 1a 	call	0x3542	; 0x3542 <BUTTON_Init>
	BUTTON_Init(GBX_BTN_PORT,GBX_BTN_PIN, INPUT_PIN);
    35c4:	83 e0       	ldi	r24, 0x03	; 3
    35c6:	63 e0       	ldi	r22, 0x03	; 3
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	0e 94 a1 1a 	call	0x3542	; 0x3542 <BUTTON_Init>
	BUTTON_Init(ACCS_BTN_PORT,ACCS_BTN_PIN, INPUT_PIN);
    35ce:	83 e0       	ldi	r24, 0x03	; 3
    35d0:	65 e0       	ldi	r22, 0x05	; 5
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	0e 94 a1 1a 	call	0x3542	; 0x3542 <BUTTON_Init>
	BUTTON_Init(BRK_BTN_PORT,BRK_BTN_PIN, INPUT_PIN);
    35d8:	83 e0       	ldi	r24, 0x03	; 3
    35da:	66 e0       	ldi	r22, 0x06	; 6
    35dc:	40 e0       	ldi	r20, 0x00	; 0
    35de:	0e 94 a1 1a 	call	0x3542	; 0x3542 <BUTTON_Init>

	LCD_init();
    35e2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LCD_init>


}
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <A_APPLICATION_VOID_ACCELERATE>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR ACCELERATE .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_ACCELERATE(uint8 STATE){
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	0f 92       	push	r0
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	89 83       	std	Y+1, r24	; 0x01
	LED_OnOffPositiveLogic(BLU_LED_PORT,BLU_LED_PIN,STATE);
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	65 e0       	ldi	r22, 0x05	; 5
    35fc:	49 81       	ldd	r20, Y+1	; 0x01
    35fe:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_OnOffPositiveLogic>
	A_APPLICATION_VOID_BUZZER_BEEP_ACL(ACL_BTN_PORT,ACL_BTN_PIN);
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	67 e0       	ldi	r22, 0x07	; 7
    3606:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <A_APPLICATION_VOID_BUZZER_BEEP_ACL>

}
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <A_APPLICATION_VOID_BRAKE>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR BRAKE .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_BRAKE(uint8 STATE){
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	0f 92       	push	r0
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	89 83       	std	Y+1, r24	; 0x01
	LED_OnOffPositiveLogic(RED_LED_PORT,RED_LED_PIN,STATE);
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	67 e0       	ldi	r22, 0x07	; 7
    3622:	49 81       	ldd	r20, Y+1	; 0x01
    3624:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <LED_OnOffPositiveLogic>
	A_APPLICATION_VOID_BUZZER_BEEP_BRK(BRK_BTN_PORT,BRK_BTN_PIN);
    3628:	83 e0       	ldi	r24, 0x03	; 3
    362a:	66 e0       	ldi	r22, 0x06	; 6
    362c:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <A_APPLICATION_VOID_BUZZER_BEEP_BRK>
}
    3630:	0f 90       	pop	r0
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <A_APPLICATION_VOID_ACCS>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR ACCELERATE .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_ACCS(void){
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
	A_APPLICATION_VOID_ACCS_TGL(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3640:	83 e0       	ldi	r24, 0x03	; 3
    3642:	65 e0       	ldi	r22, 0x05	; 5
    3644:	0e 94 6f 1b 	call	0x36de	; 0x36de <A_APPLICATION_VOID_ACCS_TGL>

}
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <A_APPLICATION_UINT8_BTN_CHECK>:
 * THIS FUNCTION CHECKS WHETER A PUSH BUTTON IS PRESSED OR NO, HAS 2 ARGUMENTS, BTN PORT AND BTN PIN .
 * RETURNS 1 IF PRESSED, 0 WHEN RELEASED		  */
/*--------------------------------------------------------------------------------------------*/


uint8 A_APPLICATION_UINT8_BTN_CHECK(uint8 BTN_PORT, uint8 BTN_PIN){
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <A_APPLICATION_UINT8_BTN_CHECK+0x6>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <A_APPLICATION_UINT8_BTN_CHECK+0x8>
    3656:	0f 92       	push	r0
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	8a 83       	std	Y+2, r24	; 0x02
    365e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 TEMP = 0;
    3660:	19 82       	std	Y+1, r1	; 0x01
	TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3662:	8a 81       	ldd	r24, Y+2	; 0x02
    3664:	6b 81       	ldd	r22, Y+3	; 0x03
    3666:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    366a:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	88 23       	and	r24, r24
    3670:	59 f4       	brne	.+22     	; 0x3688 <A_APPLICATION_UINT8_BTN_CHECK+0x3a>

		if (BTN_STATE == BTN_Pressed_State) {
    3672:	80 91 d4 00 	lds	r24, 0x00D4
    3676:	88 23       	and	r24, r24
    3678:	31 f4       	brne	.+12     	; 0x3686 <A_APPLICATION_UINT8_BTN_CHECK+0x38>
			//do true here
			BTN_STATE = BTN_Released_State;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	80 93 d4 00 	sts	0x00D4, r24

			return 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	8c 83       	std	Y+4, r24	; 0x04
    3684:	04 c0       	rjmp	.+8      	; 0x368e <A_APPLICATION_UINT8_BTN_CHECK+0x40>
    3686:	05 c0       	rjmp	.+10     	; 0x3692 <A_APPLICATION_UINT8_BTN_CHECK+0x44>
		}
	}
	else{
		//do false here
		BTN_STATE = BTN_Pressed_State;
    3688:	10 92 d4 00 	sts	0x00D4, r1

		return 0;
    368c:	1c 82       	std	Y+4, r1	; 0x04
    368e:	8c 81       	ldd	r24, Y+4	; 0x04
    3690:	8d 83       	std	Y+5, r24	; 0x05
	}
}
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <A_APPLICATION_VOID_BTN_TGL_ACTION>:
/*   						FUNCTION BODY FOR BUTTON TOGGLE ACTION,
 * THIS FUNCTION TAKES ACTION OF A TOGGLE WHEN A PUSH BUTTON IS PRESSED, ACCEPTS THE BUTTON PORT AND PIN .		  */
/*--------------------------------------------------------------------------------------------*/


void A_APPLICATION_VOID_BTN_TGL_ACTION(uint8 BTN_PORT, uint8 BTN_PIN){
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <A_APPLICATION_VOID_BTN_TGL_ACTION+0x6>
    36aa:	00 d0       	rcall	.+0      	; 0x36ac <A_APPLICATION_VOID_BTN_TGL_ACTION+0x8>
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	6a 83       	std	Y+2, r22	; 0x02
	uint8  static BTN_LAST_STATE = 0;
	uint8  static BTN_STATE = 0;
	BTN_STATE = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	6a 81       	ldd	r22, Y+2	; 0x02
    36b8:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    36bc:	80 93 d5 00 	sts	0x00D5, r24
	if (BTN_STATE != BTN_LAST_STATE) {
    36c0:	80 91 d5 00 	lds	r24, 0x00D5
    36c4:	80 91 d6 00 	lds	r24, 0x00D6
			//do true here



		}
	}BTN_LAST_STATE = BTN_STATE;
    36c8:	80 91 d5 00 	lds	r24, 0x00D5
    36cc:	80 93 d6 00 	sts	0x00D6, r24

}
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <A_APPLICATION_VOID_ACCS_TGL>:
/*   						FUNCTION BODY FOR ACCS TOGGLE ONLY + ITS LED,
 * THIS FUNCTION TOGGLES LED OF ACCS AND ITS BUZZER .		  */
/*--------------------------------------------------------------------------------------------*/


void A_APPLICATION_VOID_ACCS_TGL(uint8 BTN_PORT, uint8 BTN_PIN){
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <A_APPLICATION_VOID_ACCS_TGL+0x6>
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	6a 83       	std	Y+2, r22	; 0x02
	uint8 static BTN_LAST_STATE = 0;
	uint8 static BTN_STATE = 0;
	BTN_STATE = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	6a 81       	ldd	r22, Y+2	; 0x02
    36f0:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    36f4:	80 93 d7 00 	sts	0x00D7, r24
	if (BTN_STATE != BTN_LAST_STATE) {
    36f8:	90 91 d7 00 	lds	r25, 0x00D7
    36fc:	80 91 d8 00 	lds	r24, 0x00D8
    3700:	98 17       	cp	r25, r24
    3702:	89 f0       	breq	.+34     	; 0x3726 <A_APPLICATION_VOID_ACCS_TGL+0x48>

		if (BTN_STATE == BTN_Pressed_State) {
    3704:	80 91 d7 00 	lds	r24, 0x00D7
    3708:	88 23       	and	r24, r24
    370a:	49 f4       	brne	.+18     	; 0x371e <A_APPLICATION_VOID_ACCS_TGL+0x40>
			//do true here
			LED_Toggle(GRN_LED_PORT,GRN_LED_PIN);
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	64 e0       	ldi	r22, 0x04	; 4
    3710:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_Toggle>
			A_APPLICATION_VOID_BUZZER_BEEP_ACCS(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3714:	83 e0       	ldi	r24, 0x03	; 3
    3716:	65 e0       	ldi	r22, 0x05	; 5
    3718:	0e 94 16 1c 	call	0x382c	; 0x382c <A_APPLICATION_VOID_BUZZER_BEEP_ACCS>
    371c:	04 c0       	rjmp	.+8      	; 0x3726 <A_APPLICATION_VOID_ACCS_TGL+0x48>

		}
		else
		{
			A_APPLICATION_VOID_BUZZER_BEEP_ACCS(ACCS_BTN_PORT,ACCS_BTN_PIN);
    371e:	83 e0       	ldi	r24, 0x03	; 3
    3720:	65 e0       	ldi	r22, 0x05	; 5
    3722:	0e 94 16 1c 	call	0x382c	; 0x382c <A_APPLICATION_VOID_BUZZER_BEEP_ACCS>

		}
	}BTN_LAST_STATE = BTN_STATE;
    3726:	80 91 d7 00 	lds	r24, 0x00D7
    372a:	80 93 d8 00 	sts	0x00D8, r24

}
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <A_APPLICATION_VOID_BTN_ACTION>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR BUTTON ACTIONS,
 * THIS FUNCTION CHECKS ALL 4 PUSH BUTTONS AND THEN PERFORMS THEIR ACTIONS .							  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_BTN_ACTION(void){
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
	//check for acceleration press
	if (A_APPLICATION_UINT8_BTN_CHECK(ACL_BTN_PORT,ACL_BTN_PIN)) {
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	67 e0       	ldi	r22, 0x07	; 7
    3744:	0e 94 27 1b 	call	0x364e	; 0x364e <A_APPLICATION_UINT8_BTN_CHECK>
    3748:	88 23       	and	r24, r24
    374a:	21 f0       	breq	.+8      	; 0x3754 <A_APPLICATION_VOID_BTN_ACTION+0x1c>
		A_APPLICATION_VOID_ACCELERATE(ON);
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <A_APPLICATION_VOID_ACCELERATE>
    3752:	03 c0       	rjmp	.+6      	; 0x375a <A_APPLICATION_VOID_BTN_ACTION+0x22>


	} else {
		A_APPLICATION_VOID_ACCELERATE(OFF);
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <A_APPLICATION_VOID_ACCELERATE>
	}
	//check for brake press
	if (A_APPLICATION_UINT8_BTN_CHECK(BRK_BTN_PORT,BRK_BTN_PIN)) {
    375a:	83 e0       	ldi	r24, 0x03	; 3
    375c:	66 e0       	ldi	r22, 0x06	; 6
    375e:	0e 94 27 1b 	call	0x364e	; 0x364e <A_APPLICATION_UINT8_BTN_CHECK>
    3762:	88 23       	and	r24, r24
    3764:	21 f0       	breq	.+8      	; 0x376e <A_APPLICATION_VOID_BTN_ACTION+0x36>
		A_APPLICATION_VOID_BRAKE(ON);
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 09 1b 	call	0x3612	; 0x3612 <A_APPLICATION_VOID_BRAKE>
    376c:	03 c0       	rjmp	.+6      	; 0x3774 <A_APPLICATION_VOID_BTN_ACTION+0x3c>

	} else {
		A_APPLICATION_VOID_BRAKE(OFF);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	0e 94 09 1b 	call	0x3612	; 0x3612 <A_APPLICATION_VOID_BRAKE>
	}
	//check for accs press
	if (A_APPLICATION_UINT8_BTN_CHECK(ACCS_BTN_PORT,ACCS_BTN_PIN)) {
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	65 e0       	ldi	r22, 0x05	; 5
    3778:	0e 94 27 1b 	call	0x364e	; 0x364e <A_APPLICATION_UINT8_BTN_CHECK>
    377c:	88 23       	and	r24, r24
    377e:	39 f0       	breq	.+14     	; 0x378e <A_APPLICATION_VOID_BTN_ACTION+0x56>
		A_APPLICATION_VOID_ACCS_TGL(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3780:	83 e0       	ldi	r24, 0x03	; 3
    3782:	65 e0       	ldi	r22, 0x05	; 5
    3784:	0e 94 6f 1b 	call	0x36de	; 0x36de <A_APPLICATION_VOID_ACCS_TGL>
		A_APPLICATION_VOID_ACCS_LCD();
    3788:	0e 94 40 1c 	call	0x3880	; 0x3880 <A_APPLICATION_VOID_ACCS_LCD>
    378c:	04 c0       	rjmp	.+8      	; 0x3796 <A_APPLICATION_VOID_BTN_ACTION+0x5e>

	}else {
		A_APPLICATION_VOID_ACCS_TGL(ACCS_BTN_PORT,ACCS_BTN_PIN);
    378e:	83 e0       	ldi	r24, 0x03	; 3
    3790:	65 e0       	ldi	r22, 0x05	; 5
    3792:	0e 94 6f 1b 	call	0x36de	; 0x36de <A_APPLICATION_VOID_ACCS_TGL>
	}
	//check for gear press
	if (A_APPLICATION_UINT8_BTN_CHECK(GBX_BTN_PORT,GBX_BTN_PIN)) {
    3796:	83 e0       	ldi	r24, 0x03	; 3
    3798:	63 e0       	ldi	r22, 0x03	; 3
    379a:	0e 94 27 1b 	call	0x364e	; 0x364e <A_APPLICATION_UINT8_BTN_CHECK>
		void A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE();
	}else {
//
		}
}
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <A_APPLICATION_VOID_BUZZER_BEEP_ACL>:
/*   						FUNCTION BODY FOR BUZZER BEEP,
 * THIS FUNCTION MAKES THE BUZZER BEEPS ONE FOR EVERY PUSH BUTTON PRESS.
 * THIS FUNCTION ACCEPTS TWO ARGUMENT, THE PORT OF THE BUTTON AND THE PIN OF THE BUTTON */
/*--------------------------------------------------------------------------------------------*/
void A_APPLICATION_VOID_BUZZER_BEEP_ACL(uint8 BTN_PORT, uint8 BTN_PIN)
	{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x6>
    37aa:	0f 92       	push	r0
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	8a 83       	std	Y+2, r24	; 0x02
    37b2:	6b 83       	std	Y+3, r22	; 0x03
		uint8 TEMP;
		TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    37b4:	8a 81       	ldd	r24, Y+2	; 0x02
    37b6:	6b 81       	ldd	r22, Y+3	; 0x03
    37b8:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    37bc:	89 83       	std	Y+1, r24	; 0x01
		uint8 static BTN_STATE = BTN_Pressed_State;
		if (TEMP == BTN_Pressed_State) {
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	88 23       	and	r24, r24
    37c2:	51 f4       	brne	.+20     	; 0x37d8 <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x34>

			if (BTN_STATE == BTN_Pressed_State) {
    37c4:	80 91 d9 00 	lds	r24, 0x00D9
    37c8:	88 23       	and	r24, r24
    37ca:	41 f4       	brne	.+16     	; 0x37dc <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x38>
				BTN_STATE = BTN_Released_State;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	80 93 d9 00 	sts	0x00D9, r24
				H_Buzzer_Void_BuzzerOnce();
    37d2:	0e 94 95 18 	call	0x312a	; 0x312a <H_Buzzer_Void_BuzzerOnce>
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x38>
			}
		}
		else {
			BTN_STATE = BTN_Pressed_State;
    37d8:	10 92 d9 00 	sts	0x00D9, r1
		}



	}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <A_APPLICATION_VOID_BUZZER_BEEP_BRK>:
void A_APPLICATION_VOID_BUZZER_BEEP_BRK(uint8 BTN_PORT, uint8 BTN_PIN)
	{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	00 d0       	rcall	.+0      	; 0x37ee <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x6>
    37ee:	0f 92       	push	r0
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	8a 83       	std	Y+2, r24	; 0x02
    37f6:	6b 83       	std	Y+3, r22	; 0x03
		uint8 TEMP;
		TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	6b 81       	ldd	r22, Y+3	; 0x03
    37fc:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    3800:	89 83       	std	Y+1, r24	; 0x01
		uint8 static BTN_STATE = BTN_Pressed_State;
		if (TEMP == BTN_Pressed_State) {
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	88 23       	and	r24, r24
    3806:	51 f4       	brne	.+20     	; 0x381c <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x34>

			if (BTN_STATE == BTN_Pressed_State) {
    3808:	80 91 da 00 	lds	r24, 0x00DA
    380c:	88 23       	and	r24, r24
    380e:	41 f4       	brne	.+16     	; 0x3820 <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x38>
				BTN_STATE = BTN_Released_State;
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	80 93 da 00 	sts	0x00DA, r24
				H_Buzzer_Void_BuzzerOnce();
    3816:	0e 94 95 18 	call	0x312a	; 0x312a <H_Buzzer_Void_BuzzerOnce>
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x38>
			}
		}
		else {
			BTN_STATE = BTN_Pressed_State;
    381c:	10 92 da 00 	sts	0x00DA, r1
		}



	}
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	08 95       	ret

0000382c <A_APPLICATION_VOID_BUZZER_BEEP_ACCS>:
void A_APPLICATION_VOID_BUZZER_BEEP_ACCS(uint8 BTN_PORT, uint8 BTN_PIN)
	{
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	00 d0       	rcall	.+0      	; 0x3832 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x6>
    3832:	0f 92       	push	r0
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	8a 83       	std	Y+2, r24	; 0x02
    383a:	6b 83       	std	Y+3, r22	; 0x03
		uint8 TEMP;
		TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    383c:	8a 81       	ldd	r24, Y+2	; 0x02
    383e:	6b 81       	ldd	r22, Y+3	; 0x03
    3840:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    3844:	89 83       	std	Y+1, r24	; 0x01
		uint8 static BTN_STATE = BTN_Pressed_State;
		if (TEMP == BTN_Pressed_State) {
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	88 23       	and	r24, r24
    384a:	91 f4       	brne	.+36     	; 0x3870 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x44>

			if (BTN_STATE == BTN_Pressed_State) {
    384c:	80 91 db 00 	lds	r24, 0x00DB
    3850:	88 23       	and	r24, r24
    3852:	81 f4       	brne	.+32     	; 0x3874 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x48>
				BTN_STATE = BTN_Released_State;
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 93 db 00 	sts	0x00DB, r24
				LCD_MoveCursor(0,0);
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
				LCD_DisplayString((uint8*)"ACCS : ON ");
    3862:	80 e6       	ldi	r24, 0x60	; 96
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>
				H_Buzzer_Void_BuzzerOnce();
    386a:	0e 94 95 18 	call	0x312a	; 0x312a <H_Buzzer_Void_BuzzerOnce>
    386e:	02 c0       	rjmp	.+4      	; 0x3874 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x48>
			}
		}
		else {
			BTN_STATE = BTN_Pressed_State;
    3870:	10 92 db 00 	sts	0x00DB, r1
		}
	}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <A_APPLICATION_VOID_ACCS_LCD>:

void A_APPLICATION_VOID_ACCS_LCD(void)
		{
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	0f 92       	push	r0
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
			uint8 TEMP;
			TEMP = GPIO_ReadPin(GRN_LED_PORT,GRN_LED_PIN);
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	64 e0       	ldi	r22, 0x04	; 4
    388e:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    3892:	89 83       	std	Y+1, r24	; 0x01
			uint8 static BTN_STATE = BTN_Pressed_State;
			if (TEMP == BTN_Pressed_State) {
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	88 23       	and	r24, r24
    3898:	81 f4       	brne	.+32     	; 0x38ba <A_APPLICATION_VOID_ACCS_LCD+0x3a>

				if (BTN_STATE == BTN_Pressed_State) {
    389a:	80 91 dc 00 	lds	r24, 0x00DC
    389e:	88 23       	and	r24, r24
    38a0:	b1 f4       	brne	.+44     	; 0x38ce <A_APPLICATION_VOID_ACCS_LCD+0x4e>
					BTN_STATE = BTN_Released_State;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	80 93 dc 00 	sts	0x00DC, r24
					LCD_MoveCursor(0,0);
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
					LCD_DisplayString((uint8*)"ACCS : OFF ");
    38b0:	8b e6       	ldi	r24, 0x6B	; 107
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>
    38b8:	0a c0       	rjmp	.+20     	; 0x38ce <A_APPLICATION_VOID_ACCS_LCD+0x4e>
				}
			}
			else {
				BTN_STATE = BTN_Pressed_State;
    38ba:	10 92 dc 00 	sts	0x00DC, r1
				LCD_MoveCursor(0,0);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
				LCD_DisplayString((uint8*)"ACCS : ON");
    38c6:	87 e7       	ldi	r24, 0x77	; 119
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>
			}


		}
    38ce:	0f 90       	pop	r0
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>:

void A_APPLICATION_VOID_BUZZER_BEEP_GEAR(uint8 BTN_PORT, uint8 BTN_PIN)
	{
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	00 d0       	rcall	.+0      	; 0x38dc <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x6>
    38dc:	0f 92       	push	r0
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	8a 83       	std	Y+2, r24	; 0x02
    38e4:	6b 83       	std	Y+3, r22	; 0x03
		uint8 TEMP;
		TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    38e6:	8a 81       	ldd	r24, Y+2	; 0x02
    38e8:	6b 81       	ldd	r22, Y+3	; 0x03
    38ea:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    38ee:	89 83       	std	Y+1, r24	; 0x01
		uint8 static BTN_STATE = BTN_Pressed_State;
		if (TEMP == BTN_Pressed_State) {
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	88 23       	and	r24, r24
    38f4:	51 f4       	brne	.+20     	; 0x390a <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x34>

			if (BTN_STATE == BTN_Pressed_State) {
    38f6:	80 91 dd 00 	lds	r24, 0x00DD
    38fa:	88 23       	and	r24, r24
    38fc:	41 f4       	brne	.+16     	; 0x390e <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x38>
				BTN_STATE = BTN_Released_State;
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	80 93 dd 00 	sts	0x00DD, r24
				H_Buzzer_Void_BuzzerOnce();
    3904:	0e 94 95 18 	call	0x312a	; 0x312a <H_Buzzer_Void_BuzzerOnce>
    3908:	02 c0       	rjmp	.+4      	; 0x390e <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x38>
			}
		}
		else {
			BTN_STATE = BTN_Pressed_State;
    390a:	10 92 dd 00 	sts	0x00DD, r1
		}



	}
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	cf 91       	pop	r28
    3916:	df 91       	pop	r29
    3918:	08 95       	ret

0000391a <A_APPLICATION_VOID_LCD_STATICS>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR LCD STATICS,
 * THIS FUNCTION DISPLAYS THE STATIC (NON-CHANGING STUFF) DISPLAYED ON THE LCD SCREEN .		  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_LCD_STATICS(void){
    391a:	df 93       	push	r29
    391c:	cf 93       	push	r28
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
	LCD_MoveCursor(0,0);
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"ACCS : OFF");
    392a:	81 e8       	ldi	r24, 0x81	; 129
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>

	LCD_MoveCursor(1,0);
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"Gear (R,N,D) : N");
    393a:	8c e8       	ldi	r24, 0x8C	; 140
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>

	LCD_MoveCursor(2,0);
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"Distance : ");
    394a:	8d e9       	ldi	r24, 0x9D	; 157
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>

}
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR HEARBOX CHANGE,
 * THIS FUNCTION CHANGES THE GEAR ON EACH BUTTON PRESS OR TOGGLE .							  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE(void){
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	00 d0       	rcall	.+0      	; 0x395e <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x6>
    395e:	0f 92       	push	r0
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
	// calling main BTN action function here
	 A_APPLICATION_VOID_BTN_ACTION();
    3964:	0e 94 9c 1b 	call	0x3738	; 0x3738 <A_APPLICATION_VOID_BTN_ACTION>
	uint8 TEMP;
	TEMP = BUTTON_GetValue(GBX_BTN_PORT,GBX_BTN_PIN);
    3968:	83 e0       	ldi	r24, 0x03	; 3
    396a:	63 e0       	ldi	r22, 0x03	; 3
    396c:	0e 94 b5 1a 	call	0x356a	; 0x356a <BUTTON_GetValue>
    3970:	89 83       	std	Y+1, r24	; 0x01
	uint8 static STATE = E_GEARBOX_NEUTRAL;
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	88 23       	and	r24, r24
    3976:	a9 f4       	brne	.+42     	; 0x39a2 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x4a>

		if (BTN_STATE == BTN_Pressed_State) {
    3978:	80 91 de 00 	lds	r24, 0x00DE
    397c:	88 23       	and	r24, r24
    397e:	99 f4       	brne	.+38     	; 0x39a6 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x4e>
			BTN_STATE = BTN_Released_State;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	80 93 de 00 	sts	0x00DE, r24

			if (STATE < 4) {
    3986:	80 91 ca 00 	lds	r24, 0x00CA
    398a:	84 30       	cpi	r24, 0x04	; 4
    398c:	30 f4       	brcc	.+12     	; 0x399a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x42>
				STATE++;
    398e:	80 91 ca 00 	lds	r24, 0x00CA
    3992:	8f 5f       	subi	r24, 0xFF	; 255
    3994:	80 93 ca 00 	sts	0x00CA, r24
    3998:	06 c0       	rjmp	.+12     	; 0x39a6 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x4e>

			}else {
				STATE = E_GEARBOX_NEUTRAL;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	80 93 ca 00 	sts	0x00CA, r24
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x4e>

			}
		}
	}
	else{
		BTN_STATE = BTN_Pressed_State;
    39a2:	10 92 de 00 	sts	0x00DE, r1
		//reserved
	}
	switch (STATE) {
    39a6:	80 91 ca 00 	lds	r24, 0x00CA
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	3b 83       	std	Y+3, r19	; 0x03
    39b0:	2a 83       	std	Y+2, r18	; 0x02
    39b2:	8a 81       	ldd	r24, Y+2	; 0x02
    39b4:	9b 81       	ldd	r25, Y+3	; 0x03
    39b6:	82 30       	cpi	r24, 0x02	; 2
    39b8:	91 05       	cpc	r25, r1
    39ba:	41 f1       	breq	.+80     	; 0x3a0c <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0xb4>
    39bc:	2a 81       	ldd	r18, Y+2	; 0x02
    39be:	3b 81       	ldd	r19, Y+3	; 0x03
    39c0:	23 30       	cpi	r18, 0x03	; 3
    39c2:	31 05       	cpc	r19, r1
    39c4:	e1 f1       	breq	.+120    	; 0x3a3e <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0xe6>
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ca:	81 30       	cpi	r24, 0x01	; 1
    39cc:	91 05       	cpc	r25, r1
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x7a>
    39d0:	4f c0       	rjmp	.+158    	; 0x3a70 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x118>
	case E_GEARBOX_NEUTRAL:
		//if (A_APPLICATION_UINT8_BTN_CHECK(BRK_BTN_PORT,BRK_BTN_PIN))
			if (!GPIO_ReadPin(BRK_BTN_PORT,BRK_BTN_PIN)&&(!GPIO_ReadPin(GBX_BTN_PORT,GBX_BTN_PIN))){
    39d2:	83 e0       	ldi	r24, 0x03	; 3
    39d4:	66 e0       	ldi	r22, 0x06	; 6
    39d6:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    39da:	88 23       	and	r24, r24
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x88>
    39de:	4b c0       	rjmp	.+150    	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	63 e0       	ldi	r22, 0x03	; 3
    39e4:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    39e8:	88 23       	and	r24, r24
    39ea:	09 f0       	breq	.+2      	; 0x39ee <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x96>
    39ec:	44 c0       	rjmp	.+136    	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>
			A_APPLICATION_VOID_ACCS();
    39ee:	0e 94 1c 1b 	call	0x3638	; 0x3638 <A_APPLICATION_VOID_ACCS>

			LCD_MoveCursor(1,15);
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	6f e0       	ldi	r22, 0x0F	; 15
    39f6:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"N");
    39fa:	89 ea       	ldi	r24, 0xA9	; 169
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>
			A_APPLICATION_VOID_BUZZER_BEEP_GEAR(GBX_BTN_PORT,GBX_BTN_PIN);
    3a02:	83 e0       	ldi	r24, 0x03	; 3
    3a04:	63 e0       	ldi	r22, 0x03	; 3
    3a06:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>
    3a0a:	35 c0       	rjmp	.+106    	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>



		break;
	case E_GEARBX_DRIVE:
		if (!GPIO_ReadPin(BRK_BTN_PORT,BRK_BTN_PIN)&&(!GPIO_ReadPin(GBX_BTN_PORT,GBX_BTN_PIN))) {
    3a0c:	83 e0       	ldi	r24, 0x03	; 3
    3a0e:	66 e0       	ldi	r22, 0x06	; 6
    3a10:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    3a14:	88 23       	and	r24, r24
    3a16:	79 f5       	brne	.+94     	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>
    3a18:	83 e0       	ldi	r24, 0x03	; 3
    3a1a:	63 e0       	ldi	r22, 0x03	; 3
    3a1c:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    3a20:	88 23       	and	r24, r24
    3a22:	49 f5       	brne	.+82     	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>

		LCD_MoveCursor(1,15);
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	6f e0       	ldi	r22, 0x0F	; 15
    3a28:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
		LCD_DisplayString((uint8*)"D");
    3a2c:	8b ea       	ldi	r24, 0xAB	; 171
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>

		A_APPLICATION_VOID_BUZZER_BEEP_GEAR(GBX_BTN_PORT,GBX_BTN_PIN);
    3a34:	83 e0       	ldi	r24, 0x03	; 3
    3a36:	63 e0       	ldi	r22, 0x03	; 3
    3a38:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>
    3a3c:	1c c0       	rjmp	.+56     	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>
		}
		break;
	case E_GEARBOX_REVERSE:
		if (!GPIO_ReadPin(BRK_BTN_PORT,BRK_BTN_PIN)&&(!GPIO_ReadPin(GBX_BTN_PORT,GBX_BTN_PIN))) {
    3a3e:	83 e0       	ldi	r24, 0x03	; 3
    3a40:	66 e0       	ldi	r22, 0x06	; 6
    3a42:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    3a46:	88 23       	and	r24, r24
    3a48:	b1 f4       	brne	.+44     	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>
    3a4a:	83 e0       	ldi	r24, 0x03	; 3
    3a4c:	63 e0       	ldi	r22, 0x03	; 3
    3a4e:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_ReadPin>
    3a52:	88 23       	and	r24, r24
    3a54:	81 f4       	brne	.+32     	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>


		LCD_MoveCursor(1,15);
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	6f e0       	ldi	r22, 0x0F	; 15
    3a5a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_MoveCursor>
		LCD_DisplayString((uint8*)"R");
    3a5e:	8d ea       	ldi	r24, 0xAD	; 173
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_DisplayString>


		A_APPLICATION_VOID_BUZZER_BEEP_GEAR(GBX_BTN_PORT,GBX_BTN_PIN);
    3a66:	83 e0       	ldi	r24, 0x03	; 3
    3a68:	63 e0       	ldi	r22, 0x03	; 3
    3a6a:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>
    3a6e:	03 c0       	rjmp	.+6      	; 0x3a76 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x11e>
		}
		break;
	default: STATE = E_GEARBOX_NEUTRAL;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	80 93 ca 00 	sts	0x00CA, r24
	break;

		}
}
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	08 95       	ret

00003a82 <main>:




int main()
{
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62


	init();
    3a8a:	0e 94 c5 1a 	call	0x358a	; 0x358a <init>
	A_APPLICATION_VOID_LCD_STATICS();
    3a8e:	0e 94 8d 1c 	call	0x391a	; 0x391a <A_APPLICATION_VOID_LCD_STATICS>
	H_Buzzer_Void_BuzzerInit();
    3a92:	0e 94 66 18 	call	0x30cc	; 0x30cc <H_Buzzer_Void_BuzzerInit>
	while(1)
	{
		 A_APPLICATION_VOID_BTN_ACTION();
    3a96:	0e 94 9c 1b 	call	0x3738	; 0x3738 <A_APPLICATION_VOID_BTN_ACTION>
		 A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE();
    3a9a:	0e 94 ac 1c 	call	0x3958	; 0x3958 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE>
    3a9e:	fb cf       	rjmp	.-10     	; 0x3a96 <main+0x14>

00003aa0 <__prologue_saves__>:
    3aa0:	2f 92       	push	r2
    3aa2:	3f 92       	push	r3
    3aa4:	4f 92       	push	r4
    3aa6:	5f 92       	push	r5
    3aa8:	6f 92       	push	r6
    3aaa:	7f 92       	push	r7
    3aac:	8f 92       	push	r8
    3aae:	9f 92       	push	r9
    3ab0:	af 92       	push	r10
    3ab2:	bf 92       	push	r11
    3ab4:	cf 92       	push	r12
    3ab6:	df 92       	push	r13
    3ab8:	ef 92       	push	r14
    3aba:	ff 92       	push	r15
    3abc:	0f 93       	push	r16
    3abe:	1f 93       	push	r17
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	ca 1b       	sub	r28, r26
    3aca:	db 0b       	sbc	r29, r27
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	09 94       	ijmp

00003ad8 <__epilogue_restores__>:
    3ad8:	2a 88       	ldd	r2, Y+18	; 0x12
    3ada:	39 88       	ldd	r3, Y+17	; 0x11
    3adc:	48 88       	ldd	r4, Y+16	; 0x10
    3ade:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ae0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ae2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ae4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ae6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ae8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3aea:	b9 84       	ldd	r11, Y+9	; 0x09
    3aec:	c8 84       	ldd	r12, Y+8	; 0x08
    3aee:	df 80       	ldd	r13, Y+7	; 0x07
    3af0:	ee 80       	ldd	r14, Y+6	; 0x06
    3af2:	fd 80       	ldd	r15, Y+5	; 0x05
    3af4:	0c 81       	ldd	r16, Y+4	; 0x04
    3af6:	1b 81       	ldd	r17, Y+3	; 0x03
    3af8:	aa 81       	ldd	r26, Y+2	; 0x02
    3afa:	b9 81       	ldd	r27, Y+1	; 0x01
    3afc:	ce 0f       	add	r28, r30
    3afe:	d1 1d       	adc	r29, r1
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	ed 01       	movw	r28, r26
    3b0c:	08 95       	ret

00003b0e <itoa>:
    3b0e:	fb 01       	movw	r30, r22
    3b10:	9f 01       	movw	r18, r30
    3b12:	e8 94       	clt
    3b14:	42 30       	cpi	r20, 0x02	; 2
    3b16:	c4 f0       	brlt	.+48     	; 0x3b48 <itoa+0x3a>
    3b18:	45 32       	cpi	r20, 0x25	; 37
    3b1a:	b4 f4       	brge	.+44     	; 0x3b48 <itoa+0x3a>
    3b1c:	4a 30       	cpi	r20, 0x0A	; 10
    3b1e:	29 f4       	brne	.+10     	; 0x3b2a <itoa+0x1c>
    3b20:	97 fb       	bst	r25, 7
    3b22:	1e f4       	brtc	.+6      	; 0x3b2a <itoa+0x1c>
    3b24:	90 95       	com	r25
    3b26:	81 95       	neg	r24
    3b28:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2a:	64 2f       	mov	r22, r20
    3b2c:	77 27       	eor	r23, r23
    3b2e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__udivmodhi4>
    3b32:	80 5d       	subi	r24, 0xD0	; 208
    3b34:	8a 33       	cpi	r24, 0x3A	; 58
    3b36:	0c f0       	brlt	.+2      	; 0x3b3a <itoa+0x2c>
    3b38:	89 5d       	subi	r24, 0xD9	; 217
    3b3a:	81 93       	st	Z+, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	a1 f7       	brne	.-24     	; 0x3b2a <itoa+0x1c>
    3b42:	16 f4       	brtc	.+4      	; 0x3b48 <itoa+0x3a>
    3b44:	5d e2       	ldi	r21, 0x2D	; 45
    3b46:	51 93       	st	Z+, r21
    3b48:	10 82       	st	Z, r1
    3b4a:	c9 01       	movw	r24, r18
    3b4c:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <strrev>

00003b50 <strrev>:
    3b50:	dc 01       	movw	r26, r24
    3b52:	fc 01       	movw	r30, r24
    3b54:	67 2f       	mov	r22, r23
    3b56:	71 91       	ld	r23, Z+
    3b58:	77 23       	and	r23, r23
    3b5a:	e1 f7       	brne	.-8      	; 0x3b54 <strrev+0x4>
    3b5c:	32 97       	sbiw	r30, 0x02	; 2
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <strrev+0x18>
    3b60:	7c 91       	ld	r23, X
    3b62:	6d 93       	st	X+, r22
    3b64:	70 83       	st	Z, r23
    3b66:	62 91       	ld	r22, -Z
    3b68:	ae 17       	cp	r26, r30
    3b6a:	bf 07       	cpc	r27, r31
    3b6c:	c8 f3       	brcs	.-14     	; 0x3b60 <strrev+0x10>
    3b6e:	08 95       	ret

00003b70 <__udivmodhi4>:
    3b70:	aa 1b       	sub	r26, r26
    3b72:	bb 1b       	sub	r27, r27
    3b74:	51 e1       	ldi	r21, 0x11	; 17
    3b76:	07 c0       	rjmp	.+14     	; 0x3b86 <__udivmodhi4_ep>

00003b78 <__udivmodhi4_loop>:
    3b78:	aa 1f       	adc	r26, r26
    3b7a:	bb 1f       	adc	r27, r27
    3b7c:	a6 17       	cp	r26, r22
    3b7e:	b7 07       	cpc	r27, r23
    3b80:	10 f0       	brcs	.+4      	; 0x3b86 <__udivmodhi4_ep>
    3b82:	a6 1b       	sub	r26, r22
    3b84:	b7 0b       	sbc	r27, r23

00003b86 <__udivmodhi4_ep>:
    3b86:	88 1f       	adc	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	5a 95       	dec	r21
    3b8c:	a9 f7       	brne	.-22     	; 0x3b78 <__udivmodhi4_loop>
    3b8e:	80 95       	com	r24
    3b90:	90 95       	com	r25
    3b92:	bc 01       	movw	r22, r24
    3b94:	cd 01       	movw	r24, r26
    3b96:	08 95       	ret

00003b98 <_exit>:
    3b98:	f8 94       	cli

00003b9a <__stop_program>:
    3b9a:	ff cf       	rjmp	.-2      	; 0x3b9a <__stop_program>
