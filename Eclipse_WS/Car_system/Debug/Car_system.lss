
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  00004314  000043a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800204  00800204  0000454c  2**0
                  ALLOC
  3 .stab         00004e60  00000000  00000000  0000454c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d67  00000000  00000000  000093ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c113  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fc36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000112c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_1>
       8:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_2>
       c:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <main>
      8a:	0c 94 88 21 	jmp	0x4310	; 0x4310 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 21 	jmp	0x4250	; 0x4250 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 21 	jmp	0x4268	; 0x4268 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 21 	jmp	0x4268	; 0x4268 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 21 	jmp	0x4250	; 0x4250 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 ee       	ldi	r22, 0xE1	; 225
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 30 21 	jmp	0x4260	; 0x4260 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 34 21 	jmp	0x4268	; 0x4268 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 34 21 	jmp	0x4268	; 0x4268 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 34 21 	jmp	0x4268	; 0x4268 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 30 21 	jmp	0x4260	; 0x4260 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 51       	subi	r30, 0x17	; 23
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	57 c0       	rjmp	.+174    	; 0xeea <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	c9 01       	movw	r24, r18
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	e6 51       	subi	r30, 0x16	; 22
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	80 81       	ld	r24, Z
     e54:	88 30       	cpi	r24, 0x08	; 8
     e56:	e9 f4       	brne	.+58     	; 0xe92 <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	c9 01       	movw	r24, r18
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	fc 01       	movw	r30, r24
     e6a:	e7 51       	subi	r30, 0x17	; 23
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	40 81       	ld	r20, Z
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	c9 01       	movw	r24, r18
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	fc 01       	movw	r30, r24
     e82:	e5 51       	subi	r30, 0x15	; 21
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	90 81       	ld	r25, Z
     e88:	84 2f       	mov	r24, r20
     e8a:	69 2f       	mov	r22, r25
     e8c:	0e 94 85 0b 	call	0x170a	; 0x170a <GPIO_SetPortDirection>
     e90:	29 c0       	rjmp	.+82     	; 0xee4 <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	c9 01       	movw	r24, r18
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	82 0f       	add	r24, r18
     ea0:	93 1f       	adc	r25, r19
     ea2:	fc 01       	movw	r30, r24
     ea4:	e7 51       	subi	r30, 0x17	; 23
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	50 81       	ld	r21, Z
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	fc 01       	movw	r30, r24
     ebc:	e6 51       	subi	r30, 0x16	; 22
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	40 81       	ld	r20, Z
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	c9 01       	movw	r24, r18
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	82 0f       	add	r24, r18
     ed0:	93 1f       	adc	r25, r19
     ed2:	fc 01       	movw	r30, r24
     ed4:	e5 51       	subi	r30, 0x15	; 21
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	90 81       	ld	r25, Z
     eda:	85 2f       	mov	r24, r21
     edc:	64 2f       	mov	r22, r20
     ede:	49 2f       	mov	r20, r25
     ee0:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	88 23       	and	r24, r24
     eee:	09 f4       	brne	.+2      	; 0xef2 <GPIO_init+0xc4>
     ef0:	a5 cf       	rjmp	.-182    	; 0xe3c <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <GPIO_SetPinDirection+0x6>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <GPIO_SetPinDirection+0x8>
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	6a 83       	std	Y+2, r22	; 0x02
     f0c:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_SetPinDirection+0x1c>
     f14:	d8 c1       	rjmp	.+944    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	88 30       	cpi	r24, 0x08	; 8
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <GPIO_SetPinDirection+0x24>
     f1c:	d4 c1       	rjmp	.+936    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3d 83       	std	Y+5, r19	; 0x05
     f26:	2c 83       	std	Y+4, r18	; 0x04
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <GPIO_SetPinDirection+0x3a>
     f32:	84 c0       	rjmp	.+264    	; 0x103c <GPIO_SetPinDirection+0x142>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	2c f4       	brge	.+10     	; 0xf48 <GPIO_SetPinDirection+0x4e>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	71 f0       	breq	.+28     	; 0xf62 <GPIO_SetPinDirection+0x68>
     f46:	bf c1       	rjmp	.+894    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
     f48:	2c 81       	ldd	r18, Y+4	; 0x04
     f4a:	3d 81       	ldd	r19, Y+5	; 0x05
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_SetPinDirection+0x5a>
     f52:	e1 c0       	rjmp	.+450    	; 0x1116 <GPIO_SetPinDirection+0x21c>
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	91 05       	cpc	r25, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <GPIO_SetPinDirection+0x66>
     f5e:	48 c1       	rjmp	.+656    	; 0x11f0 <GPIO_SetPinDirection+0x2f6>
     f60:	b2 c1       	rjmp	.+868    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 23       	and	r24, r24
     f66:	41 f5       	brne	.+80     	; 0xfb8 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
     f68:	aa e3       	ldi	r26, 0x3A	; 58
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea e3       	ldi	r30, 0x3A	; 58
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <GPIO_SetPinDirection+0x8a>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <GPIO_SetPinDirection+0x86>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
     f8e:	ab e3       	ldi	r26, 0x3B	; 59
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e3       	ldi	r30, 0x3B	; 59
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <GPIO_SetPinDirection+0xb2>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <GPIO_SetPinDirection+0xae>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	87 c1       	rjmp	.+782    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	39 f5       	brne	.+78     	; 0x100c <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
     fbe:	aa e3       	ldi	r26, 0x3A	; 58
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ea e3       	ldi	r30, 0x3A	; 58
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_SetPinDirection+0xe0>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_SetPinDirection+0xdc>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <GPIO_SetPinDirection+0x108>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <GPIO_SetPinDirection+0x104>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	5d c1       	rjmp	.+698    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	09 f0       	breq	.+2      	; 0x1014 <GPIO_SetPinDirection+0x11a>
    1012:	59 c1       	rjmp	.+690    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    1014:	aa e3       	ldi	r26, 0x3A	; 58
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ea e3       	ldi	r30, 0x3A	; 58
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_SetPinDirection+0x138>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_SetPinDirection+0x134>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	45 c1       	rjmp	.+650    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	88 23       	and	r24, r24
    1040:	41 f5       	brne	.+80     	; 0x1092 <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_SetPinDirection+0x164>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_SetPinDirection+0x160>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    1068:	a8 e3       	ldi	r26, 0x38	; 56
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e8 e3       	ldi	r30, 0x38	; 56
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_SetPinDirection+0x18c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_SetPinDirection+0x188>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	1a c1       	rjmp	.+564    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	39 f5       	brne	.+78     	; 0x10e6 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    1098:	a7 e3       	ldi	r26, 0x37	; 55
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e3       	ldi	r30, 0x37	; 55
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_SetPinDirection+0x1ba>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	2a 95       	dec	r18
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_SetPinDirection+0x1b6>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    10be:	a8 e3       	ldi	r26, 0x38	; 56
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e8 e3       	ldi	r30, 0x38	; 56
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <GPIO_SetPinDirection+0x1e2>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <GPIO_SetPinDirection+0x1de>
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	f0 c0       	rjmp	.+480    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	09 f0       	breq	.+2      	; 0x10ee <GPIO_SetPinDirection+0x1f4>
    10ec:	ec c0       	rjmp	.+472    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_SetPinDirection+0x212>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_SetPinDirection+0x20e>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	d8 c0       	rjmp	.+432    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	88 23       	and	r24, r24
    111a:	41 f5       	brne	.+80     	; 0x116c <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    111c:	a4 e3       	ldi	r26, 0x34	; 52
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e4 e3       	ldi	r30, 0x34	; 52
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_SetPinDirection+0x23e>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	2a 95       	dec	r18
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_SetPinDirection+0x23a>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    1142:	a5 e3       	ldi	r26, 0x35	; 53
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e3       	ldi	r30, 0x35	; 53
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_SetPinDirection+0x266>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_SetPinDirection+0x262>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	ad c0       	rjmp	.+346    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	39 f5       	brne	.+78     	; 0x11c0 <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    1172:	a4 e3       	ldi	r26, 0x34	; 52
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e4 e3       	ldi	r30, 0x34	; 52
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_SetPinDirection+0x294>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	2a 95       	dec	r18
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_SetPinDirection+0x290>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    1198:	a5 e3       	ldi	r26, 0x35	; 53
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e3       	ldi	r30, 0x35	; 53
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_SetPinDirection+0x2bc>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_SetPinDirection+0x2b8>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	83 c0       	rjmp	.+262    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <GPIO_SetPinDirection+0x2ce>
    11c6:	7f c0       	rjmp	.+254    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    11c8:	a4 e3       	ldi	r26, 0x34	; 52
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e4 e3       	ldi	r30, 0x34	; 52
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_SetPinDirection+0x2ec>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_SetPinDirection+0x2e8>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	6b c0       	rjmp	.+214    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 23       	and	r24, r24
    11f4:	41 f5       	brne	.+80     	; 0x1246 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    11f6:	a1 e3       	ldi	r26, 0x31	; 49
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e1 e3       	ldi	r30, 0x31	; 49
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_SetPinDirection+0x318>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	2a 95       	dec	r18
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_SetPinDirection+0x314>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    121c:	a2 e3       	ldi	r26, 0x32	; 50
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_SetPinDirection+0x340>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_SetPinDirection+0x33c>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	40 c0       	rjmp	.+128    	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	39 f5       	brne	.+78     	; 0x129a <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    124c:	a1 e3       	ldi	r26, 0x31	; 49
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e1 e3       	ldi	r30, 0x31	; 49
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_SetPinDirection+0x36e>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	2a 95       	dec	r18
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_SetPinDirection+0x36a>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <GPIO_SetPinDirection+0x396>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <GPIO_SetPinDirection+0x392>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	99 f4       	brne	.+38     	; 0x12c6 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    12a0:	a1 e3       	ldi	r26, 0x31	; 49
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e1 e3       	ldi	r30, 0x31	; 49
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_SetPinDirection+0x3c4>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_SetPinDirection+0x3c0>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <GPIO_ReadPin+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_ReadPin+0x8>
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    12e8:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <GPIO_ReadPin+0x1c>
    12f0:	84 c0       	rjmp	.+264    	; 0x13fa <GPIO_ReadPin+0x124>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 30       	cpi	r24, 0x08	; 8
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <GPIO_ReadPin+0x24>
    12f8:	80 c0       	rjmp	.+256    	; 0x13fa <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3d 83       	std	Y+5, r19	; 0x05
    1302:	2c 83       	std	Y+4, r18	; 0x04
    1304:	4c 81       	ldd	r20, Y+4	; 0x04
    1306:	5d 81       	ldd	r21, Y+5	; 0x05
    1308:	41 30       	cpi	r20, 0x01	; 1
    130a:	51 05       	cpc	r21, r1
    130c:	79 f1       	breq	.+94     	; 0x136c <GPIO_ReadPin+0x96>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	34 f4       	brge	.+12     	; 0x1324 <GPIO_ReadPin+0x4e>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	69 f0       	breq	.+26     	; 0x133c <GPIO_ReadPin+0x66>
    1322:	6b c0       	rjmp	.+214    	; 0x13fa <GPIO_ReadPin+0x124>
    1324:	4c 81       	ldd	r20, Y+4	; 0x04
    1326:	5d 81       	ldd	r21, Y+5	; 0x05
    1328:	42 30       	cpi	r20, 0x02	; 2
    132a:	51 05       	cpc	r21, r1
    132c:	b9 f1       	breq	.+110    	; 0x139c <GPIO_ReadPin+0xc6>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	09 f4       	brne	.+2      	; 0x133a <GPIO_ReadPin+0x64>
    1338:	49 c0       	rjmp	.+146    	; 0x13cc <GPIO_ReadPin+0xf6>
    133a:	5f c0       	rjmp	.+190    	; 0x13fa <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    133c:	e9 e3       	ldi	r30, 0x39	; 57
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_ReadPin+0x7e>
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_ReadPin+0x7a>
    1358:	ca 01       	movw	r24, r20
    135a:	81 70       	andi	r24, 0x01	; 1
    135c:	90 70       	andi	r25, 0x00	; 0
    135e:	88 23       	and	r24, r24
    1360:	19 f0       	breq	.+6      	; 0x1368 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	49 c0       	rjmp	.+146    	; 0x13fa <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1368:	19 82       	std	Y+1, r1	; 0x01
    136a:	47 c0       	rjmp	.+142    	; 0x13fa <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    136c:	e6 e3       	ldi	r30, 0x36	; 54
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_ReadPin+0xae>
    1380:	55 95       	asr	r21
    1382:	47 95       	ror	r20
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_ReadPin+0xaa>
    1388:	ca 01       	movw	r24, r20
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	88 23       	and	r24, r24
    1390:	19 f0       	breq	.+6      	; 0x1398 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	31 c0       	rjmp	.+98     	; 0x13fa <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1398:	19 82       	std	Y+1, r1	; 0x01
    139a:	2f c0       	rjmp	.+94     	; 0x13fa <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    139c:	e3 e3       	ldi	r30, 0x33	; 51
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <GPIO_ReadPin+0xde>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <GPIO_ReadPin+0xda>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	88 23       	and	r24, r24
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	17 c0       	rjmp	.+46     	; 0x13fa <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    13cc:	e0 e3       	ldi	r30, 0x30	; 48
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_ReadPin+0x10e>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_ReadPin+0x10a>
    13e8:	ca 01       	movw	r24, r20
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	90 70       	andi	r25, 0x00	; 0
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    13f8:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <GPIO_WritePin+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <GPIO_WritePin+0x8>
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	6a 83       	std	Y+2, r22	; 0x02
    141e:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	08 f0       	brcs	.+2      	; 0x1428 <GPIO_WritePin+0x1c>
    1426:	e4 c0       	rjmp	.+456    	; 0x15f0 <GPIO_WritePin+0x1e4>
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	88 30       	cpi	r24, 0x08	; 8
    142c:	08 f0       	brcs	.+2      	; 0x1430 <GPIO_WritePin+0x24>
    142e:	e0 c0       	rjmp	.+448    	; 0x15f0 <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3d 83       	std	Y+5, r19	; 0x05
    1438:	2c 83       	std	Y+4, r18	; 0x04
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <GPIO_WritePin+0x3a>
    1444:	47 c0       	rjmp	.+142    	; 0x14d4 <GPIO_WritePin+0xc8>
    1446:	2c 81       	ldd	r18, Y+4	; 0x04
    1448:	3d 81       	ldd	r19, Y+5	; 0x05
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	2c f4       	brge	.+10     	; 0x145a <GPIO_WritePin+0x4e>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	71 f0       	breq	.+28     	; 0x1474 <GPIO_WritePin+0x68>
    1458:	cb c0       	rjmp	.+406    	; 0x15f0 <GPIO_WritePin+0x1e4>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <GPIO_WritePin+0x5a>
    1464:	67 c0       	rjmp	.+206    	; 0x1534 <GPIO_WritePin+0x128>
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	9d 81       	ldd	r25, Y+5	; 0x05
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <GPIO_WritePin+0x66>
    1470:	91 c0       	rjmp	.+290    	; 0x1594 <GPIO_WritePin+0x188>
    1472:	be c0       	rjmp	.+380    	; 0x15f0 <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	a1 f4       	brne	.+40     	; 0x14a2 <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	eb e3       	ldi	r30, 0x3B	; 59
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_WritePin+0x8c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_WritePin+0x88>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	a7 c0       	rjmp	.+334    	; 0x15f0 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 23       	and	r24, r24
    14a6:	09 f0       	breq	.+2      	; 0x14aa <GPIO_WritePin+0x9e>
    14a8:	a3 c0       	rjmp	.+326    	; 0x15f0 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    14aa:	ab e3       	ldi	r26, 0x3B	; 59
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e3       	ldi	r30, 0x3B	; 59
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_WritePin+0xbc>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_WritePin+0xb8>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	8e c0       	rjmp	.+284    	; 0x15f0 <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    14da:	a8 e3       	ldi	r26, 0x38	; 56
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e8 e3       	ldi	r30, 0x38	; 56
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_WritePin+0xec>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_WritePin+0xe8>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	77 c0       	rjmp	.+238    	; 0x15f0 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 23       	and	r24, r24
    1506:	09 f0       	breq	.+2      	; 0x150a <GPIO_WritePin+0xfe>
    1508:	73 c0       	rjmp	.+230    	; 0x15f0 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    150a:	a8 e3       	ldi	r26, 0x38	; 56
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e8 e3       	ldi	r30, 0x38	; 56
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <GPIO_WritePin+0x11c>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <GPIO_WritePin+0x118>
    152c:	80 95       	com	r24
    152e:	84 23       	and	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	5e c0       	rjmp	.+188    	; 0x15f0 <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	a1 f4       	brne	.+40     	; 0x1562 <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    153a:	a5 e3       	ldi	r26, 0x35	; 53
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <GPIO_WritePin+0x14c>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <GPIO_WritePin+0x148>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	47 c0       	rjmp	.+142    	; 0x15f0 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <GPIO_WritePin+0x15e>
    1568:	43 c0       	rjmp	.+134    	; 0x15f0 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    156a:	a5 e3       	ldi	r26, 0x35	; 53
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e5 e3       	ldi	r30, 0x35	; 53
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <GPIO_WritePin+0x17c>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <GPIO_WritePin+0x178>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	2e c0       	rjmp	.+92     	; 0x15f0 <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    159a:	a2 e3       	ldi	r26, 0x32	; 50
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_WritePin+0x1ac>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_WritePin+0x1a8>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	88 23       	and	r24, r24
    15c6:	a1 f4       	brne	.+40     	; 0x15f0 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    15c8:	a2 e3       	ldi	r26, 0x32	; 50
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e2 e3       	ldi	r30, 0x32	; 50
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_WritePin+0x1da>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_WritePin+0x1d6>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
                break;

        }
    }
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_TogglePin+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_TogglePin+0x8>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	08 f0       	brcs	.+2      	; 0x1618 <GPIO_TogglePin+0x18>
    1616:	72 c0       	rjmp	.+228    	; 0x16fc <GPIO_TogglePin+0xfc>
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	88 30       	cpi	r24, 0x08	; 8
    161c:	08 f0       	brcs	.+2      	; 0x1620 <GPIO_TogglePin+0x20>
    161e:	6e c0       	rjmp	.+220    	; 0x16fc <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	2b 83       	std	Y+3, r18	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	49 f1       	breq	.+82     	; 0x1686 <GPIO_TogglePin+0x86>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <GPIO_TogglePin+0x48>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <GPIO_TogglePin+0x5e>
    1646:	5a c0       	rjmp	.+180    	; 0x16fc <GPIO_TogglePin+0xfc>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	71 f1       	breq	.+92     	; 0x16ae <GPIO_TogglePin+0xae>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	e9 f1       	breq	.+122    	; 0x16d6 <GPIO_TogglePin+0xd6>
    165c:	4f c0       	rjmp	.+158    	; 0x16fc <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    165e:	ab e3       	ldi	r26, 0x3B	; 59
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <GPIO_TogglePin+0x7c>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <GPIO_TogglePin+0x78>
    1680:	84 27       	eor	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	3b c0       	rjmp	.+118    	; 0x16fc <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_TogglePin+0xa4>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_TogglePin+0xa0>
    16a8:	84 27       	eor	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	27 c0       	rjmp	.+78     	; 0x16fc <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    16ae:	a5 e3       	ldi	r26, 0x35	; 53
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_TogglePin+0xcc>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_TogglePin+0xc8>
    16d0:	84 27       	eor	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    16d6:	a2 e3       	ldi	r26, 0x32	; 50
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <GPIO_TogglePin+0xf4>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <GPIO_TogglePin+0xf0>
    16f8:	84 27       	eor	r24, r20
    16fa:	8c 93       	st	X, r24
                break;

        }
    }

}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <GPIO_SetPortDirection+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <GPIO_SetPortDirection+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	08 f0       	brcs	.+2      	; 0x1722 <GPIO_SetPortDirection+0x18>
    1720:	96 c0       	rjmp	.+300    	; 0x184e <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3c 83       	std	Y+4, r19	; 0x04
    172a:	2b 83       	std	Y+3, r18	; 0x03
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	a9 f1       	breq	.+106    	; 0x17a0 <GPIO_SetPortDirection+0x96>
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <GPIO_SetPortDirection+0x40>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	71 f0       	breq	.+28     	; 0x1764 <GPIO_SetPortDirection+0x5a>
    1748:	82 c0       	rjmp	.+260    	; 0x184e <GPIO_SetPortDirection+0x144>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <GPIO_SetPortDirection+0x4c>
    1754:	43 c0       	rjmp	.+134    	; 0x17dc <GPIO_SetPortDirection+0xd2>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <GPIO_SetPortDirection+0x58>
    1760:	5a c0       	rjmp	.+180    	; 0x1816 <GPIO_SetPortDirection+0x10c>
    1762:	75 c0       	rjmp	.+234    	; 0x184e <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	88 23       	and	r24, r24
    1768:	39 f4       	brne	.+14     	; 0x1778 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    176a:	ea e3       	ldi	r30, 0x3A	; 58
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	10 82       	st	Z, r1
    1776:	6b c0       	rjmp	.+214    	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	41 f4       	brne	.+16     	; 0x178e <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	80 83       	st	Z, r24
    178c:	60 c0       	rjmp	.+192    	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	8f 3f       	cpi	r24, 0xFF	; 255
    1792:	09 f0       	breq	.+2      	; 0x1796 <GPIO_SetPortDirection+0x8c>
    1794:	5c c0       	rjmp	.+184    	; 0x184e <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1796:	ea e3       	ldi	r30, 0x3A	; 58
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	80 83       	st	Z, r24
    179e:	57 c0       	rjmp	.+174    	; 0x184e <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	88 23       	and	r24, r24
    17a4:	39 f4       	brne	.+14     	; 0x17b4 <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    17a6:	e7 e3       	ldi	r30, 0x37	; 55
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	10 82       	st	Z, r1
    17b2:	4d c0       	rjmp	.+154    	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	41 f4       	brne	.+16     	; 0x17ca <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    17ba:	e7 e3       	ldi	r30, 0x37	; 55
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	80 83       	st	Z, r24
    17c8:	42 c0       	rjmp	.+132    	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	8f 3f       	cpi	r24, 0xFF	; 255
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <GPIO_SetPortDirection+0xc8>
    17d0:	3e c0       	rjmp	.+124    	; 0x184e <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    17d2:	e7 e3       	ldi	r30, 0x37	; 55
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	80 83       	st	Z, r24
    17da:	39 c0       	rjmp	.+114    	; 0x184e <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	88 23       	and	r24, r24
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    17e2:	e4 e3       	ldi	r30, 0x34	; 52
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    17e8:	e5 e3       	ldi	r30, 0x35	; 53
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	10 82       	st	Z, r1
    17ee:	2f c0       	rjmp	.+94     	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	41 f4       	brne	.+16     	; 0x1806 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    17f6:	e4 e3       	ldi	r30, 0x34	; 52
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    17fc:	e5 e3       	ldi	r30, 0x35	; 53
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 83       	st	Z, r24
    1804:	24 c0       	rjmp	.+72     	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	8f 3f       	cpi	r24, 0xFF	; 255
    180a:	09 f5       	brne	.+66     	; 0x184e <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    180c:	e4 e3       	ldi	r30, 0x34	; 52
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	80 83       	st	Z, r24
    1814:	1c c0       	rjmp	.+56     	; 0x184e <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	88 23       	and	r24, r24
    181a:	39 f4       	brne	.+14     	; 0x182a <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    181c:	e1 e3       	ldi	r30, 0x31	; 49
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	10 82       	st	Z, r1
    1828:	12 c0       	rjmp	.+36     	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	41 f4       	brne	.+16     	; 0x1840 <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    1830:	e1 e3       	ldi	r30, 0x31	; 49
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    1836:	e2 e3       	ldi	r30, 0x32	; 50
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	8f ef       	ldi	r24, 0xFF	; 255
    183c:	80 83       	st	Z, r24
    183e:	07 c0       	rjmp	.+14     	; 0x184e <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	8f 3f       	cpi	r24, 0xFF	; 255
    1844:	21 f4       	brne	.+8      	; 0x184e <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    1846:	e1 e3       	ldi	r30, 0x31	; 49
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <GPIO_ReadPort+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <GPIO_ReadPort+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    186a:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	90 f5       	brcc	.+100    	; 0x18d6 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3c 83       	std	Y+4, r19	; 0x04
    187a:	2b 83       	std	Y+3, r18	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	d1 f0       	breq	.+52     	; 0x18ba <GPIO_ReadPort+0x5e>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	2c f4       	brge	.+10     	; 0x189a <GPIO_ReadPort+0x3e>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	61 f0       	breq	.+24     	; 0x18b0 <GPIO_ReadPort+0x54>
    1898:	1e c0       	rjmp	.+60     	; 0x18d6 <GPIO_ReadPort+0x7a>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	81 f0       	breq	.+32     	; 0x18c4 <GPIO_ReadPort+0x68>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	81 f0       	breq	.+32     	; 0x18ce <GPIO_ReadPort+0x72>
    18ae:	13 c0       	rjmp	.+38     	; 0x18d6 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    18b0:	e9 e3       	ldi	r30, 0x39	; 57
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    18ba:	e6 e3       	ldi	r30, 0x36	; 54
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	09 c0       	rjmp	.+18     	; 0x18d6 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    18c4:	e3 e3       	ldi	r30, 0x33	; 51
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    18ce:	e0 e3       	ldi	r30, 0x30	; 48
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <GPIO_WritePort+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <GPIO_WritePort+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	90 f5       	brcc	.+100    	; 0x1960 <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3c 83       	std	Y+4, r19	; 0x04
    1904:	2b 83       	std	Y+3, r18	; 0x03
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	91 05       	cpc	r25, r1
    190e:	d1 f0       	breq	.+52     	; 0x1944 <GPIO_WritePort+0x5e>
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	3c 81       	ldd	r19, Y+4	; 0x04
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	2c f4       	brge	.+10     	; 0x1924 <GPIO_WritePort+0x3e>
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	61 f0       	breq	.+24     	; 0x193a <GPIO_WritePort+0x54>
    1922:	1e c0       	rjmp	.+60     	; 0x1960 <GPIO_WritePort+0x7a>
    1924:	2b 81       	ldd	r18, Y+3	; 0x03
    1926:	3c 81       	ldd	r19, Y+4	; 0x04
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	81 f0       	breq	.+32     	; 0x194e <GPIO_WritePort+0x68>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	91 05       	cpc	r25, r1
    1936:	81 f0       	breq	.+32     	; 0x1958 <GPIO_WritePort+0x72>
    1938:	13 c0       	rjmp	.+38     	; 0x1960 <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    193a:	eb e3       	ldi	r30, 0x3B	; 59
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	80 83       	st	Z, r24
    1942:	0e c0       	rjmp	.+28     	; 0x1960 <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1944:	e8 e3       	ldi	r30, 0x38	; 56
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	80 83       	st	Z, r24
    194c:	09 c0       	rjmp	.+18     	; 0x1960 <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    194e:	e5 e3       	ldi	r30, 0x35	; 53
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	80 83       	st	Z, r24
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1958:	e2 e3       	ldi	r30, 0x32	; 50
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <GPIO_TogglePort+0x6>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	08 f0       	brcs	.+2      	; 0x1984 <GPIO_TogglePort+0x16>
    1982:	3e c0       	rjmp	.+124    	; 0x1a00 <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3b 83       	std	Y+3, r19	; 0x03
    198c:	2a 83       	std	Y+2, r18	; 0x02
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	91 05       	cpc	r25, r1
    1996:	e9 f0       	breq	.+58     	; 0x19d2 <GPIO_TogglePort+0x64>
    1998:	2a 81       	ldd	r18, Y+2	; 0x02
    199a:	3b 81       	ldd	r19, Y+3	; 0x03
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	2c f4       	brge	.+10     	; 0x19ac <GPIO_TogglePort+0x3e>
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <GPIO_TogglePort+0x54>
    19aa:	2a c0       	rjmp	.+84     	; 0x1a00 <GPIO_TogglePort+0x92>
    19ac:	2a 81       	ldd	r18, Y+2	; 0x02
    19ae:	3b 81       	ldd	r19, Y+3	; 0x03
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	b1 f0       	breq	.+44     	; 0x19e2 <GPIO_TogglePort+0x74>
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	91 05       	cpc	r25, r1
    19be:	c9 f0       	breq	.+50     	; 0x19f2 <GPIO_TogglePort+0x84>
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    19c2:	ab e3       	ldi	r26, 0x3B	; 59
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	eb e3       	ldi	r30, 0x3B	; 59
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	80 95       	com	r24
    19ce:	8c 93       	st	X, r24
    19d0:	17 c0       	rjmp	.+46     	; 0x1a00 <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    19d2:	a8 e3       	ldi	r26, 0x38	; 56
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e8 e3       	ldi	r30, 0x38	; 56
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 95       	com	r24
    19de:	8c 93       	st	X, r24
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    19e2:	a5 e3       	ldi	r26, 0x35	; 53
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e5 e3       	ldi	r30, 0x35	; 53
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 95       	com	r24
    19ee:	8c 93       	st	X, r24
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    19f2:	a2 e3       	ldi	r26, 0x32	; 50
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e2 e3       	ldi	r30, 0x32	; 50
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 95       	com	r24
    19fe:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	2f 93       	push	r18
    1a18:	3f 93       	push	r19
    1a1a:	4f 93       	push	r20
    1a1c:	5f 93       	push	r21
    1a1e:	6f 93       	push	r22
    1a20:	7f 93       	push	r23
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
    1a26:	af 93       	push	r26
    1a28:	bf 93       	push	r27
    1a2a:	ef 93       	push	r30
    1a2c:	ff 93       	push	r31
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    1a36:	80 91 04 02 	lds	r24, 0x0204
    1a3a:	90 91 05 02 	lds	r25, 0x0205
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    1a42:	e0 91 04 02 	lds	r30, 0x0204
    1a46:	f0 91 05 02 	lds	r31, 0x0205
    1a4a:	09 95       	icall
    }
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <__vector_2>:

ISR(INT1)
{
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	2f 93       	push	r18
    1a7e:	3f 93       	push	r19
    1a80:	4f 93       	push	r20
    1a82:	5f 93       	push	r21
    1a84:	6f 93       	push	r22
    1a86:	7f 93       	push	r23
    1a88:	8f 93       	push	r24
    1a8a:	9f 93       	push	r25
    1a8c:	af 93       	push	r26
    1a8e:	bf 93       	push	r27
    1a90:	ef 93       	push	r30
    1a92:	ff 93       	push	r31
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    1a9c:	80 91 06 02 	lds	r24, 0x0206
    1aa0:	90 91 07 02 	lds	r25, 0x0207
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    1aa8:	e0 91 06 02 	lds	r30, 0x0206
    1aac:	f0 91 07 02 	lds	r31, 0x0207
    1ab0:	09 95       	icall
    }
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <__vector_3>:

ISR(INT2)
{
    1ad8:	1f 92       	push	r1
    1ada:	0f 92       	push	r0
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	0f 92       	push	r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	6f 93       	push	r22
    1aec:	7f 93       	push	r23
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	af 93       	push	r26
    1af4:	bf 93       	push	r27
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    1b02:	80 91 08 02 	lds	r24, 0x0208
    1b06:	90 91 09 02 	lds	r25, 0x0209
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	29 f0       	breq	.+10     	; 0x1b18 <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    1b0e:	e0 91 08 02 	lds	r30, 0x0208
    1b12:	f0 91 09 02 	lds	r31, 0x0209
    1b16:	09 95       	icall
    }
}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	ff 91       	pop	r31
    1b1e:	ef 91       	pop	r30
    1b20:	bf 91       	pop	r27
    1b22:	af 91       	pop	r26
    1b24:	9f 91       	pop	r25
    1b26:	8f 91       	pop	r24
    1b28:	7f 91       	pop	r23
    1b2a:	6f 91       	pop	r22
    1b2c:	5f 91       	pop	r21
    1b2e:	4f 91       	pop	r20
    1b30:	3f 91       	pop	r19
    1b32:	2f 91       	pop	r18
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	0f 90       	pop	r0
    1b3a:	1f 90       	pop	r1
    1b3c:	18 95       	reti

00001b3e <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <INT0_SetCallBack+0x6>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	90 93 05 02 	sts	0x0205, r25
    1b54:	80 93 04 02 	sts	0x0204, r24
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <INT1_SetCallBack+0x6>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	90 93 07 02 	sts	0x0207, r25
    1b78:	80 93 06 02 	sts	0x0206, r24
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <INT2_SetCallBack+0x6>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	90 93 09 02 	sts	0x0209, r25
    1b9c:	80 93 08 02 	sts	0x0208, r24
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <INT0_init+0x6>
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	62 e0       	ldi	r22, 0x02	; 2
    1bbc:	4a 81       	ldd	r20, Y+2	; 0x02
    1bbe:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    1bc2:	a5 e5       	ldi	r26, 0x55	; 85
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e5 e5       	ldi	r30, 0x55	; 85
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	98 2f       	mov	r25, r24
    1bce:	9c 7f       	andi	r25, 0xFC	; 252
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	89 2b       	or	r24, r25
    1bd4:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    1bd6:	ab e5       	ldi	r26, 0x5B	; 91
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e5       	ldi	r30, 0x5B	; 91
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 64       	ori	r24, 0x40	; 64
    1be2:	8c 93       	st	X, r24
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <INT1_init+0x6>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	4a 81       	ldd	r20, Y+2	; 0x02
    1c02:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    1c06:	a5 e5       	ldi	r26, 0x55	; 85
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e5       	ldi	r30, 0x55	; 85
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	23 7f       	andi	r18, 0xF3	; 243
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	82 2b       	or	r24, r18
    1c24:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    1c26:	ab e5       	ldi	r26, 0x5B	; 91
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	eb e5       	ldi	r30, 0x5B	; 91
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 68       	ori	r24, 0x80	; 128
    1c32:	8c 93       	st	X, r24
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <INT2_init+0x6>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	4a 81       	ldd	r20, Y+2	; 0x02
    1c52:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	82 30       	cpi	r24, 0x02	; 2
    1c5a:	41 f4       	brne	.+16     	; 0x1c6c <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    1c5c:	a4 e5       	ldi	r26, 0x54	; 84
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e4 e5       	ldi	r30, 0x54	; 84
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8f 7b       	andi	r24, 0xBF	; 191
    1c68:	8c 93       	st	X, r24
    1c6a:	0a c0       	rjmp	.+20     	; 0x1c80 <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	39 f4       	brne	.+14     	; 0x1c80 <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    1c72:	a4 e5       	ldi	r26, 0x54	; 84
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e4 e5       	ldi	r30, 0x54	; 84
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 64       	ori	r24, 0x40	; 64
    1c7e:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    1c80:	ab e5       	ldi	r26, 0x5B	; 91
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	eb e5       	ldi	r30, 0x5B	; 91
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <INT0_DeInit>:


void INT0_DeInit(void)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    1ca0:	ab e5       	ldi	r26, 0x5B	; 91
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	eb e5       	ldi	r30, 0x5B	; 91
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f 7b       	andi	r24, 0xBF	; 191
    1cac:	8c 93       	st	X, r24
}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <INT1_DeInit>:


void INT1_DeInit(void)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    1cbc:	ab e5       	ldi	r26, 0x5B	; 91
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	eb e5       	ldi	r30, 0x5B	; 91
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8f 77       	andi	r24, 0x7F	; 127
    1cc8:	8c 93       	st	X, r24
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <INT2_DeInit>:

void INT2_DeInit(void)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    1cd8:	ab e5       	ldi	r26, 0x5B	; 91
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e5       	ldi	r30, 0x5B	; 91
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8f 7d       	andi	r24, 0xDF	; 223
    1ce4:	8c 93       	st	X, r24
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	87 70       	andi	r24, 0x07	; 7
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    1cfe:	a7 e2       	ldi	r26, 0x27	; 39
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e7 e2       	ldi	r30, 0x27	; 39
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	98 2f       	mov	r25, r24
    1d0a:	90 7e       	andi	r25, 0xE0	; 224
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	89 2b       	or	r24, r25
    1d10:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    1d12:	a6 e2       	ldi	r26, 0x26	; 38
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e6 e2       	ldi	r30, 0x26	; 38
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 64       	ori	r24, 0x40	; 64
    1d1e:	8c 93       	st	X, r24
}
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <ADC_Init>:

void ADC_Init(void)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    1d30:	a7 e2       	ldi	r26, 0x27	; 39
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e7 e2       	ldi	r30, 0x27	; 39
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	2f 73       	andi	r18, 0x3F	; 63
    1d3e:	80 91 ed 01 	lds	r24, 0x01ED
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	00 24       	eor	r0, r0
    1d48:	96 95       	lsr	r25
    1d4a:	87 95       	ror	r24
    1d4c:	07 94       	ror	r0
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	07 94       	ror	r0
    1d54:	98 2f       	mov	r25, r24
    1d56:	80 2d       	mov	r24, r0
    1d58:	82 2b       	or	r24, r18
    1d5a:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    1d5c:	80 91 ee 01 	lds	r24, 0x01EE
    1d60:	88 23       	and	r24, r24
    1d62:	41 f4       	brne	.+16     	; 0x1d74 <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    1d64:	a7 e2       	ldi	r26, 0x27	; 39
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e7 e2       	ldi	r30, 0x27	; 39
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8f 7d       	andi	r24, 0xDF	; 223
    1d70:	8c 93       	st	X, r24
    1d72:	0b c0       	rjmp	.+22     	; 0x1d8a <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    1d74:	80 91 ee 01 	lds	r24, 0x01EE
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	39 f4       	brne	.+14     	; 0x1d8a <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    1d7c:	a7 e2       	ldi	r26, 0x27	; 39
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e7 e2       	ldi	r30, 0x27	; 39
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 62       	ori	r24, 0x20	; 32
    1d88:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    1d8a:	a6 e2       	ldi	r26, 0x26	; 38
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e6 e2       	ldi	r30, 0x26	; 38
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 68       	ori	r24, 0x80	; 128
    1d96:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    1d98:	80 91 ec 01 	lds	r24, 0x01EC
    1d9c:	88 23       	and	r24, r24
    1d9e:	99 f1       	breq	.+102    	; 0x1e06 <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    1da0:	80 91 ec 01 	lds	r24, 0x01EC
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	79 f4       	brne	.+30     	; 0x1dc6 <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    1da8:	a6 e2       	ldi	r26, 0x26	; 38
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e6 e2       	ldi	r30, 0x26	; 38
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    1db6:	a0 e5       	ldi	r26, 0x50	; 80
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e0 e5       	ldi	r30, 0x50	; 80
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8f 70       	andi	r24, 0x0F	; 15
    1dc2:	8c 93       	st	X, r24
    1dc4:	20 c0       	rjmp	.+64     	; 0x1e06 <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    1dc6:	80 91 ec 01 	lds	r24, 0x01EC
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	e1 f4       	brne	.+56     	; 0x1e06 <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    1dce:	a6 e2       	ldi	r26, 0x26	; 38
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e6 e2       	ldi	r30, 0x26	; 38
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 62       	ori	r24, 0x20	; 32
    1dda:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    1ddc:	a0 e5       	ldi	r26, 0x50	; 80
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e0 e5       	ldi	r30, 0x50	; 80
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	28 2f       	mov	r18, r24
    1de8:	2f 70       	andi	r18, 0x0F	; 15
    1dea:	80 91 f0 01 	lds	r24, 0x01F0
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	82 95       	swap	r24
    1df8:	92 95       	swap	r25
    1dfa:	90 7f       	andi	r25, 0xF0	; 240
    1dfc:	98 27       	eor	r25, r24
    1dfe:	80 7f       	andi	r24, 0xF0	; 240
    1e00:	98 27       	eor	r25, r24
    1e02:	82 2b       	or	r24, r18
    1e04:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    1e06:	a6 e2       	ldi	r26, 0x26	; 38
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e6 e2       	ldi	r30, 0x26	; 38
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	98 2f       	mov	r25, r24
    1e12:	98 7f       	andi	r25, 0xF8	; 248
    1e14:	80 91 ef 01 	lds	r24, 0x01EF
    1e18:	87 70       	andi	r24, 0x07	; 7
    1e1a:	89 2b       	or	r24, r25
    1e1c:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    1e1e:	a6 e2       	ldi	r26, 0x26	; 38
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e6 e2       	ldi	r30, 0x26	; 38
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	87 7f       	andi	r24, 0xF7	; 247
    1e2a:	8c 93       	st	X, r24
    #endif
        
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	0e 94 76 0e 	call	0x1cec	; 0x1cec <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    1e44:	e6 e2       	ldi	r30, 0x26	; 38
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	80 71       	andi	r24, 0x10	; 16
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	b9 f3       	breq	.-18     	; 0x1e44 <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    1e56:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <ADC_ReadConversionRegister>
    1e5a:	90 93 0b 02 	sts	0x020B, r25
    1e5e:	80 93 0a 02 	sts	0x020A, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    1e62:	a6 e2       	ldi	r26, 0x26	; 38
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e6 e2       	ldi	r30, 0x26	; 38
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 61       	ori	r24, 0x10	; 16
    1e6e:	8c 93       	st	X, r24
    return ADC_conversion_value;
    1e70:	80 91 0a 02 	lds	r24, 0x020A
    1e74:	90 91 0b 02 	lds	r25, 0x020B
}
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <ADC_OnlyStartConversionGeneral>
}
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <ADC_ReadConversionRegister+0x6>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    1ea4:	1a 82       	std	Y+2, r1	; 0x02
    1ea6:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    1ea8:	80 91 ee 01 	lds	r24, 0x01EE
    1eac:	88 23       	and	r24, r24
    1eae:	b9 f4       	brne	.+46     	; 0x1ede <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    1eb0:	e4 e2       	ldi	r30, 0x24	; 36
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    1ebe:	e5 e2       	ldi	r30, 0x25	; 37
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	83 70       	andi	r24, 0x03	; 3
    1eca:	90 70       	andi	r25, 0x00	; 0
    1ecc:	38 2f       	mov	r19, r24
    1ece:	22 27       	eor	r18, r18
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	82 2b       	or	r24, r18
    1ed6:	93 2b       	or	r25, r19
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	20 c0       	rjmp	.+64     	; 0x1f1e <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    1ede:	80 91 ee 01 	lds	r24, 0x01EE
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	e1 f4       	brne	.+56     	; 0x1f1e <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    1ee6:	e4 e2       	ldi	r30, 0x24	; 36
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	82 95       	swap	r24
    1eee:	86 95       	lsr	r24
    1ef0:	86 95       	lsr	r24
    1ef2:	83 70       	andi	r24, 0x03	; 3
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    1efe:	e5 e2       	ldi	r30, 0x25	; 37
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9c 01       	movw	r18, r24
    1f0a:	22 0f       	add	r18, r18
    1f0c:	33 1f       	adc	r19, r19
    1f0e:	22 0f       	add	r18, r18
    1f10:	33 1f       	adc	r19, r19
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	82 2b       	or	r24, r18
    1f18:	93 2b       	or	r25, r19
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	0f 92       	push	r0
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	69 81       	ldd	r22, Y+1	; 0x01
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>

}
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <POT_GetValue+0x6>
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	89 83       	std	Y+1, r24	; 0x01
    
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <LED_Init+0x6>
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	6a 81       	ldd	r22, Y+2	; 0x02
    1f76:	42 e0       	ldi	r20, 0x02	; 2
    1f78:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <LED_OnOffPositiveLogic+0x6>
    1f8c:	0f 92       	push	r0
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	6a 83       	std	Y+2, r22	; 0x02
    1f96:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	88 23       	and	r24, r24
    1f9c:	31 f4       	brne	.+12     	; 0x1faa <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	6a 81       	ldd	r22, Y+2	; 0x02
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	29 f4       	brne	.+10     	; 0x1fba <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    }


}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <LED_OnOffNegativeLogic+0x6>
    1fcc:	0f 92       	push	r0
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	6a 83       	std	Y+2, r22	; 0x02
    1fd6:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	88 23       	and	r24, r24
    1fdc:	31 f4       	brne	.+12     	; 0x1fea <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	6a 81       	ldd	r22, Y+2	; 0x02
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    1fe8:	08 c0       	rjmp	.+16     	; 0x1ffa <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	29 f4       	brne	.+10     	; 0x1ffa <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    }


}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <LED_Toggle+0x6>
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	6a 81       	ldd	r22, Y+2	; 0x02
    2018:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_TogglePin>
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    /*  Configure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	63 e0       	ldi	r22, 0x03	; 3
    2032:	42 e0       	ldi	r20, 0x02	; 2
    2034:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  Configure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  Configure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	42 e0       	ldi	r20, 0x02	; 2
    203e:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	42 e0       	ldi	r20, 0x02	; 2
    2048:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	62 e0       	ldi	r22, 0x02	; 2
    205a:	42 e0       	ldi	r20, 0x02	; 2
    205c:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	64 e0       	ldi	r22, 0x04	; 4
    2064:	42 e0       	ldi	r20, 0x02	; 2
    2066:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    206a:	82 e0       	ldi	r24, 0x02	; 2
    206c:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    2070:	88 e2       	ldi	r24, 0x28	; 40
    2072:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2076:	8c e0       	ldi	r24, 0x0C	; 12
    2078:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	c4 56       	subi	r28, 0x64	; 100
    2096:	d0 40       	sbci	r29, 0x00	; 0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	fe 01       	movw	r30, r28
    20a4:	ec 59       	subi	r30, 0x9C	; 156
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	63 e0       	ldi	r22, 0x03	; 3
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    20b4:	fe 01       	movw	r30, r28
    20b6:	e1 5a       	subi	r30, 0xA1	; 161
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e8       	ldi	r26, 0x80	; 128
    20c0:	bf e3       	ldi	r27, 0x3F	; 63
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	8e 01       	movw	r16, r28
    20cc:	05 5a       	subi	r16, 0xA5	; 165
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	e1 5a       	subi	r30, 0xA1	; 161
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a e7       	ldi	r20, 0x7A	; 122
    20e4:	53 e4       	ldi	r21, 0x43	; 67
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e5 5a       	subi	r30, 0xA5	; 165
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	44 f4       	brge	.+16     	; 0x2126 <LCD_SendCommand+0x9e>
		__ticks = 1;
    2116:	fe 01       	movw	r30, r28
    2118:	e7 5a       	subi	r30, 0xA7	; 167
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	64 c0       	rjmp	.+200    	; 0x21ee <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    2126:	fe 01       	movw	r30, r28
    2128:	e5 5a       	subi	r30, 0xA5	; 165
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	0c f0       	brlt	.+2      	; 0x2146 <LCD_SendCommand+0xbe>
    2144:	43 c0       	rjmp	.+134    	; 0x21cc <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	fe 01       	movw	r30, r28
    2148:	e1 5a       	subi	r30, 0xA1	; 161
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8e 01       	movw	r16, r28
    2166:	07 5a       	subi	r16, 0xA7	; 167
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    217c:	1f c0       	rjmp	.+62     	; 0x21bc <LCD_SendCommand+0x134>
    217e:	fe 01       	movw	r30, r28
    2180:	e9 5a       	subi	r30, 0xA9	; 169
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	89 e1       	ldi	r24, 0x19	; 25
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    218c:	fe 01       	movw	r30, r28
    218e:	e9 5a       	subi	r30, 0xA9	; 169
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_SendCommand+0x10e>
    219a:	fe 01       	movw	r30, r28
    219c:	e9 5a       	subi	r30, 0xA9	; 169
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	de 01       	movw	r26, r28
    21a6:	a7 5a       	subi	r26, 0xA7	; 167
    21a8:	bf 4f       	sbci	r27, 0xFF	; 255
    21aa:	fe 01       	movw	r30, r28
    21ac:	e7 5a       	subi	r30, 0xA7	; 167
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	9c 93       	st	X, r25
    21ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	fe 01       	movw	r30, r28
    21be:	e7 5a       	subi	r30, 0xA7	; 167
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	d1 f6       	brne	.-76     	; 0x217e <LCD_SendCommand+0xf6>
    21ca:	27 c0       	rjmp	.+78     	; 0x221a <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	8e 01       	movw	r16, r28
    21ce:	07 5a       	subi	r16, 0xA7	; 167
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	fe 01       	movw	r30, r28
    21d4:	e5 5a       	subi	r30, 0xA5	; 165
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	f8 01       	movw	r30, r16
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    21ee:	de 01       	movw	r26, r28
    21f0:	ab 5a       	subi	r26, 0xAB	; 171
    21f2:	bf 4f       	sbci	r27, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5a       	subi	r30, 0xA7	; 167
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	8d 93       	st	X+, r24
    2200:	9c 93       	st	X, r25
    2202:	fe 01       	movw	r30, r28
    2204:	eb 5a       	subi	r30, 0xAB	; 171
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_SendCommand+0x184>
    2210:	fe 01       	movw	r30, r28
    2212:	eb 5a       	subi	r30, 0xAB	; 171
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	62 e0       	ldi	r22, 0x02	; 2
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2224:	fe 01       	movw	r30, r28
    2226:	ef 5a       	subi	r30, 0xAF	; 175
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e8       	ldi	r26, 0x80	; 128
    2230:	bf e3       	ldi	r27, 0x3F	; 63
    2232:	80 83       	st	Z, r24
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	a2 83       	std	Z+2, r26	; 0x02
    2238:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	8e 01       	movw	r16, r28
    223c:	03 5b       	subi	r16, 0xB3	; 179
    223e:	1f 4f       	sbci	r17, 0xFF	; 255
    2240:	fe 01       	movw	r30, r28
    2242:	ef 5a       	subi	r30, 0xAF	; 175
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a e7       	ldi	r20, 0x7A	; 122
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	f8 01       	movw	r30, r16
    2260:	80 83       	st	Z, r24
    2262:	91 83       	std	Z+1, r25	; 0x01
    2264:	a2 83       	std	Z+2, r26	; 0x02
    2266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2268:	fe 01       	movw	r30, r28
    226a:	e3 5b       	subi	r30, 0xB3	; 179
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	44 f4       	brge	.+16     	; 0x2296 <LCD_SendCommand+0x20e>
		__ticks = 1;
    2286:	fe 01       	movw	r30, r28
    2288:	e5 5b       	subi	r30, 0xB5	; 181
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	64 c0       	rjmp	.+200    	; 0x235e <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    2296:	fe 01       	movw	r30, r28
    2298:	e3 5b       	subi	r30, 0xB3	; 179
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	82 81       	ldd	r24, Z+2	; 0x02
    22a2:	93 81       	ldd	r25, Z+3	; 0x03
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	0c f0       	brlt	.+2      	; 0x22b6 <LCD_SendCommand+0x22e>
    22b4:	43 c0       	rjmp	.+134    	; 0x233c <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	fe 01       	movw	r30, r28
    22b8:	ef 5a       	subi	r30, 0xAF	; 175
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8e 01       	movw	r16, r28
    22d6:	05 5b       	subi	r16, 0xB5	; 181
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	f8 01       	movw	r30, r16
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
    22ec:	1f c0       	rjmp	.+62     	; 0x232c <LCD_SendCommand+0x2a4>
    22ee:	fe 01       	movw	r30, r28
    22f0:	e7 5b       	subi	r30, 0xB7	; 183
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	89 e1       	ldi	r24, 0x19	; 25
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	fe 01       	movw	r30, r28
    22fe:	e7 5b       	subi	r30, 0xB7	; 183
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_SendCommand+0x27e>
    230a:	fe 01       	movw	r30, r28
    230c:	e7 5b       	subi	r30, 0xB7	; 183
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	de 01       	movw	r26, r28
    2316:	a5 5b       	subi	r26, 0xB5	; 181
    2318:	bf 4f       	sbci	r27, 0xFF	; 255
    231a:	fe 01       	movw	r30, r28
    231c:	e5 5b       	subi	r30, 0xB5	; 181
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	11 96       	adiw	r26, 0x01	; 1
    2328:	9c 93       	st	X, r25
    232a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	fe 01       	movw	r30, r28
    232e:	e5 5b       	subi	r30, 0xB5	; 181
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 81       	ld	r24, Z
    2334:	91 81       	ldd	r25, Z+1	; 0x01
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	d1 f6       	brne	.-76     	; 0x22ee <LCD_SendCommand+0x266>
    233a:	27 c0       	rjmp	.+78     	; 0x238a <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	8e 01       	movw	r16, r28
    233e:	05 5b       	subi	r16, 0xB5	; 181
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	fe 01       	movw	r30, r28
    2344:	e3 5b       	subi	r30, 0xB3	; 179
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	f8 01       	movw	r30, r16
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
    235e:	de 01       	movw	r26, r28
    2360:	a9 5b       	subi	r26, 0xB9	; 185
    2362:	bf 4f       	sbci	r27, 0xFF	; 255
    2364:	fe 01       	movw	r30, r28
    2366:	e5 5b       	subi	r30, 0xB5	; 181
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	8d 93       	st	X+, r24
    2370:	9c 93       	st	X, r25
    2372:	fe 01       	movw	r30, r28
    2374:	e9 5b       	subi	r30, 0xB9	; 185
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	91 81       	ldd	r25, Z+1	; 0x01
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <LCD_SendCommand+0x2f4>
    2380:	fe 01       	movw	r30, r28
    2382:	e9 5b       	subi	r30, 0xB9	; 185
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    238a:	de 01       	movw	r26, r28
    238c:	ad 59       	subi	r26, 0x9D	; 157
    238e:	bf 4f       	sbci	r27, 0xFF	; 255
    2390:	fe 01       	movw	r30, r28
    2392:	ec 59       	subi	r30, 0x9C	; 156
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	82 95       	swap	r24
    239a:	8f 70       	andi	r24, 0x0F	; 15
    239c:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    239e:	fe 01       	movw	r30, r28
    23a0:	ed 59       	subi	r30, 0x9D	; 157
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	98 2f       	mov	r25, r24
    23a8:	91 70       	andi	r25, 0x01	; 1
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	49 2f       	mov	r20, r25
    23b0:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    23b4:	fe 01       	movw	r30, r28
    23b6:	ed 59       	subi	r30, 0x9D	; 157
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	86 95       	lsr	r24
    23be:	98 2f       	mov	r25, r24
    23c0:	91 70       	andi	r25, 0x01	; 1
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	61 e0       	ldi	r22, 0x01	; 1
    23c6:	49 2f       	mov	r20, r25
    23c8:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    23cc:	fe 01       	movw	r30, r28
    23ce:	ed 59       	subi	r30, 0x9D	; 157
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	86 95       	lsr	r24
    23d6:	86 95       	lsr	r24
    23d8:	98 2f       	mov	r25, r24
    23da:	91 70       	andi	r25, 0x01	; 1
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	62 e0       	ldi	r22, 0x02	; 2
    23e0:	49 2f       	mov	r20, r25
    23e2:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    23e6:	fe 01       	movw	r30, r28
    23e8:	ed 59       	subi	r30, 0x9D	; 157
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	86 95       	lsr	r24
    23f0:	86 95       	lsr	r24
    23f2:	86 95       	lsr	r24
    23f4:	98 2f       	mov	r25, r24
    23f6:	91 70       	andi	r25, 0x01	; 1
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	64 e0       	ldi	r22, 0x04	; 4
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2402:	fe 01       	movw	r30, r28
    2404:	ed 5b       	subi	r30, 0xBD	; 189
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	80 83       	st	Z, r24
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	a2 83       	std	Z+2, r26	; 0x02
    2416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	8e 01       	movw	r16, r28
    241a:	01 5c       	subi	r16, 0xC1	; 193
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	ed 5b       	subi	r30, 0xBD	; 189
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a e7       	ldi	r20, 0x7A	; 122
    2432:	53 e4       	ldi	r21, 0x43	; 67
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	f8 01       	movw	r30, r16
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2446:	fe 01       	movw	r30, r28
    2448:	ff 96       	adiw	r30, 0x3f	; 63
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_SendCommand+0x3e4>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9e af       	std	Y+62, r25	; 0x3e
    2468:	8d af       	std	Y+61, r24	; 0x3d
    246a:	46 c0       	rjmp	.+140    	; 0x24f8 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    246c:	fe 01       	movw	r30, r28
    246e:	ff 96       	adiw	r30, 0x3f	; 63
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	64 f5       	brge	.+88     	; 0x24e0 <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	ed 5b       	subi	r30, 0xBD	; 189
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e af       	std	Y+62, r25	; 0x3e
    24b4:	8d af       	std	Y+61, r24	; 0x3d
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <LCD_SendCommand+0x44e>
    24b8:	89 e1       	ldi	r24, 0x19	; 25
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9c af       	std	Y+60, r25	; 0x3c
    24be:	8b af       	std	Y+59, r24	; 0x3b
    24c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_SendCommand+0x43c>
    24c8:	9c af       	std	Y+60, r25	; 0x3c
    24ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9e af       	std	Y+62, r25	; 0x3e
    24d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <LCD_SendCommand+0x430>
    24de:	16 c0       	rjmp	.+44     	; 0x250c <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	fe 01       	movw	r30, r28
    24e2:	ff 96       	adiw	r30, 0x3f	; 63
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9e af       	std	Y+62, r25	; 0x3e
    24f6:	8d af       	std	Y+61, r24	; 0x3d
    24f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fc:	9a af       	std	Y+58, r25	; 0x3a
    24fe:	89 af       	std	Y+57, r24	; 0x39
    2500:	89 ad       	ldd	r24, Y+57	; 0x39
    2502:	9a ad       	ldd	r25, Y+58	; 0x3a
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_SendCommand+0x47c>
    2508:	9a af       	std	Y+58, r25	; 0x3a
    250a:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	8d ab       	std	Y+53, r24	; 0x35
    2520:	9e ab       	std	Y+54, r25	; 0x36
    2522:	af ab       	std	Y+55, r26	; 0x37
    2524:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6d a9       	ldd	r22, Y+53	; 0x35
    2528:	7e a9       	ldd	r23, Y+54	; 0x36
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	53 e4       	ldi	r21, 0x43	; 67
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	89 ab       	std	Y+49, r24	; 0x31
    2540:	9a ab       	std	Y+50, r25	; 0x32
    2542:	ab ab       	std	Y+51, r26	; 0x33
    2544:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2546:	69 a9       	ldd	r22, Y+49	; 0x31
    2548:	7a a9       	ldd	r23, Y+50	; 0x32
    254a:	8b a9       	ldd	r24, Y+51	; 0x33
    254c:	9c a9       	ldd	r25, Y+52	; 0x34
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	98 ab       	std	Y+48, r25	; 0x30
    2564:	8f a7       	std	Y+47, r24	; 0x2f
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    2568:	69 a9       	ldd	r22, Y+49	; 0x31
    256a:	7a a9       	ldd	r23, Y+50	; 0x32
    256c:	8b a9       	ldd	r24, Y+51	; 0x33
    256e:	9c a9       	ldd	r25, Y+52	; 0x34
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6d a9       	ldd	r22, Y+53	; 0x35
    2582:	7e a9       	ldd	r23, Y+54	; 0x36
    2584:	8f a9       	ldd	r24, Y+55	; 0x37
    2586:	98 ad       	ldd	r25, Y+56	; 0x38
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	98 ab       	std	Y+48, r25	; 0x30
    25a6:	8f a7       	std	Y+47, r24	; 0x2f
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_SendCommand+0x540>
    25aa:	89 e1       	ldi	r24, 0x19	; 25
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9e a7       	std	Y+46, r25	; 0x2e
    25b0:	8d a7       	std	Y+45, r24	; 0x2d
    25b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_SendCommand+0x52e>
    25ba:	9e a7       	std	Y+46, r25	; 0x2e
    25bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c0:	98 a9       	ldd	r25, Y+48	; 0x30
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	98 ab       	std	Y+48, r25	; 0x30
    25c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ca:	98 a9       	ldd	r25, Y+48	; 0x30
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_SendCommand+0x522>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	69 a9       	ldd	r22, Y+49	; 0x31
    25d4:	7a a9       	ldd	r23, Y+50	; 0x32
    25d6:	8b a9       	ldd	r24, Y+51	; 0x33
    25d8:	9c a9       	ldd	r25, Y+52	; 0x34
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	98 ab       	std	Y+48, r25	; 0x30
    25e4:	8f a7       	std	Y+47, r24	; 0x2f
    25e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ea:	9c a7       	std	Y+44, r25	; 0x2c
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
    25ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_SendCommand+0x56a>
    25f6:	9c a7       	std	Y+44, r25	; 0x2c
    25f8:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	8f a3       	std	Y+39, r24	; 0x27
    260e:	98 a7       	std	Y+40, r25	; 0x28
    2610:	a9 a7       	std	Y+41, r26	; 0x29
    2612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6f a1       	ldd	r22, Y+39	; 0x27
    2616:	78 a5       	ldd	r23, Y+40	; 0x28
    2618:	89 a5       	ldd	r24, Y+41	; 0x29
    261a:	9a a5       	ldd	r25, Y+42	; 0x2a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	53 e4       	ldi	r21, 0x43	; 67
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8b a3       	std	Y+35, r24	; 0x23
    262e:	9c a3       	std	Y+36, r25	; 0x24
    2630:	ad a3       	std	Y+37, r26	; 0x25
    2632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2634:	6b a1       	ldd	r22, Y+35	; 0x23
    2636:	7c a1       	ldd	r23, Y+36	; 0x24
    2638:	8d a1       	ldd	r24, Y+37	; 0x25
    263a:	9e a1       	ldd	r25, Y+38	; 0x26
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_SendCommand+0x5ce>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9a a3       	std	Y+34, r25	; 0x22
    2652:	89 a3       	std	Y+33, r24	; 0x21
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    2656:	6b a1       	ldd	r22, Y+35	; 0x23
    2658:	7c a1       	ldd	r23, Y+36	; 0x24
    265a:	8d a1       	ldd	r24, Y+37	; 0x25
    265c:	9e a1       	ldd	r25, Y+38	; 0x26
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6f a1       	ldd	r22, Y+39	; 0x27
    2670:	78 a5       	ldd	r23, Y+40	; 0x28
    2672:	89 a5       	ldd	r24, Y+41	; 0x29
    2674:	9a a5       	ldd	r25, Y+42	; 0x2a
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9a a3       	std	Y+34, r25	; 0x22
    2694:	89 a3       	std	Y+33, r24	; 0x21
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_SendCommand+0x62e>
    2698:	89 e1       	ldi	r24, 0x19	; 25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
    26a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a2:	98 a1       	ldd	r25, Y+32	; 0x20
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_SendCommand+0x61c>
    26a8:	98 a3       	std	Y+32, r25	; 0x20
    26aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	89 a1       	ldd	r24, Y+33	; 0x21
    26ae:	9a a1       	ldd	r25, Y+34	; 0x22
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9a a3       	std	Y+34, r25	; 0x22
    26b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	89 a1       	ldd	r24, Y+33	; 0x21
    26b8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_SendCommand+0x610>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9a a3       	std	Y+34, r25	; 0x22
    26d2:	89 a3       	std	Y+33, r24	; 0x21
    26d4:	89 a1       	ldd	r24, Y+33	; 0x21
    26d6:	9a a1       	ldd	r25, Y+34	; 0x22
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
    26dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_SendCommand+0x658>
    26e4:	9e 8f       	std	Y+30, r25	; 0x1e
    26e6:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    26e8:	de 01       	movw	r26, r28
    26ea:	ad 59       	subi	r26, 0x9D	; 157
    26ec:	bf 4f       	sbci	r27, 0xFF	; 255
    26ee:	fe 01       	movw	r30, r28
    26f0:	ec 59       	subi	r30, 0x9C	; 156
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 70       	andi	r24, 0x0F	; 15
    26f8:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    26fa:	fe 01       	movw	r30, r28
    26fc:	ed 59       	subi	r30, 0x9D	; 157
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	98 2f       	mov	r25, r24
    2704:	91 70       	andi	r25, 0x01	; 1
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	49 2f       	mov	r20, r25
    270c:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2710:	fe 01       	movw	r30, r28
    2712:	ed 59       	subi	r30, 0x9D	; 157
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	86 95       	lsr	r24
    271a:	98 2f       	mov	r25, r24
    271c:	91 70       	andi	r25, 0x01	; 1
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	49 2f       	mov	r20, r25
    2724:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2728:	fe 01       	movw	r30, r28
    272a:	ed 59       	subi	r30, 0x9D	; 157
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	86 95       	lsr	r24
    2732:	86 95       	lsr	r24
    2734:	98 2f       	mov	r25, r24
    2736:	91 70       	andi	r25, 0x01	; 1
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	49 2f       	mov	r20, r25
    273e:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2742:	fe 01       	movw	r30, r28
    2744:	ed 59       	subi	r30, 0x9D	; 157
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	86 95       	lsr	r24
    274c:	86 95       	lsr	r24
    274e:	86 95       	lsr	r24
    2750:	98 2f       	mov	r25, r24
    2752:	91 70       	andi	r25, 0x01	; 1
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	64 e0       	ldi	r22, 0x04	; 4
    2758:	49 2f       	mov	r20, r25
    275a:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	a0 e8       	ldi	r26, 0x80	; 128
    2764:	bf e3       	ldi	r27, 0x3F	; 63
    2766:	89 8f       	std	Y+25, r24	; 0x19
    2768:	9a 8f       	std	Y+26, r25	; 0x1a
    276a:	ab 8f       	std	Y+27, r26	; 0x1b
    276c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276e:	69 8d       	ldd	r22, Y+25	; 0x19
    2770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a e7       	ldi	r20, 0x7A	; 122
    277c:	53 e4       	ldi	r21, 0x43	; 67
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8d 8b       	std	Y+21, r24	; 0x15
    2788:	9e 8b       	std	Y+22, r25	; 0x16
    278a:	af 8b       	std	Y+23, r26	; 0x17
    278c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    278e:	6d 89       	ldd	r22, Y+21	; 0x15
    2790:	7e 89       	ldd	r23, Y+22	; 0x16
    2792:	8f 89       	ldd	r24, Y+23	; 0x17
    2794:	98 8d       	ldd	r25, Y+24	; 0x18
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e8       	ldi	r20, 0x80	; 128
    279c:	5f e3       	ldi	r21, 0x3F	; 63
    279e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a2:	88 23       	and	r24, r24
    27a4:	2c f4       	brge	.+10     	; 0x27b0 <LCD_SendCommand+0x728>
		__ticks = 1;
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9c 8b       	std	Y+20, r25	; 0x14
    27ac:	8b 8b       	std	Y+19, r24	; 0x13
    27ae:	3f c0       	rjmp	.+126    	; 0x282e <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    27b0:	6d 89       	ldd	r22, Y+21	; 0x15
    27b2:	7e 89       	ldd	r23, Y+22	; 0x16
    27b4:	8f 89       	ldd	r24, Y+23	; 0x17
    27b6:	98 8d       	ldd	r25, Y+24	; 0x18
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	3f ef       	ldi	r19, 0xFF	; 255
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	57 e4       	ldi	r21, 0x47	; 71
    27c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c4:	18 16       	cp	r1, r24
    27c6:	4c f5       	brge	.+82     	; 0x281a <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e2       	ldi	r20, 0x20	; 32
    27d6:	51 e4       	ldi	r21, 0x41	; 65
    27d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	9c 8b       	std	Y+20, r25	; 0x14
    27ee:	8b 8b       	std	Y+19, r24	; 0x13
    27f0:	0f c0       	rjmp	.+30     	; 0x2810 <LCD_SendCommand+0x788>
    27f2:	89 e1       	ldi	r24, 0x19	; 25
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9a 8b       	std	Y+18, r25	; 0x12
    27f8:	89 8b       	std	Y+17, r24	; 0x11
    27fa:	89 89       	ldd	r24, Y+17	; 0x11
    27fc:	9a 89       	ldd	r25, Y+18	; 0x12
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <LCD_SendCommand+0x776>
    2802:	9a 8b       	std	Y+18, r25	; 0x12
    2804:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2806:	8b 89       	ldd	r24, Y+19	; 0x13
    2808:	9c 89       	ldd	r25, Y+20	; 0x14
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	9c 8b       	std	Y+20, r25	; 0x14
    280e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2810:	8b 89       	ldd	r24, Y+19	; 0x13
    2812:	9c 89       	ldd	r25, Y+20	; 0x14
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	69 f7       	brne	.-38     	; 0x27f2 <LCD_SendCommand+0x76a>
    2818:	14 c0       	rjmp	.+40     	; 0x2842 <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281a:	6d 89       	ldd	r22, Y+21	; 0x15
    281c:	7e 89       	ldd	r23, Y+22	; 0x16
    281e:	8f 89       	ldd	r24, Y+23	; 0x17
    2820:	98 8d       	ldd	r25, Y+24	; 0x18
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9c 8b       	std	Y+20, r25	; 0x14
    282c:	8b 8b       	std	Y+19, r24	; 0x13
    282e:	8b 89       	ldd	r24, Y+19	; 0x13
    2830:	9c 89       	ldd	r25, Y+20	; 0x14
    2832:	98 8b       	std	Y+16, r25	; 0x10
    2834:	8f 87       	std	Y+15, r24	; 0x0f
    2836:	8f 85       	ldd	r24, Y+15	; 0x0f
    2838:	98 89       	ldd	r25, Y+16	; 0x10
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_SendCommand+0x7b2>
    283e:	98 8b       	std	Y+16, r25	; 0x10
    2840:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	62 e0       	ldi	r22, 0x02	; 2
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e8       	ldi	r26, 0x80	; 128
    2852:	bf e3       	ldi	r27, 0x3F	; 63
    2854:	8b 87       	std	Y+11, r24	; 0x0b
    2856:	9c 87       	std	Y+12, r25	; 0x0c
    2858:	ad 87       	std	Y+13, r26	; 0x0d
    285a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a e7       	ldi	r20, 0x7A	; 122
    286a:	53 e4       	ldi	r21, 0x43	; 67
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8f 83       	std	Y+7, r24	; 0x07
    2876:	98 87       	std	Y+8, r25	; 0x08
    2878:	a9 87       	std	Y+9, r26	; 0x09
    287a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <LCD_SendCommand+0x816>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9e 83       	std	Y+6, r25	; 0x06
    289a:	8d 83       	std	Y+5, r24	; 0x05
    289c:	3f c0       	rjmp	.+126    	; 0x291c <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    289e:	6f 81       	ldd	r22, Y+7	; 0x07
    28a0:	78 85       	ldd	r23, Y+8	; 0x08
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    28bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <LCD_SendCommand+0x876>
    28e0:	89 e1       	ldi	r24, 0x19	; 25
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_SendCommand+0x864>
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <LCD_SendCommand+0x858>
    2906:	14 c0       	rjmp	.+40     	; 0x2930 <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9e 83       	std	Y+6, r25	; 0x06
    291a:	8d 83       	std	Y+5, r24	; 0x05
    291c:	8d 81       	ldd	r24, Y+5	; 0x05
    291e:	9e 81       	ldd	r25, Y+6	; 0x06
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_SendCommand+0x8a0>
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    2930:	cc 59       	subi	r28, 0x9C	; 156
    2932:	df 4f       	sbci	r29, 0xFF	; 255
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	08 95       	ret

00002948 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	c4 56       	subi	r28, 0x64	; 100
    2956:	d0 40       	sbci	r29, 0x00	; 0
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	fe 01       	movw	r30, r28
    2964:	ec 59       	subi	r30, 0x9C	; 156
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	63 e0       	ldi	r22, 0x03	; 3
    296e:	41 e0       	ldi	r20, 0x01	; 1
    2970:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2974:	fe 01       	movw	r30, r28
    2976:	e1 5a       	subi	r30, 0xA1	; 161
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e8       	ldi	r26, 0x80	; 128
    2980:	bf e3       	ldi	r27, 0x3F	; 63
    2982:	80 83       	st	Z, r24
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	a2 83       	std	Z+2, r26	; 0x02
    2988:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298a:	8e 01       	movw	r16, r28
    298c:	05 5a       	subi	r16, 0xA5	; 165
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	fe 01       	movw	r30, r28
    2992:	e1 5a       	subi	r30, 0xA1	; 161
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4a e7       	ldi	r20, 0x7A	; 122
    29a4:	53 e4       	ldi	r21, 0x43	; 67
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	f8 01       	movw	r30, r16
    29b0:	80 83       	st	Z, r24
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	a2 83       	std	Z+2, r26	; 0x02
    29b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b8:	fe 01       	movw	r30, r28
    29ba:	e5 5a       	subi	r30, 0xA5	; 165
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	44 f4       	brge	.+16     	; 0x29e6 <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    29d6:	fe 01       	movw	r30, r28
    29d8:	e7 5a       	subi	r30, 0xA7	; 167
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	80 83       	st	Z, r24
    29e4:	64 c0       	rjmp	.+200    	; 0x2aae <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    29e6:	fe 01       	movw	r30, r28
    29e8:	e5 5a       	subi	r30, 0xA5	; 165
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	60 81       	ld	r22, Z
    29ee:	71 81       	ldd	r23, Z+1	; 0x01
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	0c f0       	brlt	.+2      	; 0x2a06 <LCD_DisplayCharacter+0xbe>
    2a04:	43 c0       	rjmp	.+134    	; 0x2a8c <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	fe 01       	movw	r30, r28
    2a08:	e1 5a       	subi	r30, 0xA1	; 161
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	8e 01       	movw	r16, r28
    2a26:	07 5a       	subi	r16, 0xA7	; 167
    2a28:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	f8 01       	movw	r30, r16
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	1f c0       	rjmp	.+62     	; 0x2a7c <LCD_DisplayCharacter+0x134>
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e9 5a       	subi	r30, 0xA9	; 169
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	89 e1       	ldi	r24, 0x19	; 25
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e9 5a       	subi	r30, 0xA9	; 169
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_DisplayCharacter+0x10e>
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e9 5a       	subi	r30, 0xA9	; 169
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	de 01       	movw	r26, r28
    2a66:	a7 5a       	subi	r26, 0xA7	; 167
    2a68:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5a       	subi	r30, 0xA7	; 167
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	11 96       	adiw	r26, 0x01	; 1
    2a78:	9c 93       	st	X, r25
    2a7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e7 5a       	subi	r30, 0xA7	; 167
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	d1 f6       	brne	.-76     	; 0x2a3e <LCD_DisplayCharacter+0xf6>
    2a8a:	27 c0       	rjmp	.+78     	; 0x2ada <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8c:	8e 01       	movw	r16, r28
    2a8e:	07 5a       	subi	r16, 0xA7	; 167
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
    2a92:	fe 01       	movw	r30, r28
    2a94:	e5 5a       	subi	r30, 0xA5	; 165
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	80 83       	st	Z, r24
    2aae:	de 01       	movw	r26, r28
    2ab0:	ab 5a       	subi	r26, 0xAB	; 171
    2ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e7 5a       	subi	r30, 0xA7	; 167
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	8d 93       	st	X+, r24
    2ac0:	9c 93       	st	X, r25
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	eb 5a       	subi	r30, 0xAB	; 171
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_DisplayCharacter+0x184>
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	eb 5a       	subi	r30, 0xAB	; 171
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	62 e0       	ldi	r22, 0x02	; 2
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ef 5a       	subi	r30, 0xAF	; 175
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e8       	ldi	r26, 0x80	; 128
    2af0:	bf e3       	ldi	r27, 0x3F	; 63
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afa:	8e 01       	movw	r16, r28
    2afc:	03 5b       	subi	r16, 0xB3	; 179
    2afe:	1f 4f       	sbci	r17, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	ef 5a       	subi	r30, 0xAF	; 175
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a e7       	ldi	r20, 0x7A	; 122
    2b14:	53 e4       	ldi	r21, 0x43	; 67
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	80 83       	st	Z, r24
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	a2 83       	std	Z+2, r26	; 0x02
    2b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e3 5b       	subi	r30, 0xB3	; 179
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	44 f4       	brge	.+16     	; 0x2b56 <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    2b46:	fe 01       	movw	r30, r28
    2b48:	e5 5b       	subi	r30, 0xB5	; 181
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
    2b54:	64 c0       	rjmp	.+200    	; 0x2c1e <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    2b56:	fe 01       	movw	r30, r28
    2b58:	e3 5b       	subi	r30, 0xB3	; 179
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	3f ef       	ldi	r19, 0xFF	; 255
    2b68:	4f e7       	ldi	r20, 0x7F	; 127
    2b6a:	57 e4       	ldi	r21, 0x47	; 71
    2b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b70:	18 16       	cp	r1, r24
    2b72:	0c f0       	brlt	.+2      	; 0x2b76 <LCD_DisplayCharacter+0x22e>
    2b74:	43 c0       	rjmp	.+134    	; 0x2bfc <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	fe 01       	movw	r30, r28
    2b78:	ef 5a       	subi	r30, 0xAF	; 175
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8e 01       	movw	r16, r28
    2b96:	05 5b       	subi	r16, 0xB5	; 181
    2b98:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	f8 01       	movw	r30, r16
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
    2bac:	1f c0       	rjmp	.+62     	; 0x2bec <LCD_DisplayCharacter+0x2a4>
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e7 5b       	subi	r30, 0xB7	; 183
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	89 e1       	ldi	r24, 0x19	; 25
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e7 5b       	subi	r30, 0xB7	; 183
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <LCD_DisplayCharacter+0x27e>
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e7 5b       	subi	r30, 0xB7	; 183
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	de 01       	movw	r26, r28
    2bd6:	a5 5b       	subi	r26, 0xB5	; 181
    2bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e5 5b       	subi	r30, 0xB5	; 181
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	9c 93       	st	X, r25
    2bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	fe 01       	movw	r30, r28
    2bee:	e5 5b       	subi	r30, 0xB5	; 181
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	d1 f6       	brne	.-76     	; 0x2bae <LCD_DisplayCharacter+0x266>
    2bfa:	27 c0       	rjmp	.+78     	; 0x2c4a <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	8e 01       	movw	r16, r28
    2bfe:	05 5b       	subi	r16, 0xB5	; 181
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	e3 5b       	subi	r30, 0xB3	; 179
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	f8 01       	movw	r30, r16
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	80 83       	st	Z, r24
    2c1e:	de 01       	movw	r26, r28
    2c20:	a9 5b       	subi	r26, 0xB9	; 185
    2c22:	bf 4f       	sbci	r27, 0xFF	; 255
    2c24:	fe 01       	movw	r30, r28
    2c26:	e5 5b       	subi	r30, 0xB5	; 181
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	8d 93       	st	X+, r24
    2c30:	9c 93       	st	X, r25
    2c32:	fe 01       	movw	r30, r28
    2c34:	e9 5b       	subi	r30, 0xB9	; 185
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <LCD_DisplayCharacter+0x2f4>
    2c40:	fe 01       	movw	r30, r28
    2c42:	e9 5b       	subi	r30, 0xB9	; 185
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    2c4a:	de 01       	movw	r26, r28
    2c4c:	ad 59       	subi	r26, 0x9D	; 157
    2c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c50:	fe 01       	movw	r30, r28
    2c52:	ec 59       	subi	r30, 0x9C	; 156
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	82 95       	swap	r24
    2c5a:	8f 70       	andi	r24, 0x0F	; 15
    2c5c:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ed 59       	subi	r30, 0x9D	; 157
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	98 2f       	mov	r25, r24
    2c68:	91 70       	andi	r25, 0x01	; 1
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	49 2f       	mov	r20, r25
    2c70:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2c74:	fe 01       	movw	r30, r28
    2c76:	ed 59       	subi	r30, 0x9D	; 157
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	86 95       	lsr	r24
    2c7e:	98 2f       	mov	r25, r24
    2c80:	91 70       	andi	r25, 0x01	; 1
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	49 2f       	mov	r20, r25
    2c88:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 59       	subi	r30, 0x9D	; 157
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	86 95       	lsr	r24
    2c96:	86 95       	lsr	r24
    2c98:	98 2f       	mov	r25, r24
    2c9a:	91 70       	andi	r25, 0x01	; 1
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	62 e0       	ldi	r22, 0x02	; 2
    2ca0:	49 2f       	mov	r20, r25
    2ca2:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ed 59       	subi	r30, 0x9D	; 157
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	86 95       	lsr	r24
    2cb0:	86 95       	lsr	r24
    2cb2:	86 95       	lsr	r24
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	91 70       	andi	r25, 0x01	; 1
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	64 e0       	ldi	r22, 0x04	; 4
    2cbc:	49 2f       	mov	r20, r25
    2cbe:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ed 5b       	subi	r30, 0xBD	; 189
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a0 e8       	ldi	r26, 0x80	; 128
    2cce:	bf e3       	ldi	r27, 0x3F	; 63
    2cd0:	80 83       	st	Z, r24
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	a2 83       	std	Z+2, r26	; 0x02
    2cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd8:	8e 01       	movw	r16, r28
    2cda:	01 5c       	subi	r16, 0xC1	; 193
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ed 5b       	subi	r30, 0xBD	; 189
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a e7       	ldi	r20, 0x7A	; 122
    2cf2:	53 e4       	ldi	r21, 0x43	; 67
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	80 83       	st	Z, r24
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	a2 83       	std	Z+2, r26	; 0x02
    2d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d06:	fe 01       	movw	r30, r28
    2d08:	ff 96       	adiw	r30, 0x3f	; 63
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e8       	ldi	r20, 0x80	; 128
    2d18:	5f e3       	ldi	r21, 0x3F	; 63
    2d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1e:	88 23       	and	r24, r24
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9e af       	std	Y+62, r25	; 0x3e
    2d28:	8d af       	std	Y+61, r24	; 0x3d
    2d2a:	46 c0       	rjmp	.+140    	; 0x2db8 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	ff 96       	adiw	r30, 0x3f	; 63
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	64 f5       	brge	.+88     	; 0x2da0 <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	fe 01       	movw	r30, r28
    2d4a:	ed 5b       	subi	r30, 0xBD	; 189
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9e af       	std	Y+62, r25	; 0x3e
    2d74:	8d af       	std	Y+61, r24	; 0x3d
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <LCD_DisplayCharacter+0x44e>
    2d78:	89 e1       	ldi	r24, 0x19	; 25
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9c af       	std	Y+60, r25	; 0x3c
    2d7e:	8b af       	std	Y+59, r24	; 0x3b
    2d80:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d82:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <LCD_DisplayCharacter+0x43c>
    2d88:	9c af       	std	Y+60, r25	; 0x3c
    2d8a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	9e af       	std	Y+62, r25	; 0x3e
    2d94:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d98:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	69 f7       	brne	.-38     	; 0x2d78 <LCD_DisplayCharacter+0x430>
    2d9e:	16 c0       	rjmp	.+44     	; 0x2dcc <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da0:	fe 01       	movw	r30, r28
    2da2:	ff 96       	adiw	r30, 0x3f	; 63
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9e af       	std	Y+62, r25	; 0x3e
    2db6:	8d af       	std	Y+61, r24	; 0x3d
    2db8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dba:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dbc:	9a af       	std	Y+58, r25	; 0x3a
    2dbe:	89 af       	std	Y+57, r24	; 0x39
    2dc0:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <LCD_DisplayCharacter+0x47c>
    2dc8:	9a af       	std	Y+58, r25	; 0x3a
    2dca:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	62 e0       	ldi	r22, 0x02	; 2
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 e8       	ldi	r26, 0x80	; 128
    2ddc:	bf e3       	ldi	r27, 0x3F	; 63
    2dde:	8d ab       	std	Y+53, r24	; 0x35
    2de0:	9e ab       	std	Y+54, r25	; 0x36
    2de2:	af ab       	std	Y+55, r26	; 0x37
    2de4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	6d a9       	ldd	r22, Y+53	; 0x35
    2de8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dea:	8f a9       	ldd	r24, Y+55	; 0x37
    2dec:	98 ad       	ldd	r25, Y+56	; 0x38
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a e7       	ldi	r20, 0x7A	; 122
    2df4:	53 e4       	ldi	r21, 0x43	; 67
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	89 ab       	std	Y+49, r24	; 0x31
    2e00:	9a ab       	std	Y+50, r25	; 0x32
    2e02:	ab ab       	std	Y+51, r26	; 0x33
    2e04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e06:	69 a9       	ldd	r22, Y+49	; 0x31
    2e08:	7a a9       	ldd	r23, Y+50	; 0x32
    2e0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	98 ab       	std	Y+48, r25	; 0x30
    2e24:	8f a7       	std	Y+47, r24	; 0x2f
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    2e28:	69 a9       	ldd	r22, Y+49	; 0x31
    2e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	6d a9       	ldd	r22, Y+53	; 0x35
    2e42:	7e a9       	ldd	r23, Y+54	; 0x36
    2e44:	8f a9       	ldd	r24, Y+55	; 0x37
    2e46:	98 ad       	ldd	r25, Y+56	; 0x38
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	98 ab       	std	Y+48, r25	; 0x30
    2e66:	8f a7       	std	Y+47, r24	; 0x2f
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <LCD_DisplayCharacter+0x540>
    2e6a:	89 e1       	ldi	r24, 0x19	; 25
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9e a7       	std	Y+46, r25	; 0x2e
    2e70:	8d a7       	std	Y+45, r24	; 0x2d
    2e72:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e74:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <LCD_DisplayCharacter+0x52e>
    2e7a:	9e a7       	std	Y+46, r25	; 0x2e
    2e7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e80:	98 a9       	ldd	r25, Y+48	; 0x30
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	98 ab       	std	Y+48, r25	; 0x30
    2e86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	69 f7       	brne	.-38     	; 0x2e6a <LCD_DisplayCharacter+0x522>
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	69 a9       	ldd	r22, Y+49	; 0x31
    2e94:	7a a9       	ldd	r23, Y+50	; 0x32
    2e96:	8b a9       	ldd	r24, Y+51	; 0x33
    2e98:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	98 ab       	std	Y+48, r25	; 0x30
    2ea4:	8f a7       	std	Y+47, r24	; 0x2f
    2ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eaa:	9c a7       	std	Y+44, r25	; 0x2c
    2eac:	8b a7       	std	Y+43, r24	; 0x2b
    2eae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <LCD_DisplayCharacter+0x56a>
    2eb6:	9c a7       	std	Y+44, r25	; 0x2c
    2eb8:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	62 e0       	ldi	r22, 0x02	; 2
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a0 e8       	ldi	r26, 0x80	; 128
    2eca:	bf e3       	ldi	r27, 0x3F	; 63
    2ecc:	8f a3       	std	Y+39, r24	; 0x27
    2ece:	98 a7       	std	Y+40, r25	; 0x28
    2ed0:	a9 a7       	std	Y+41, r26	; 0x29
    2ed2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eda:	9a a5       	ldd	r25, Y+42	; 0x2a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4a e7       	ldi	r20, 0x7A	; 122
    2ee2:	53 e4       	ldi	r21, 0x43	; 67
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8b a3       	std	Y+35, r24	; 0x23
    2eee:	9c a3       	std	Y+36, r25	; 0x24
    2ef0:	ad a3       	std	Y+37, r26	; 0x25
    2ef2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ef4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef8:	8d a1       	ldd	r24, Y+37	; 0x25
    2efa:	9e a1       	ldd	r25, Y+38	; 0x26
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	2c f4       	brge	.+10     	; 0x2f16 <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9a a3       	std	Y+34, r25	; 0x22
    2f12:	89 a3       	std	Y+33, r24	; 0x21
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    2f16:	6b a1       	ldd	r22, Y+35	; 0x23
    2f18:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	4c f5       	brge	.+82     	; 0x2f80 <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f30:	78 a5       	ldd	r23, Y+40	; 0x28
    2f32:	89 a5       	ldd	r24, Y+41	; 0x29
    2f34:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e2       	ldi	r20, 0x20	; 32
    2f3c:	51 e4       	ldi	r21, 0x41	; 65
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9a a3       	std	Y+34, r25	; 0x22
    2f54:	89 a3       	std	Y+33, r24	; 0x21
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <LCD_DisplayCharacter+0x62e>
    2f58:	89 e1       	ldi	r24, 0x19	; 25
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	98 a3       	std	Y+32, r25	; 0x20
    2f5e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f62:	98 a1       	ldd	r25, Y+32	; 0x20
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <LCD_DisplayCharacter+0x61c>
    2f68:	98 a3       	std	Y+32, r25	; 0x20
    2f6a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	9a a3       	std	Y+34, r25	; 0x22
    2f74:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f76:	89 a1       	ldd	r24, Y+33	; 0x21
    2f78:	9a a1       	ldd	r25, Y+34	; 0x22
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	69 f7       	brne	.-38     	; 0x2f58 <LCD_DisplayCharacter+0x610>
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	6b a1       	ldd	r22, Y+35	; 0x23
    2f82:	7c a1       	ldd	r23, Y+36	; 0x24
    2f84:	8d a1       	ldd	r24, Y+37	; 0x25
    2f86:	9e a1       	ldd	r25, Y+38	; 0x26
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9a a3       	std	Y+34, r25	; 0x22
    2f92:	89 a3       	std	Y+33, r24	; 0x21
    2f94:	89 a1       	ldd	r24, Y+33	; 0x21
    2f96:	9a a1       	ldd	r25, Y+34	; 0x22
    2f98:	9e 8f       	std	Y+30, r25	; 0x1e
    2f9a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_DisplayCharacter+0x658>
    2fa4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fa6:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    2fa8:	de 01       	movw	r26, r28
    2faa:	ad 59       	subi	r26, 0x9D	; 157
    2fac:	bf 4f       	sbci	r27, 0xFF	; 255
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ec 59       	subi	r30, 0x9C	; 156
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 81       	ld	r24, Z
    2fb6:	8f 70       	andi	r24, 0x0F	; 15
    2fb8:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ed 59       	subi	r30, 0x9D	; 157
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	98 2f       	mov	r25, r24
    2fc4:	91 70       	andi	r25, 0x01	; 1
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	49 2f       	mov	r20, r25
    2fcc:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	ed 59       	subi	r30, 0x9D	; 157
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 81       	ld	r24, Z
    2fd8:	86 95       	lsr	r24
    2fda:	98 2f       	mov	r25, r24
    2fdc:	91 70       	andi	r25, 0x01	; 1
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	61 e0       	ldi	r22, 0x01	; 1
    2fe2:	49 2f       	mov	r20, r25
    2fe4:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2fe8:	fe 01       	movw	r30, r28
    2fea:	ed 59       	subi	r30, 0x9D	; 157
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	86 95       	lsr	r24
    2ff2:	86 95       	lsr	r24
    2ff4:	98 2f       	mov	r25, r24
    2ff6:	91 70       	andi	r25, 0x01	; 1
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	62 e0       	ldi	r22, 0x02	; 2
    2ffc:	49 2f       	mov	r20, r25
    2ffe:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    3002:	fe 01       	movw	r30, r28
    3004:	ed 59       	subi	r30, 0x9D	; 157
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	80 81       	ld	r24, Z
    300a:	86 95       	lsr	r24
    300c:	86 95       	lsr	r24
    300e:	86 95       	lsr	r24
    3010:	98 2f       	mov	r25, r24
    3012:	91 70       	andi	r25, 0x01	; 1
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	64 e0       	ldi	r22, 0x04	; 4
    3018:	49 2f       	mov	r20, r25
    301a:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	a0 e8       	ldi	r26, 0x80	; 128
    3024:	bf e3       	ldi	r27, 0x3F	; 63
    3026:	89 8f       	std	Y+25, r24	; 0x19
    3028:	9a 8f       	std	Y+26, r25	; 0x1a
    302a:	ab 8f       	std	Y+27, r26	; 0x1b
    302c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302e:	69 8d       	ldd	r22, Y+25	; 0x19
    3030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	4a e7       	ldi	r20, 0x7A	; 122
    303c:	53 e4       	ldi	r21, 0x43	; 67
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	8d 8b       	std	Y+21, r24	; 0x15
    3048:	9e 8b       	std	Y+22, r25	; 0x16
    304a:	af 8b       	std	Y+23, r26	; 0x17
    304c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    304e:	6d 89       	ldd	r22, Y+21	; 0x15
    3050:	7e 89       	ldd	r23, Y+22	; 0x16
    3052:	8f 89       	ldd	r24, Y+23	; 0x17
    3054:	98 8d       	ldd	r25, Y+24	; 0x18
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e8       	ldi	r20, 0x80	; 128
    305c:	5f e3       	ldi	r21, 0x3F	; 63
    305e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3062:	88 23       	and	r24, r24
    3064:	2c f4       	brge	.+10     	; 0x3070 <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	9c 8b       	std	Y+20, r25	; 0x14
    306c:	8b 8b       	std	Y+19, r24	; 0x13
    306e:	3f c0       	rjmp	.+126    	; 0x30ee <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    3070:	6d 89       	ldd	r22, Y+21	; 0x15
    3072:	7e 89       	ldd	r23, Y+22	; 0x16
    3074:	8f 89       	ldd	r24, Y+23	; 0x17
    3076:	98 8d       	ldd	r25, Y+24	; 0x18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	3f ef       	ldi	r19, 0xFF	; 255
    307c:	4f e7       	ldi	r20, 0x7F	; 127
    307e:	57 e4       	ldi	r21, 0x47	; 71
    3080:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3084:	18 16       	cp	r1, r24
    3086:	4c f5       	brge	.+82     	; 0x30da <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3088:	69 8d       	ldd	r22, Y+25	; 0x19
    308a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    308c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    308e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e2       	ldi	r20, 0x20	; 32
    3096:	51 e4       	ldi	r21, 0x41	; 65
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	9c 8b       	std	Y+20, r25	; 0x14
    30ae:	8b 8b       	std	Y+19, r24	; 0x13
    30b0:	0f c0       	rjmp	.+30     	; 0x30d0 <LCD_DisplayCharacter+0x788>
    30b2:	89 e1       	ldi	r24, 0x19	; 25
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	9a 8b       	std	Y+18, r25	; 0x12
    30b8:	89 8b       	std	Y+17, r24	; 0x11
    30ba:	89 89       	ldd	r24, Y+17	; 0x11
    30bc:	9a 89       	ldd	r25, Y+18	; 0x12
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <LCD_DisplayCharacter+0x776>
    30c2:	9a 8b       	std	Y+18, r25	; 0x12
    30c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c6:	8b 89       	ldd	r24, Y+19	; 0x13
    30c8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	9c 8b       	std	Y+20, r25	; 0x14
    30ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d0:	8b 89       	ldd	r24, Y+19	; 0x13
    30d2:	9c 89       	ldd	r25, Y+20	; 0x14
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	69 f7       	brne	.-38     	; 0x30b2 <LCD_DisplayCharacter+0x76a>
    30d8:	14 c0       	rjmp	.+40     	; 0x3102 <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30da:	6d 89       	ldd	r22, Y+21	; 0x15
    30dc:	7e 89       	ldd	r23, Y+22	; 0x16
    30de:	8f 89       	ldd	r24, Y+23	; 0x17
    30e0:	98 8d       	ldd	r25, Y+24	; 0x18
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9c 8b       	std	Y+20, r25	; 0x14
    30ec:	8b 8b       	std	Y+19, r24	; 0x13
    30ee:	8b 89       	ldd	r24, Y+19	; 0x13
    30f0:	9c 89       	ldd	r25, Y+20	; 0x14
    30f2:	98 8b       	std	Y+16, r25	; 0x10
    30f4:	8f 87       	std	Y+15, r24	; 0x0f
    30f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f8:	98 89       	ldd	r25, Y+16	; 0x10
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <LCD_DisplayCharacter+0x7b2>
    30fe:	98 8b       	std	Y+16, r25	; 0x10
    3100:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	40 e0       	ldi	r20, 0x00	; 0
    3108:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e8       	ldi	r26, 0x80	; 128
    3112:	bf e3       	ldi	r27, 0x3F	; 63
    3114:	8b 87       	std	Y+11, r24	; 0x0b
    3116:	9c 87       	std	Y+12, r25	; 0x0c
    3118:	ad 87       	std	Y+13, r26	; 0x0d
    311a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311c:	6b 85       	ldd	r22, Y+11	; 0x0b
    311e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3120:	8d 85       	ldd	r24, Y+13	; 0x0d
    3122:	9e 85       	ldd	r25, Y+14	; 0x0e
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	4a e7       	ldi	r20, 0x7A	; 122
    312a:	53 e4       	ldi	r21, 0x43	; 67
    312c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	8f 83       	std	Y+7, r24	; 0x07
    3136:	98 87       	std	Y+8, r25	; 0x08
    3138:	a9 87       	std	Y+9, r26	; 0x09
    313a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313c:	6f 81       	ldd	r22, Y+7	; 0x07
    313e:	78 85       	ldd	r23, Y+8	; 0x08
    3140:	89 85       	ldd	r24, Y+9	; 0x09
    3142:	9a 85       	ldd	r25, Y+10	; 0x0a
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	40 e8       	ldi	r20, 0x80	; 128
    314a:	5f e3       	ldi	r21, 0x3F	; 63
    314c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3150:	88 23       	and	r24, r24
    3152:	2c f4       	brge	.+10     	; 0x315e <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	9e 83       	std	Y+6, r25	; 0x06
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	3f c0       	rjmp	.+126    	; 0x31dc <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    315e:	6f 81       	ldd	r22, Y+7	; 0x07
    3160:	78 85       	ldd	r23, Y+8	; 0x08
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	3f ef       	ldi	r19, 0xFF	; 255
    316a:	4f e7       	ldi	r20, 0x7F	; 127
    316c:	57 e4       	ldi	r21, 0x47	; 71
    316e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3172:	18 16       	cp	r1, r24
    3174:	4c f5       	brge	.+82     	; 0x31c8 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3176:	6b 85       	ldd	r22, Y+11	; 0x0b
    3178:	7c 85       	ldd	r23, Y+12	; 0x0c
    317a:	8d 85       	ldd	r24, Y+13	; 0x0d
    317c:	9e 85       	ldd	r25, Y+14	; 0x0e
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e2       	ldi	r20, 0x20	; 32
    3184:	51 e4       	ldi	r21, 0x41	; 65
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	9e 83       	std	Y+6, r25	; 0x06
    319c:	8d 83       	std	Y+5, r24	; 0x05
    319e:	0f c0       	rjmp	.+30     	; 0x31be <LCD_DisplayCharacter+0x876>
    31a0:	89 e1       	ldi	r24, 0x19	; 25
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9c 83       	std	Y+4, r25	; 0x04
    31a6:	8b 83       	std	Y+3, r24	; 0x03
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	9c 81       	ldd	r25, Y+4	; 0x04
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_DisplayCharacter+0x864>
    31b0:	9c 83       	std	Y+4, r25	; 0x04
    31b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	9e 81       	ldd	r25, Y+6	; 0x06
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	69 f7       	brne	.-38     	; 0x31a0 <LCD_DisplayCharacter+0x858>
    31c6:	14 c0       	rjmp	.+40     	; 0x31f0 <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ca:	78 85       	ldd	r23, Y+8	; 0x08
    31cc:	89 85       	ldd	r24, Y+9	; 0x09
    31ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	9e 83       	std	Y+6, r25	; 0x06
    31da:	8d 83       	std	Y+5, r24	; 0x05
    31dc:	8d 81       	ldd	r24, Y+5	; 0x05
    31de:	9e 81       	ldd	r25, Y+6	; 0x06
    31e0:	9a 83       	std	Y+2, r25	; 0x02
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <LCD_DisplayCharacter+0x8a0>
    31ec:	9a 83       	std	Y+2, r25	; 0x02
    31ee:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    31f0:	80 91 0d 02 	lds	r24, 0x020D
    31f4:	8f 5f       	subi	r24, 0xFF	; 255
    31f6:	80 93 0d 02 	sts	0x020D, r24
    if(col_global == MAX_NUM_COL_LCD)
    31fa:	80 91 0d 02 	lds	r24, 0x020D
    31fe:	84 31       	cpi	r24, 0x14	; 20
    3200:	69 f4       	brne	.+26     	; 0x321c <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    3202:	80 91 0c 02 	lds	r24, 0x020C
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	80 93 0c 02 	sts	0x020C, r24
        col_global = 0 ;
    320c:	10 92 0d 02 	sts	0x020D, r1
        if(row_global == MAX_NUM_COL_LCD)
    3210:	80 91 0c 02 	lds	r24, 0x020C
    3214:	84 31       	cpi	r24, 0x14	; 20
    3216:	11 f4       	brne	.+4      	; 0x321c <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    3218:	10 92 0c 02 	sts	0x020C, r1
    }
}
    321c:	cc 59       	subi	r28, 0x9C	; 156
    321e:	df 4f       	sbci	r29, 0xFF	; 255
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	1f 91       	pop	r17
    3230:	0f 91       	pop	r16
    3232:	08 95       	ret

00003234 <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <LCD_DisplayString+0x6>
    323a:	0f 92       	push	r0
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9b 83       	std	Y+3, r25	; 0x03
    3242:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    3244:	19 82       	std	Y+1, r1	; 0x01
    3246:	0e c0       	rjmp	.+28     	; 0x3264 <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	28 2f       	mov	r18, r24
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	fc 01       	movw	r30, r24
    3254:	e2 0f       	add	r30, r18
    3256:	f3 1f       	adc	r31, r19
    3258:	80 81       	ld	r24, Z
    325a:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_DisplayCharacter>
        it++;
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	8f 5f       	subi	r24, 0xFF	; 255
    3262:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	28 2f       	mov	r18, r24
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	9b 81       	ldd	r25, Y+3	; 0x03
    326e:	fc 01       	movw	r30, r24
    3270:	e2 0f       	add	r30, r18
    3272:	f3 1f       	adc	r31, r19
    3274:	80 81       	ld	r24, Z
    3276:	88 23       	and	r24, r24
    3278:	39 f7       	brne	.-50     	; 0x3248 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	00 d0       	rcall	.+0      	; 0x328c <LCD_MoveCursor+0x6>
    328c:	00 d0       	rcall	.+0      	; 0x328e <LCD_MoveCursor+0x8>
    328e:	0f 92       	push	r0
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	8a 83       	std	Y+2, r24	; 0x02
    3296:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	3d 83       	std	Y+5, r19	; 0x05
    32a0:	2c 83       	std	Y+4, r18	; 0x04
    32a2:	8c 81       	ldd	r24, Y+4	; 0x04
    32a4:	9d 81       	ldd	r25, Y+5	; 0x05
    32a6:	81 30       	cpi	r24, 0x01	; 1
    32a8:	91 05       	cpc	r25, r1
    32aa:	e9 f0       	breq	.+58     	; 0x32e6 <LCD_MoveCursor+0x60>
    32ac:	2c 81       	ldd	r18, Y+4	; 0x04
    32ae:	3d 81       	ldd	r19, Y+5	; 0x05
    32b0:	22 30       	cpi	r18, 0x02	; 2
    32b2:	31 05       	cpc	r19, r1
    32b4:	2c f4       	brge	.+10     	; 0x32c0 <LCD_MoveCursor+0x3a>
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
    32b8:	9d 81       	ldd	r25, Y+5	; 0x05
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	61 f0       	breq	.+24     	; 0x32d6 <LCD_MoveCursor+0x50>
    32be:	30 c0       	rjmp	.+96     	; 0x3320 <LCD_MoveCursor+0x9a>
    32c0:	2c 81       	ldd	r18, Y+4	; 0x04
    32c2:	3d 81       	ldd	r19, Y+5	; 0x05
    32c4:	22 30       	cpi	r18, 0x02	; 2
    32c6:	31 05       	cpc	r19, r1
    32c8:	c1 f0       	breq	.+48     	; 0x32fa <LCD_MoveCursor+0x74>
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	9d 81       	ldd	r25, Y+5	; 0x05
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	91 05       	cpc	r25, r1
    32d2:	e9 f0       	breq	.+58     	; 0x330e <LCD_MoveCursor+0x88>
    32d4:	25 c0       	rjmp	.+74     	; 0x3320 <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	80 93 0d 02 	sts	0x020D, r24
            row_global = 0 ;
    32e0:	10 92 0c 02 	sts	0x020C, r1
    32e4:	1d c0       	rjmp	.+58     	; 0x3320 <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	80 5c       	subi	r24, 0xC0	; 192
    32ea:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	80 93 0d 02 	sts	0x020D, r24
            row_global = 1 ;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	80 93 0c 02 	sts	0x020C, r24
    32f8:	13 c0       	rjmp	.+38     	; 0x3320 <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	8c 5e       	subi	r24, 0xEC	; 236
    32fe:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	80 93 0d 02 	sts	0x020D, r24
                row_global = 2 ;
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	80 93 0c 02 	sts	0x020C, r24
    330c:	09 c0       	rjmp	.+18     	; 0x3320 <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	8c 5a       	subi	r24, 0xAC	; 172
    3312:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	80 93 0d 02 	sts	0x020D, r24
                row_global = 3 ;
    331a:	83 e0       	ldi	r24, 0x03	; 3
    331c:	80 93 0c 02 	sts	0x020C, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	80 68       	ori	r24, 0x80	; 128
    3324:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
}
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	00 d0       	rcall	.+0      	; 0x333e <LCD_DisplayStringRowCol+0x6>
    333e:	00 d0       	rcall	.+0      	; 0x3340 <LCD_DisplayStringRowCol+0x8>
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	6b 83       	std	Y+3, r22	; 0x03
    334a:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	6c 81       	ldd	r22, Y+4	; 0x04
    3350:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
}
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    3372:	10 92 0d 02 	sts	0x020D, r1
    3376:	10 92 0c 02 	sts	0x020C, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
}
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    338e:	80 91 0d 02 	lds	r24, 0x020D
    3392:	83 31       	cpi	r24, 0x13	; 19
    3394:	89 f4       	brne	.+34     	; 0x33b8 <LCD_MoveCursorRight+0x32>
    3396:	80 91 0c 02 	lds	r24, 0x020C
    339a:	88 23       	and	r24, r24
    339c:	69 f4       	brne	.+26     	; 0x33b8 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    339e:	10 92 0d 02 	sts	0x020D, r1
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	80 93 0c 02 	sts	0x020C, r24
        LCD_MoveCursor(row_global,col_global);
    33a8:	80 91 0c 02 	lds	r24, 0x020C
    33ac:	90 91 0d 02 	lds	r25, 0x020D
    33b0:	69 2f       	mov	r22, r25
    33b2:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    33b6:	46 c0       	rjmp	.+140    	; 0x3444 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    33b8:	80 91 0d 02 	lds	r24, 0x020D
    33bc:	83 31       	cpi	r24, 0x13	; 19
    33be:	89 f4       	brne	.+34     	; 0x33e2 <LCD_MoveCursorRight+0x5c>
    33c0:	80 91 0c 02 	lds	r24, 0x020C
    33c4:	81 30       	cpi	r24, 0x01	; 1
    33c6:	69 f4       	brne	.+26     	; 0x33e2 <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    33c8:	10 92 0d 02 	sts	0x020D, r1
    33cc:	82 e0       	ldi	r24, 0x02	; 2
    33ce:	80 93 0c 02 	sts	0x020C, r24
        LCD_MoveCursor(row_global,col_global);
    33d2:	80 91 0c 02 	lds	r24, 0x020C
    33d6:	90 91 0d 02 	lds	r25, 0x020D
    33da:	69 2f       	mov	r22, r25
    33dc:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    33e0:	31 c0       	rjmp	.+98     	; 0x3444 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    33e2:	80 91 0d 02 	lds	r24, 0x020D
    33e6:	83 31       	cpi	r24, 0x13	; 19
    33e8:	89 f4       	brne	.+34     	; 0x340c <LCD_MoveCursorRight+0x86>
    33ea:	80 91 0c 02 	lds	r24, 0x020C
    33ee:	82 30       	cpi	r24, 0x02	; 2
    33f0:	69 f4       	brne	.+26     	; 0x340c <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    33f2:	10 92 0d 02 	sts	0x020D, r1
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	80 93 0c 02 	sts	0x020C, r24
        LCD_MoveCursor(row_global,col_global);
    33fc:	80 91 0c 02 	lds	r24, 0x020C
    3400:	90 91 0d 02 	lds	r25, 0x020D
    3404:	69 2f       	mov	r22, r25
    3406:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    340a:	1c c0       	rjmp	.+56     	; 0x3444 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    340c:	80 91 0d 02 	lds	r24, 0x020D
    3410:	83 31       	cpi	r24, 0x13	; 19
    3412:	81 f4       	brne	.+32     	; 0x3434 <LCD_MoveCursorRight+0xae>
    3414:	80 91 0c 02 	lds	r24, 0x020C
    3418:	83 30       	cpi	r24, 0x03	; 3
    341a:	61 f4       	brne	.+24     	; 0x3434 <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    341c:	10 92 0d 02 	sts	0x020D, r1
    3420:	10 92 0c 02 	sts	0x020C, r1
        LCD_MoveCursor(row_global,col_global);
    3424:	80 91 0c 02 	lds	r24, 0x020C
    3428:	90 91 0d 02 	lds	r25, 0x020D
    342c:	69 2f       	mov	r22, r25
    342e:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    3432:	08 c0       	rjmp	.+16     	; 0x3444 <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    3434:	84 e1       	ldi	r24, 0x14	; 20
    3436:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
        col_global++;
    343a:	80 91 0d 02 	lds	r24, 0x020D
    343e:	8f 5f       	subi	r24, 0xFF	; 255
    3440:	80 93 0d 02 	sts	0x020D, r24
    }
}
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    3452:	80 91 0d 02 	lds	r24, 0x020D
    3456:	88 23       	and	r24, r24
    3458:	91 f4       	brne	.+36     	; 0x347e <LCD_MoveCursorLeft+0x34>
    345a:	80 91 0c 02 	lds	r24, 0x020C
    345e:	88 23       	and	r24, r24
    3460:	71 f4       	brne	.+28     	; 0x347e <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    3462:	83 e1       	ldi	r24, 0x13	; 19
    3464:	80 93 0d 02 	sts	0x020D, r24
    3468:	83 e0       	ldi	r24, 0x03	; 3
    346a:	80 93 0c 02 	sts	0x020C, r24
        LCD_MoveCursor(row_global,col_global);
    346e:	80 91 0c 02 	lds	r24, 0x020C
    3472:	90 91 0d 02 	lds	r25, 0x020D
    3476:	69 2f       	mov	r22, r25
    3478:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    347c:	49 c0       	rjmp	.+146    	; 0x3510 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    347e:	80 91 0d 02 	lds	r24, 0x020D
    3482:	88 23       	and	r24, r24
    3484:	89 f4       	brne	.+34     	; 0x34a8 <LCD_MoveCursorLeft+0x5e>
    3486:	80 91 0c 02 	lds	r24, 0x020C
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	69 f4       	brne	.+26     	; 0x34a8 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    348e:	83 e1       	ldi	r24, 0x13	; 19
    3490:	80 93 0d 02 	sts	0x020D, r24
    3494:	10 92 0c 02 	sts	0x020C, r1
        LCD_MoveCursor(row_global,col_global);
    3498:	80 91 0c 02 	lds	r24, 0x020C
    349c:	90 91 0d 02 	lds	r25, 0x020D
    34a0:	69 2f       	mov	r22, r25
    34a2:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    34a6:	34 c0       	rjmp	.+104    	; 0x3510 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    34a8:	80 91 0d 02 	lds	r24, 0x020D
    34ac:	88 23       	and	r24, r24
    34ae:	91 f4       	brne	.+36     	; 0x34d4 <LCD_MoveCursorLeft+0x8a>
    34b0:	80 91 0c 02 	lds	r24, 0x020C
    34b4:	82 30       	cpi	r24, 0x02	; 2
    34b6:	71 f4       	brne	.+28     	; 0x34d4 <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    34b8:	83 e1       	ldi	r24, 0x13	; 19
    34ba:	80 93 0d 02 	sts	0x020D, r24
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	80 93 0c 02 	sts	0x020C, r24
        LCD_MoveCursor(row_global,col_global);
    34c4:	80 91 0c 02 	lds	r24, 0x020C
    34c8:	90 91 0d 02 	lds	r25, 0x020D
    34cc:	69 2f       	mov	r22, r25
    34ce:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    34d2:	1e c0       	rjmp	.+60     	; 0x3510 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    34d4:	80 91 0d 02 	lds	r24, 0x020D
    34d8:	88 23       	and	r24, r24
    34da:	91 f4       	brne	.+36     	; 0x3500 <LCD_MoveCursorLeft+0xb6>
    34dc:	80 91 0c 02 	lds	r24, 0x020C
    34e0:	83 30       	cpi	r24, 0x03	; 3
    34e2:	71 f4       	brne	.+28     	; 0x3500 <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    34e4:	83 e1       	ldi	r24, 0x13	; 19
    34e6:	80 93 0d 02 	sts	0x020D, r24
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	80 93 0c 02 	sts	0x020C, r24
        LCD_MoveCursor(row_global,col_global);
    34f0:	80 91 0c 02 	lds	r24, 0x020C
    34f4:	90 91 0d 02 	lds	r25, 0x020D
    34f8:	69 2f       	mov	r22, r25
    34fa:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    34fe:	08 c0       	rjmp	.+16     	; 0x3510 <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    3500:	80 e1       	ldi	r24, 0x10	; 16
    3502:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
        col_global--;
    3506:	80 91 0d 02 	lds	r24, 0x020D
    350a:	81 50       	subi	r24, 0x01	; 1
    350c:	80 93 0d 02 	sts	0x020D, r24
    }
    
}
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    351e:	8c e1       	ldi	r24, 0x1C	; 28
    3520:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
}
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    3532:	88 e1       	ldi	r24, 0x18	; 24
    3534:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
}
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	00 d0       	rcall	.+0      	; 0x3544 <LCD_GenerateCharacterCGRAM+0x6>
    3544:	00 d0       	rcall	.+0      	; 0x3546 <LCD_GenerateCharacterCGRAM+0x8>
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	9b 83       	std	Y+3, r25	; 0x03
    354c:	8a 83       	std	Y+2, r24	; 0x02
    354e:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    3550:	8c 81       	ldd	r24, Y+4	; 0x04
    3552:	88 2f       	mov	r24, r24
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	08 96       	adiw	r24, 0x08	; 8
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	88 0f       	add	r24, r24
    355e:	99 1f       	adc	r25, r25
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    3568:	19 82       	std	Y+1, r1	; 0x01
    356a:	0e c0       	rjmp	.+28     	; 0x3588 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	28 2f       	mov	r18, r24
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	9b 81       	ldd	r25, Y+3	; 0x03
    3576:	fc 01       	movw	r30, r24
    3578:	e2 0f       	add	r30, r18
    357a:	f3 1f       	adc	r31, r19
    357c:	80 81       	ld	r24, Z
    357e:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	8f 5f       	subi	r24, 0xFF	; 255
    3586:	89 83       	std	Y+1, r24	; 0x01
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	88 30       	cpi	r24, 0x08	; 8
    358c:	78 f3       	brcs	.-34     	; 0x356c <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	0f 92       	push	r0
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_DisplayCharacter>
}
    35ae:	0f 90       	pop	r0
    35b0:	cf 91       	pop	r28
    35b2:	df 91       	pop	r29
    35b4:	08 95       	ret

000035b6 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <LCD_DisplayCustomCharacterRowCol+0x6>
    35bc:	0f 92       	push	r0
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	6a 83       	std	Y+2, r22	; 0x02
    35c6:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	6b 81       	ldd	r22, Y+3	; 0x03
    35cc:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_DisplayCharacter>
}
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	08 95       	ret

000035e2 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    35e2:	df 93       	push	r29
    35e4:	cf 93       	push	r28
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
    35ea:	65 97       	sbiw	r28, 0x15	; 21
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	6a 8b       	std	Y+18, r22	; 0x12
    35f8:	7b 8b       	std	Y+19, r23	; 0x13
    35fa:	8c 8b       	std	Y+20, r24	; 0x14
    35fc:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    35fe:	8a 89       	ldd	r24, Y+18	; 0x12
    3600:	9b 89       	ldd	r25, Y+19	; 0x13
    3602:	9e 01       	movw	r18, r28
    3604:	2f 5f       	subi	r18, 0xFF	; 255
    3606:	3f 4f       	sbci	r19, 0xFF	; 255
    3608:	b9 01       	movw	r22, r18
    360a:	4a e0       	ldi	r20, 0x0A	; 10
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	0e 94 43 21 	call	0x4286	; 0x4286 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    3612:	ce 01       	movw	r24, r28
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
}
    361a:	65 96       	adiw	r28, 0x15	; 21
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(BUZZER_PORT,BUZZER_PIN, OUTPUT_PIN);
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	66 e0       	ldi	r22, 0x06	; 6
    3638:	42 e0       	ldi	r20, 0x02	; 2
    363a:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
}
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62

	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	66 e0       	ldi	r22, 0x06	; 6
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
}
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	08 95       	ret

0000365c <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3664:	82 e0       	ldi	r24, 0x02	; 2
    3666:	66 e0       	ldi	r22, 0x06	; 6
    3668:	40 e0       	ldi	r20, 0x00	; 0
    366a:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
}
    366e:	cf 91       	pop	r28
    3670:	df 91       	pop	r29
    3672:	08 95       	ret

00003674 <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
	GPIO_TogglePin(BUZZER_PORT,BUZZER_PIN);
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	66 e0       	ldi	r22, 0x06	; 6
    3680:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_TogglePin>
}
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	08 95       	ret

0000368a <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
    368a:	df 93       	push	r29
    368c:	cf 93       	push	r28
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	2e 97       	sbiw	r28, 0x0e	; 14
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	66 e0       	ldi	r22, 0x06	; 6
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	aa ef       	ldi	r26, 0xFA	; 250
    36ae:	b3 e4       	ldi	r27, 0x43	; 67
    36b0:	8b 87       	std	Y+11, r24	; 0x0b
    36b2:	9c 87       	std	Y+12, r25	; 0x0c
    36b4:	ad 87       	std	Y+13, r26	; 0x0d
    36b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    36bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36be:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	4a e7       	ldi	r20, 0x7A	; 122
    36c6:	53 e4       	ldi	r21, 0x43	; 67
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	8f 83       	std	Y+7, r24	; 0x07
    36d2:	98 87       	std	Y+8, r25	; 0x08
    36d4:	a9 87       	std	Y+9, r26	; 0x09
    36d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	2c f4       	brge	.+10     	; 0x36fa <H_Buzzer_Void_BuzzerOnce+0x70>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9e 83       	std	Y+6, r25	; 0x06
    36f6:	8d 83       	std	Y+5, r24	; 0x05
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <H_Buzzer_Void_BuzzerOnce+0xee>
	else if (__tmp > 65535)
    36fa:	6f 81       	ldd	r22, Y+7	; 0x07
    36fc:	78 85       	ldd	r23, Y+8	; 0x08
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	9a 85       	ldd	r25, Y+10	; 0x0a
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	3f ef       	ldi	r19, 0xFF	; 255
    3706:	4f e7       	ldi	r20, 0x7F	; 127
    3708:	57 e4       	ldi	r21, 0x47	; 71
    370a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    370e:	18 16       	cp	r1, r24
    3710:	4c f5       	brge	.+82     	; 0x3764 <H_Buzzer_Void_BuzzerOnce+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3712:	6b 85       	ldd	r22, Y+11	; 0x0b
    3714:	7c 85       	ldd	r23, Y+12	; 0x0c
    3716:	8d 85       	ldd	r24, Y+13	; 0x0d
    3718:	9e 85       	ldd	r25, Y+14	; 0x0e
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e2       	ldi	r20, 0x20	; 32
    3720:	51 e4       	ldi	r21, 0x41	; 65
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	9e 83       	std	Y+6, r25	; 0x06
    3738:	8d 83       	std	Y+5, r24	; 0x05
    373a:	0f c0       	rjmp	.+30     	; 0x375a <H_Buzzer_Void_BuzzerOnce+0xd0>
    373c:	89 e1       	ldi	r24, 0x19	; 25
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	9c 83       	std	Y+4, r25	; 0x04
    3742:	8b 83       	std	Y+3, r24	; 0x03
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <H_Buzzer_Void_BuzzerOnce+0xbe>
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3750:	8d 81       	ldd	r24, Y+5	; 0x05
    3752:	9e 81       	ldd	r25, Y+6	; 0x06
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375a:	8d 81       	ldd	r24, Y+5	; 0x05
    375c:	9e 81       	ldd	r25, Y+6	; 0x06
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	69 f7       	brne	.-38     	; 0x373c <H_Buzzer_Void_BuzzerOnce+0xb2>
    3762:	14 c0       	rjmp	.+40     	; 0x378c <H_Buzzer_Void_BuzzerOnce+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3764:	6f 81       	ldd	r22, Y+7	; 0x07
    3766:	78 85       	ldd	r23, Y+8	; 0x08
    3768:	89 85       	ldd	r24, Y+9	; 0x09
    376a:	9a 85       	ldd	r25, Y+10	; 0x0a
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	9e 83       	std	Y+6, r25	; 0x06
    3776:	8d 83       	std	Y+5, r24	; 0x05
    3778:	8d 81       	ldd	r24, Y+5	; 0x05
    377a:	9e 81       	ldd	r25, Y+6	; 0x06
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <H_Buzzer_Void_BuzzerOnce+0xfa>
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	66 e0       	ldi	r22, 0x06	; 6
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>



}
    3796:	2e 96       	adiw	r28, 0x0e	; 14
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	aa 97       	sbiw	r28, 0x2a	; 42
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	66 e0       	ldi	r22, 0x06	; 6
    37c0:	41 e0       	ldi	r20, 0x01	; 1
    37c2:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	aa ef       	ldi	r26, 0xFA	; 250
    37cc:	b3 e4       	ldi	r27, 0x43	; 67
    37ce:	8f a3       	std	Y+39, r24	; 0x27
    37d0:	98 a7       	std	Y+40, r25	; 0x28
    37d2:	a9 a7       	std	Y+41, r26	; 0x29
    37d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6f a1       	ldd	r22, Y+39	; 0x27
    37d8:	78 a5       	ldd	r23, Y+40	; 0x28
    37da:	89 a5       	ldd	r24, Y+41	; 0x29
    37dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a e7       	ldi	r20, 0x7A	; 122
    37e4:	53 e4       	ldi	r21, 0x43	; 67
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8b a3       	std	Y+35, r24	; 0x23
    37f0:	9c a3       	std	Y+36, r25	; 0x24
    37f2:	ad a3       	std	Y+37, r26	; 0x25
    37f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37f6:	6b a1       	ldd	r22, Y+35	; 0x23
    37f8:	7c a1       	ldd	r23, Y+36	; 0x24
    37fa:	8d a1       	ldd	r24, Y+37	; 0x25
    37fc:	9e a1       	ldd	r25, Y+38	; 0x26
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <H_Buzzer_Void_BuzzerTwice+0x70>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9a a3       	std	Y+34, r25	; 0x22
    3814:	89 a3       	std	Y+33, r24	; 0x21
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <H_Buzzer_Void_BuzzerTwice+0xee>
	else if (__tmp > 65535)
    3818:	6b a1       	ldd	r22, Y+35	; 0x23
    381a:	7c a1       	ldd	r23, Y+36	; 0x24
    381c:	8d a1       	ldd	r24, Y+37	; 0x25
    381e:	9e a1       	ldd	r25, Y+38	; 0x26
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <H_Buzzer_Void_BuzzerTwice+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6f a1       	ldd	r22, Y+39	; 0x27
    3832:	78 a5       	ldd	r23, Y+40	; 0x28
    3834:	89 a5       	ldd	r24, Y+41	; 0x29
    3836:	9a a5       	ldd	r25, Y+42	; 0x2a
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9a a3       	std	Y+34, r25	; 0x22
    3856:	89 a3       	std	Y+33, r24	; 0x21
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <H_Buzzer_Void_BuzzerTwice+0xd0>
    385a:	89 e1       	ldi	r24, 0x19	; 25
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	98 a3       	std	Y+32, r25	; 0x20
    3860:	8f 8f       	std	Y+31, r24	; 0x1f
    3862:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3864:	98 a1       	ldd	r25, Y+32	; 0x20
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <H_Buzzer_Void_BuzzerTwice+0xbe>
    386a:	98 a3       	std	Y+32, r25	; 0x20
    386c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	89 a1       	ldd	r24, Y+33	; 0x21
    3870:	9a a1       	ldd	r25, Y+34	; 0x22
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9a a3       	std	Y+34, r25	; 0x22
    3876:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	89 a1       	ldd	r24, Y+33	; 0x21
    387a:	9a a1       	ldd	r25, Y+34	; 0x22
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <H_Buzzer_Void_BuzzerTwice+0xb2>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <H_Buzzer_Void_BuzzerTwice+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6b a1       	ldd	r22, Y+35	; 0x23
    3884:	7c a1       	ldd	r23, Y+36	; 0x24
    3886:	8d a1       	ldd	r24, Y+37	; 0x25
    3888:	9e a1       	ldd	r25, Y+38	; 0x26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9a a3       	std	Y+34, r25	; 0x22
    3894:	89 a3       	std	Y+33, r24	; 0x21
    3896:	89 a1       	ldd	r24, Y+33	; 0x21
    3898:	9a a1       	ldd	r25, Y+34	; 0x22
    389a:	9e 8f       	std	Y+30, r25	; 0x1e
    389c:	8d 8f       	std	Y+29, r24	; 0x1d
    389e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <H_Buzzer_Void_BuzzerTwice+0xfa>
    38a6:	9e 8f       	std	Y+30, r25	; 0x1e
    38a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    38aa:	82 e0       	ldi	r24, 0x02	; 2
    38ac:	66 e0       	ldi	r22, 0x06	; 6
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	a0 e7       	ldi	r26, 0x70	; 112
    38ba:	b2 e4       	ldi	r27, 0x42	; 66
    38bc:	89 8f       	std	Y+25, r24	; 0x19
    38be:	9a 8f       	std	Y+26, r25	; 0x1a
    38c0:	ab 8f       	std	Y+27, r26	; 0x1b
    38c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c4:	69 8d       	ldd	r22, Y+25	; 0x19
    38c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	4a e7       	ldi	r20, 0x7A	; 122
    38d2:	53 e4       	ldi	r21, 0x43	; 67
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	8d 8b       	std	Y+21, r24	; 0x15
    38de:	9e 8b       	std	Y+22, r25	; 0x16
    38e0:	af 8b       	std	Y+23, r26	; 0x17
    38e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38e4:	6d 89       	ldd	r22, Y+21	; 0x15
    38e6:	7e 89       	ldd	r23, Y+22	; 0x16
    38e8:	8f 89       	ldd	r24, Y+23	; 0x17
    38ea:	98 8d       	ldd	r25, Y+24	; 0x18
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	40 e8       	ldi	r20, 0x80	; 128
    38f2:	5f e3       	ldi	r21, 0x3F	; 63
    38f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f8:	88 23       	and	r24, r24
    38fa:	2c f4       	brge	.+10     	; 0x3906 <H_Buzzer_Void_BuzzerTwice+0x15e>
		__ticks = 1;
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	9c 8b       	std	Y+20, r25	; 0x14
    3902:	8b 8b       	std	Y+19, r24	; 0x13
    3904:	3f c0       	rjmp	.+126    	; 0x3984 <H_Buzzer_Void_BuzzerTwice+0x1dc>
	else if (__tmp > 65535)
    3906:	6d 89       	ldd	r22, Y+21	; 0x15
    3908:	7e 89       	ldd	r23, Y+22	; 0x16
    390a:	8f 89       	ldd	r24, Y+23	; 0x17
    390c:	98 8d       	ldd	r25, Y+24	; 0x18
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	3f ef       	ldi	r19, 0xFF	; 255
    3912:	4f e7       	ldi	r20, 0x7F	; 127
    3914:	57 e4       	ldi	r21, 0x47	; 71
    3916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    391a:	18 16       	cp	r1, r24
    391c:	4c f5       	brge	.+82     	; 0x3970 <H_Buzzer_Void_BuzzerTwice+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391e:	69 8d       	ldd	r22, Y+25	; 0x19
    3920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e2       	ldi	r20, 0x20	; 32
    392c:	51 e4       	ldi	r21, 0x41	; 65
    392e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	bc 01       	movw	r22, r24
    3938:	cd 01       	movw	r24, r26
    393a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	9c 8b       	std	Y+20, r25	; 0x14
    3944:	8b 8b       	std	Y+19, r24	; 0x13
    3946:	0f c0       	rjmp	.+30     	; 0x3966 <H_Buzzer_Void_BuzzerTwice+0x1be>
    3948:	89 e1       	ldi	r24, 0x19	; 25
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9a 8b       	std	Y+18, r25	; 0x12
    394e:	89 8b       	std	Y+17, r24	; 0x11
    3950:	89 89       	ldd	r24, Y+17	; 0x11
    3952:	9a 89       	ldd	r25, Y+18	; 0x12
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	f1 f7       	brne	.-4      	; 0x3954 <H_Buzzer_Void_BuzzerTwice+0x1ac>
    3958:	9a 8b       	std	Y+18, r25	; 0x12
    395a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395c:	8b 89       	ldd	r24, Y+19	; 0x13
    395e:	9c 89       	ldd	r25, Y+20	; 0x14
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	9c 8b       	std	Y+20, r25	; 0x14
    3964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3966:	8b 89       	ldd	r24, Y+19	; 0x13
    3968:	9c 89       	ldd	r25, Y+20	; 0x14
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	69 f7       	brne	.-38     	; 0x3948 <H_Buzzer_Void_BuzzerTwice+0x1a0>
    396e:	14 c0       	rjmp	.+40     	; 0x3998 <H_Buzzer_Void_BuzzerTwice+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3970:	6d 89       	ldd	r22, Y+21	; 0x15
    3972:	7e 89       	ldd	r23, Y+22	; 0x16
    3974:	8f 89       	ldd	r24, Y+23	; 0x17
    3976:	98 8d       	ldd	r25, Y+24	; 0x18
    3978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	9c 8b       	std	Y+20, r25	; 0x14
    3982:	8b 8b       	std	Y+19, r24	; 0x13
    3984:	8b 89       	ldd	r24, Y+19	; 0x13
    3986:	9c 89       	ldd	r25, Y+20	; 0x14
    3988:	98 8b       	std	Y+16, r25	; 0x10
    398a:	8f 87       	std	Y+15, r24	; 0x0f
    398c:	8f 85       	ldd	r24, Y+15	; 0x0f
    398e:	98 89       	ldd	r25, Y+16	; 0x10
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	f1 f7       	brne	.-4      	; 0x3990 <H_Buzzer_Void_BuzzerTwice+0x1e8>
    3994:	98 8b       	std	Y+16, r25	; 0x10
    3996:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	66 e0       	ldi	r22, 0x06	; 6
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	aa ef       	ldi	r26, 0xFA	; 250
    39a8:	b3 e4       	ldi	r27, 0x43	; 67
    39aa:	8b 87       	std	Y+11, r24	; 0x0b
    39ac:	9c 87       	std	Y+12, r25	; 0x0c
    39ae:	ad 87       	std	Y+13, r26	; 0x0d
    39b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	4a e7       	ldi	r20, 0x7A	; 122
    39c0:	53 e4       	ldi	r21, 0x43	; 67
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	8f 83       	std	Y+7, r24	; 0x07
    39cc:	98 87       	std	Y+8, r25	; 0x08
    39ce:	a9 87       	std	Y+9, r26	; 0x09
    39d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39d2:	6f 81       	ldd	r22, Y+7	; 0x07
    39d4:	78 85       	ldd	r23, Y+8	; 0x08
    39d6:	89 85       	ldd	r24, Y+9	; 0x09
    39d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e8       	ldi	r20, 0x80	; 128
    39e0:	5f e3       	ldi	r21, 0x3F	; 63
    39e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e6:	88 23       	and	r24, r24
    39e8:	2c f4       	brge	.+10     	; 0x39f4 <H_Buzzer_Void_BuzzerTwice+0x24c>
		__ticks = 1;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	3f c0       	rjmp	.+126    	; 0x3a72 <H_Buzzer_Void_BuzzerTwice+0x2ca>
	else if (__tmp > 65535)
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	3f ef       	ldi	r19, 0xFF	; 255
    3a00:	4f e7       	ldi	r20, 0x7F	; 127
    3a02:	57 e4       	ldi	r21, 0x47	; 71
    3a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a08:	18 16       	cp	r1, r24
    3a0a:	4c f5       	brge	.+82     	; 0x3a5e <H_Buzzer_Void_BuzzerTwice+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e2       	ldi	r20, 0x20	; 32
    3a1a:	51 e4       	ldi	r21, 0x41	; 65
    3a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	bc 01       	movw	r22, r24
    3a26:	cd 01       	movw	r24, r26
    3a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	9e 83       	std	Y+6, r25	; 0x06
    3a32:	8d 83       	std	Y+5, r24	; 0x05
    3a34:	0f c0       	rjmp	.+30     	; 0x3a54 <H_Buzzer_Void_BuzzerTwice+0x2ac>
    3a36:	89 e1       	ldi	r24, 0x19	; 25
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	8b 83       	std	Y+3, r24	; 0x03
    3a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a40:	9c 81       	ldd	r25, Y+4	; 0x04
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <H_Buzzer_Void_BuzzerTwice+0x29a>
    3a46:	9c 83       	std	Y+4, r25	; 0x04
    3a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	69 f7       	brne	.-38     	; 0x3a36 <H_Buzzer_Void_BuzzerTwice+0x28e>
    3a5c:	14 c0       	rjmp	.+40     	; 0x3a86 <H_Buzzer_Void_BuzzerTwice+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a60:	78 85       	ldd	r23, Y+8	; 0x08
    3a62:	89 85       	ldd	r24, Y+9	; 0x09
    3a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9e 83       	std	Y+6, r25	; 0x06
    3a70:	8d 83       	std	Y+5, r24	; 0x05
    3a72:	8d 81       	ldd	r24, Y+5	; 0x05
    3a74:	9e 81       	ldd	r25, Y+6	; 0x06
    3a76:	9a 83       	std	Y+2, r25	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	f1 f7       	brne	.-4      	; 0x3a7e <H_Buzzer_Void_BuzzerTwice+0x2d6>
    3a82:	9a 83       	std	Y+2, r25	; 0x02
    3a84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3a86:	82 e0       	ldi	r24, 0x02	; 2
    3a88:	66 e0       	ldi	r22, 0x06	; 6
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
}
    3a90:	aa 96       	adiw	r28, 0x2a	; 42
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <BUTTON_Init+0x6>
    3aa8:	0f 92       	push	r0
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	89 83       	std	Y+1, r24	; 0x01
    3ab0:	6a 83       	std	Y+2, r22	; 0x02
    3ab2:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    3ab8:	4b 81       	ldd	r20, Y+3	; 0x03
    3aba:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
}
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <BUTTON_GetValue+0x6>
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    3ad6:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	6a 81       	ldd	r22, Y+2	; 0x02
    3adc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <init>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR INITIALIZE FUNCITON,
 * THIS FUNCTION INITIALIZED WHAT NEEDED TO BE INITIALIZED THROUGHOUT THE WHOLE SYSTEM .	  */
/*--------------------------------------------------------------------------------------------*/

void init(void){
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(RED_LED_PORT,RED_LED_PIN,OUTPUT_PIN);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	67 e0       	ldi	r22, 0x07	; 7
    3af6:	42 e0       	ldi	r20, 0x02	; 2
    3af8:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
	GPIO_SetPinDirection(GRN_LED_PORT,GRN_LED_PIN,OUTPUT_PIN);
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	64 e0       	ldi	r22, 0x04	; 4
    3b00:	42 e0       	ldi	r20, 0x02	; 2
    3b02:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
	GPIO_SetPinDirection(BLU_LED_PORT,BLU_LED_PIN,OUTPUT_PIN);
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	65 e0       	ldi	r22, 0x05	; 5
    3b0a:	42 e0       	ldi	r20, 0x02	; 2
    3b0c:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>
	GPIO_SetPinDirection(YLW_LED_PORT,YLW_LED_PIN,OUTPUT_PIN);
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	66 e0       	ldi	r22, 0x06	; 6
    3b14:	42 e0       	ldi	r20, 0x02	; 2
    3b16:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_SetPinDirection>

	BUTTON_Init(ACL_BTN_PORT,ACL_BTN_PIN, INPUT_PIN);
    3b1a:	83 e0       	ldi	r24, 0x03	; 3
    3b1c:	67 e0       	ldi	r22, 0x07	; 7
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <BUTTON_Init>
	BUTTON_Init(GBX_BTN_PORT,GBX_BTN_PIN, INPUT_PIN);
    3b24:	83 e0       	ldi	r24, 0x03	; 3
    3b26:	66 e0       	ldi	r22, 0x06	; 6
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <BUTTON_Init>
	BUTTON_Init(ACCS_BTN_PORT,ACCS_BTN_PIN, INPUT_PIN);
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	65 e0       	ldi	r22, 0x05	; 5
    3b32:	40 e0       	ldi	r20, 0x00	; 0
    3b34:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <BUTTON_Init>
	BUTTON_Init(BRK_BTN_PORT,BRK_BTN_PIN, INPUT_PIN);
    3b38:	83 e0       	ldi	r24, 0x03	; 3
    3b3a:	63 e0       	ldi	r22, 0x03	; 3
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <BUTTON_Init>

	LCD_init();
    3b42:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_init>

	/*enable global interrupt manually*/
	SET_BIT(SREG,7);
    3b46:	af e5       	ldi	r26, 0x5F	; 95
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	ef e5       	ldi	r30, 0x5F	; 95
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	80 68       	ori	r24, 0x80	; 128
    3b52:	8c 93       	st	X, r24

	 /*  Initialize ADC to be used by Potentiometer to work as RADAR(Ultrasonic)*/
	 ADC_Init();
    3b54:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <ADC_Init>

	 /*  Intialize Potentiometer */
	 POT_Init(ADC_Channel_0);
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <POT_Init>




}
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <A_APPLICATION_VOID_ACCELERATE>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR ACCELERATE .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_ACCELERATE(uint8 STATE){
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	0f 92       	push	r0
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	LED_OnOffPositiveLogic(BLU_LED_PORT,BLU_LED_PIN,STATE);
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	65 e0       	ldi	r22, 0x05	; 5
    3b74:	49 81       	ldd	r20, Y+1	; 0x01
    3b76:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LED_OnOffPositiveLogic>
	A_APPLICATION_VOID_BUZZER_BEEP_ACL(ACL_BTN_PORT,ACL_BTN_PIN);
    3b7a:	83 e0       	ldi	r24, 0x03	; 3
    3b7c:	67 e0       	ldi	r22, 0x07	; 7
    3b7e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <A_APPLICATION_VOID_BUZZER_BEEP_ACL>

}
    3b82:	0f 90       	pop	r0
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	08 95       	ret

00003b8a <A_APPLICATION_VOID_BRAKE_ON>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR BRAKE INTERRUPT .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_BRAKE_ON(void){
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
	LED_OnOffPositiveLogic(RED_LED_PORT,RED_LED_PIN,LOGIC_HIGH);
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	67 e0       	ldi	r22, 0x07	; 7
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LED_OnOffPositiveLogic>
	A_APPLICATION_VOID_BUZZER_BEEP_BRK(BRK_BTN_PORT,BRK_BTN_PIN);
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	63 e0       	ldi	r22, 0x03	; 3
    3ba0:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <A_APPLICATION_VOID_BUZZER_BEEP_BRK>
}
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <A_APPLICATION_VOID_BRAKE_OFF>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR BRAKE INTERRUPT .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_BRAKE_OFF(void){
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
	LED_OnOffPositiveLogic(RED_LED_PORT,RED_LED_PIN,LOGIC_LOW);
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	67 e0       	ldi	r22, 0x07	; 7
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LED_OnOffPositiveLogic>
	A_APPLICATION_VOID_BUZZER_BEEP_BRK(BRK_BTN_PORT,BRK_BTN_PIN);
    3bbc:	83 e0       	ldi	r24, 0x03	; 3
    3bbe:	63 e0       	ldi	r22, 0x03	; 3
    3bc0:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <A_APPLICATION_VOID_BUZZER_BEEP_BRK>
}
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	08 95       	ret

00003bca <A_APPLICATION_VOID_ACCS>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR ACCELERATION,
 * THIS FUNCTION MAKES THE CAR ACCELERATE .
--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_ACCS(void){
    3bca:	df 93       	push	r29
    3bcc:	cf 93       	push	r28
    3bce:	cd b7       	in	r28, 0x3d	; 61
    3bd0:	de b7       	in	r29, 0x3e	; 62
	A_APPLICATION_VOID_ACCS_TGL(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3bd2:	83 e0       	ldi	r24, 0x03	; 3
    3bd4:	65 e0       	ldi	r22, 0x05	; 5
    3bd6:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <A_APPLICATION_VOID_ACCS_TGL>

}
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <A_APPLICATION_UINT8_BTN_CHECK>:
 * THIS FUNCTION CHECKS WHETER A PUSH BUTTON IS PRESSED OR NO, HAS 2 ARGUMENTS, BTN PORT AND BTN PIN .
 * RETURNS 1 IF PRESSED, 0 WHEN RELEASED		  */
/*--------------------------------------------------------------------------------------------*/


uint8 A_APPLICATION_UINT8_BTN_CHECK(uint8 BTN_PORT, uint8 BTN_PIN){
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <A_APPLICATION_UINT8_BTN_CHECK+0x6>
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <A_APPLICATION_UINT8_BTN_CHECK+0x8>
    3be8:	0f 92       	push	r0
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	8a 83       	std	Y+2, r24	; 0x02
    3bf0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 TEMP = 0;
    3bf2:	19 82       	std	Y+1, r1	; 0x01
	TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	6b 81       	ldd	r22, Y+3	; 0x03
    3bf8:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3bfc:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	88 23       	and	r24, r24
    3c02:	59 f4       	brne	.+22     	; 0x3c1a <A_APPLICATION_UINT8_BTN_CHECK+0x3a>

		if (BTN_STATE == BTN_Pressed_State) {
    3c04:	80 91 14 02 	lds	r24, 0x0214
    3c08:	88 23       	and	r24, r24
    3c0a:	31 f4       	brne	.+12     	; 0x3c18 <A_APPLICATION_UINT8_BTN_CHECK+0x38>
			//do true here
			BTN_STATE = BTN_Released_State;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	80 93 14 02 	sts	0x0214, r24

			return 1;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	8c 83       	std	Y+4, r24	; 0x04
    3c16:	04 c0       	rjmp	.+8      	; 0x3c20 <A_APPLICATION_UINT8_BTN_CHECK+0x40>
    3c18:	05 c0       	rjmp	.+10     	; 0x3c24 <A_APPLICATION_UINT8_BTN_CHECK+0x44>
		}
	}
	else{
		//do false here
		BTN_STATE = BTN_Pressed_State;
    3c1a:	10 92 14 02 	sts	0x0214, r1

		return 0;
    3c1e:	1c 82       	std	Y+4, r1	; 0x04
    3c20:	8c 81       	ldd	r24, Y+4	; 0x04
    3c22:	8d 83       	std	Y+5, r24	; 0x05
	}
}
    3c24:	8d 81       	ldd	r24, Y+5	; 0x05
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	cf 91       	pop	r28
    3c32:	df 91       	pop	r29
    3c34:	08 95       	ret

00003c36 <A_APPLICATION_VOID_BTN_TGL_ACTION>:
/*   						FUNCTION BODY FOR BUTTON TOGGLE ACTION,
 * THIS FUNCTION TAKES ACTION OF A TOGGLE WHEN A PUSH BUTTON IS PRESSED, ACCEPTS THE BUTTON PORT AND PIN .		  */
/*--------------------------------------------------------------------------------------------*/


void A_APPLICATION_VOID_BTN_TGL_ACTION(uint8 BTN_PORT, uint8 BTN_PIN){
    3c36:	df 93       	push	r29
    3c38:	cf 93       	push	r28
    3c3a:	00 d0       	rcall	.+0      	; 0x3c3c <A_APPLICATION_VOID_BTN_TGL_ACTION+0x6>
    3c3c:	00 d0       	rcall	.+0      	; 0x3c3e <A_APPLICATION_VOID_BTN_TGL_ACTION+0x8>
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	6a 83       	std	Y+2, r22	; 0x02
	uint8  static BTN_LAST_STATE = 0;
	uint8  static BTN_STATE = 0;
	BTN_STATE = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	6a 81       	ldd	r22, Y+2	; 0x02
    3c4a:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3c4e:	80 93 15 02 	sts	0x0215, r24
	if (BTN_STATE != BTN_LAST_STATE) {
    3c52:	80 91 15 02 	lds	r24, 0x0215
    3c56:	80 91 16 02 	lds	r24, 0x0216
			//do true here



		}
	}BTN_LAST_STATE = BTN_STATE;
    3c5a:	80 91 15 02 	lds	r24, 0x0215
    3c5e:	80 93 16 02 	sts	0x0216, r24

}
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	cf 91       	pop	r28
    3c6c:	df 91       	pop	r29
    3c6e:	08 95       	ret

00003c70 <A_APPLICATION_VOID_ACCS_TGL>:
/*   						FUNCTION BODY FOR ACCS TOGGLE ONLY + ITS LED,
 * THIS FUNCTION TOGGLES LED OF ACCS AND ITS BUZZER .		  */
/*--------------------------------------------------------------------------------------------*/


void A_APPLICATION_VOID_ACCS_TGL(uint8 BTN_PORT, uint8 BTN_PIN){
    3c70:	df 93       	push	r29
    3c72:	cf 93       	push	r28
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <A_APPLICATION_VOID_ACCS_TGL+0x6>
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	6a 83       	std	Y+2, r22	; 0x02
	uint8 static BTN_LAST_STATE = 0;
	uint8 static BTN_STATE = 0;
	BTN_STATE = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	6a 81       	ldd	r22, Y+2	; 0x02
    3c82:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3c86:	80 93 17 02 	sts	0x0217, r24
	if (BTN_STATE != BTN_LAST_STATE) {
    3c8a:	90 91 17 02 	lds	r25, 0x0217
    3c8e:	80 91 18 02 	lds	r24, 0x0218
    3c92:	98 17       	cp	r25, r24
    3c94:	d1 f0       	breq	.+52     	; 0x3cca <A_APPLICATION_VOID_ACCS_TGL+0x5a>

		if (BTN_STATE == BTN_Pressed_State) {
    3c96:	80 91 17 02 	lds	r24, 0x0217
    3c9a:	88 23       	and	r24, r24
    3c9c:	81 f4       	brne	.+32     	; 0x3cbe <A_APPLICATION_VOID_ACCS_TGL+0x4e>
			//do true here
			if (!(GEARBOX_CURRENT_STATE == E_GEARBOX_REVERSE)) {
    3c9e:	80 91 01 02 	lds	r24, 0x0201
    3ca2:	83 30       	cpi	r24, 0x03	; 3
    3ca4:	91 f0       	breq	.+36     	; 0x3cca <A_APPLICATION_VOID_ACCS_TGL+0x5a>
				LED_Toggle(GRN_LED_PORT,GRN_LED_PIN);
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	64 e0       	ldi	r22, 0x04	; 4
    3caa:	0e 94 03 10 	call	0x2006	; 0x2006 <LED_Toggle>
				A_APPLICATION_VOID_BUZZER_BEEP_ACCS(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3cae:	83 e0       	ldi	r24, 0x03	; 3
    3cb0:	65 e0       	ldi	r22, 0x05	; 5
    3cb2:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS>
				ACCS_CURRENT_STATE = E_ACCS_ON;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	80 93 0e 02 	sts	0x020E, r24
    3cbc:	06 c0       	rjmp	.+12     	; 0x3cca <A_APPLICATION_VOID_ACCS_TGL+0x5a>


		}
		else
		{
			A_APPLICATION_VOID_BUZZER_BEEP_ACCS(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3cbe:	83 e0       	ldi	r24, 0x03	; 3
    3cc0:	65 e0       	ldi	r22, 0x05	; 5
    3cc2:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS>
			ACCS_CURRENT_STATE = E_ACCS_OFF;
    3cc6:	10 92 0e 02 	sts	0x020E, r1

		}
	}BTN_LAST_STATE = BTN_STATE;
    3cca:	80 91 17 02 	lds	r24, 0x0217
    3cce:	80 93 18 02 	sts	0x0218, r24

}
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	08 95       	ret

00003cdc <A_APPLICATION_VOID_BTN_ACTION>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR BUTTON ACTIONS,
 * THIS FUNCTION CHECKS ALL 4 PUSH BUTTONS AND THEN PERFORMS THEIR ACTIONS .							  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_BTN_ACTION(void){
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
	//check for acceleration press
	if (A_APPLICATION_UINT8_BTN_CHECK(ACL_BTN_PORT,ACL_BTN_PIN)) {
    3ce4:	83 e0       	ldi	r24, 0x03	; 3
    3ce6:	67 e0       	ldi	r22, 0x07	; 7
    3ce8:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <A_APPLICATION_UINT8_BTN_CHECK>
    3cec:	88 23       	and	r24, r24
    3cee:	39 f0       	breq	.+14     	; 0x3cfe <A_APPLICATION_VOID_BTN_ACTION+0x22>
		A_APPLICATION_VOID_ACCELERATE(ON);
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <A_APPLICATION_VOID_ACCELERATE>
		CAR_CURRENT_STATE = E_CAR_IS_ACCELERATING;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	80 93 0f 02 	sts	0x020F, r24
    3cfc:	03 c0       	rjmp	.+6      	; 0x3d04 <A_APPLICATION_VOID_BTN_ACTION+0x28>


	} else {
		A_APPLICATION_VOID_ACCELERATE(OFF);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <A_APPLICATION_VOID_ACCELERATE>
	}
	//check for brake press
	if (A_APPLICATION_UINT8_BTN_CHECK(BRK_BTN_PORT,BRK_BTN_PIN)) {
    3d04:	83 e0       	ldi	r24, 0x03	; 3
    3d06:	63 e0       	ldi	r22, 0x03	; 3
    3d08:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <A_APPLICATION_UINT8_BTN_CHECK>
    3d0c:	88 23       	and	r24, r24
    3d0e:	49 f0       	breq	.+18     	; 0x3d22 <A_APPLICATION_VOID_BTN_ACTION+0x46>
		INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN);
    3d10:	83 e0       	ldi	r24, 0x03	; 3
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <INT1_init>
		INT1_SetCallBack(A_APPLICATION_VOID_BRAKE_OFF);
    3d18:	85 ed       	ldi	r24, 0xD5	; 213
    3d1a:	9d e1       	ldi	r25, 0x1D	; 29
    3d1c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <INT1_SetCallBack>
    3d20:	0b c0       	rjmp	.+22     	; 0x3d38 <A_APPLICATION_VOID_BTN_ACTION+0x5c>


	} else {
		INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	60 e0       	ldi	r22, 0x00	; 0
    3d26:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <INT1_init>
		INT1_SetCallBack(A_APPLICATION_VOID_BRAKE_ON);
    3d2a:	85 ec       	ldi	r24, 0xC5	; 197
    3d2c:	9d e1       	ldi	r25, 0x1D	; 29
    3d2e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <INT1_SetCallBack>
		CAR_CURRENT_STATE = E_CAR_IS_BRAKING;
    3d32:	82 e0       	ldi	r24, 0x02	; 2
    3d34:	80 93 0f 02 	sts	0x020F, r24


	}
	//check for accs press
	if (A_APPLICATION_UINT8_BTN_CHECK(ACCS_BTN_PORT,ACCS_BTN_PIN)) {
    3d38:	83 e0       	ldi	r24, 0x03	; 3
    3d3a:	65 e0       	ldi	r22, 0x05	; 5
    3d3c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <A_APPLICATION_UINT8_BTN_CHECK>
    3d40:	88 23       	and	r24, r24
    3d42:	39 f0       	breq	.+14     	; 0x3d52 <A_APPLICATION_VOID_BTN_ACTION+0x76>
		A_APPLICATION_VOID_ACCS_TGL(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3d44:	83 e0       	ldi	r24, 0x03	; 3
    3d46:	65 e0       	ldi	r22, 0x05	; 5
    3d48:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <A_APPLICATION_VOID_ACCS_TGL>
		A_APPLICATION_VOID_ACCS_LCD();
    3d4c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <A_APPLICATION_VOID_ACCS_LCD>
    3d50:	04 c0       	rjmp	.+8      	; 0x3d5a <A_APPLICATION_VOID_BTN_ACTION+0x7e>

	}else {
		A_APPLICATION_VOID_ACCS_TGL(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3d52:	83 e0       	ldi	r24, 0x03	; 3
    3d54:	65 e0       	ldi	r22, 0x05	; 5
    3d56:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <A_APPLICATION_VOID_ACCS_TGL>
	}
	//check for gear press
	if (A_APPLICATION_UINT8_BTN_CHECK(GBX_BTN_PORT,GBX_BTN_PIN)) {
    3d5a:	83 e0       	ldi	r24, 0x03	; 3
    3d5c:	66 e0       	ldi	r22, 0x06	; 6
    3d5e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <A_APPLICATION_UINT8_BTN_CHECK>
		void A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE();
	}else {
		//
	}
}
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <A_APPLICATION_VOID_BUZZER_BEEP_ACL>:
/*   						FUNCTION BODY FOR BUZZER BEEP,
 * THIS FUNCTION MAKES THE BUZZER BEEPS ONE FOR EVERY PUSH BUTTON PRESS.
 * THIS FUNCTION ACCEPTS TWO ARGUMENT, THE PORT OF THE BUTTON AND THE PIN OF THE BUTTON */
/*--------------------------------------------------------------------------------------------*/
void A_APPLICATION_VOID_BUZZER_BEEP_ACL(uint8 BTN_PORT, uint8 BTN_PIN)
{
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x6>
    3d6e:	0f 92       	push	r0
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	8a 83       	std	Y+2, r24	; 0x02
    3d76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 TEMP;
	TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7a:	6b 81       	ldd	r22, Y+3	; 0x03
    3d7c:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3d80:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	88 23       	and	r24, r24
    3d86:	51 f4       	brne	.+20     	; 0x3d9c <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x34>

		if (BTN_STATE == BTN_Pressed_State) {
    3d88:	80 91 19 02 	lds	r24, 0x0219
    3d8c:	88 23       	and	r24, r24
    3d8e:	41 f4       	brne	.+16     	; 0x3da0 <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x38>
			BTN_STATE = BTN_Released_State;
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	80 93 19 02 	sts	0x0219, r24
			H_Buzzer_Void_BuzzerOnce();
    3d96:	0e 94 45 1b 	call	0x368a	; 0x368a <H_Buzzer_Void_BuzzerOnce>
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <A_APPLICATION_VOID_BUZZER_BEEP_ACL+0x38>
		}
	}
	else {
		BTN_STATE = BTN_Pressed_State;
    3d9c:	10 92 19 02 	sts	0x0219, r1
	}



}
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <A_APPLICATION_VOID_BUZZER_BEEP_BRK>:
void A_APPLICATION_VOID_BUZZER_BEEP_BRK(uint8 BTN_PORT, uint8 BTN_PIN)
{
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x6>
    3db2:	0f 92       	push	r0
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	8a 83       	std	Y+2, r24	; 0x02
    3dba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 TEMP;
	TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbe:	6b 81       	ldd	r22, Y+3	; 0x03
    3dc0:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3dc4:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	88 23       	and	r24, r24
    3dca:	51 f4       	brne	.+20     	; 0x3de0 <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x34>

		if (BTN_STATE == BTN_Pressed_State) {
    3dcc:	80 91 1a 02 	lds	r24, 0x021A
    3dd0:	88 23       	and	r24, r24
    3dd2:	41 f4       	brne	.+16     	; 0x3de4 <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x38>
			BTN_STATE = BTN_Released_State;
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	80 93 1a 02 	sts	0x021A, r24
			H_Buzzer_Void_BuzzerOnce();
    3dda:	0e 94 45 1b 	call	0x368a	; 0x368a <H_Buzzer_Void_BuzzerOnce>
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <A_APPLICATION_VOID_BUZZER_BEEP_BRK+0x38>
		}
	}
	else {
		BTN_STATE = BTN_Pressed_State;
    3de0:	10 92 1a 02 	sts	0x021A, r1
	}



}
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	08 95       	ret

00003df0 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS>:
void A_APPLICATION_VOID_BUZZER_BEEP_ACCS(uint8 BTN_PORT, uint8 BTN_PIN)
{
    3df0:	df 93       	push	r29
    3df2:	cf 93       	push	r28
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x6>
    3df6:	0f 92       	push	r0
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
    3dfc:	8a 83       	std	Y+2, r24	; 0x02
    3dfe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 TEMP;
	TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	6b 81       	ldd	r22, Y+3	; 0x03
    3e04:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3e08:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	88 23       	and	r24, r24
    3e0e:	91 f4       	brne	.+36     	; 0x3e34 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x44>

		if (BTN_STATE == BTN_Pressed_State) {
    3e10:	80 91 1b 02 	lds	r24, 0x021B
    3e14:	88 23       	and	r24, r24
    3e16:	81 f4       	brne	.+32     	; 0x3e38 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x48>
			BTN_STATE = BTN_Released_State;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	80 93 1b 02 	sts	0x021B, r24
			LCD_MoveCursor(0,0);
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"ACCS : ON ");
    3e26:	80 e6       	ldi	r24, 0x60	; 96
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
			H_Buzzer_Void_BuzzerOnce();
    3e2e:	0e 94 45 1b 	call	0x368a	; 0x368a <H_Buzzer_Void_BuzzerOnce>
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <A_APPLICATION_VOID_BUZZER_BEEP_ACCS+0x48>
		}
	}
	else {
		BTN_STATE = BTN_Pressed_State;
    3e34:	10 92 1b 02 	sts	0x021B, r1
	}
}
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	08 95       	ret

00003e44 <A_APPLICATION_VOID_ACCS_LCD>:

void A_APPLICATION_VOID_ACCS_LCD(void)
{
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	0f 92       	push	r0
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
	uint8 TEMP;
	TEMP = GPIO_ReadPin(GRN_LED_PORT,GRN_LED_PIN);
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	64 e0       	ldi	r22, 0x04	; 4
    3e52:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    3e56:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	88 23       	and	r24, r24
    3e5c:	91 f4       	brne	.+36     	; 0x3e82 <A_APPLICATION_VOID_ACCS_LCD+0x3e>

		if (BTN_STATE == BTN_Pressed_State) {
    3e5e:	80 91 1c 02 	lds	r24, 0x021C
    3e62:	88 23       	and	r24, r24
    3e64:	d9 f4       	brne	.+54     	; 0x3e9c <A_APPLICATION_VOID_ACCS_LCD+0x58>
			BTN_STATE = BTN_Released_State;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	80 93 1c 02 	sts	0x021C, r24
			LCD_MoveCursor(0,0);
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"ACCS : OFF ");
    3e74:	8b e6       	ldi	r24, 0x6B	; 107
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
			ACCS_CURRENT_STATE = E_ACCS_OFF;
    3e7c:	10 92 0e 02 	sts	0x020E, r1
    3e80:	0d c0       	rjmp	.+26     	; 0x3e9c <A_APPLICATION_VOID_ACCS_LCD+0x58>
		}
	}
	else {
		BTN_STATE = BTN_Pressed_State;
    3e82:	10 92 1c 02 	sts	0x021C, r1
		LCD_MoveCursor(0,0);
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
		LCD_DisplayString((uint8*)"ACCS : ON");
    3e8e:	87 e7       	ldi	r24, 0x77	; 119
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
		ACCS_CURRENT_STATE = E_ACCS_ON;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	80 93 0e 02 	sts	0x020E, r24
	}


}
    3e9c:	0f 90       	pop	r0
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	08 95       	ret

00003ea4 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>:

void A_APPLICATION_VOID_BUZZER_BEEP_GEAR(uint8 BTN_PORT, uint8 BTN_PIN)
{
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	00 d0       	rcall	.+0      	; 0x3eaa <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x6>
    3eaa:	0f 92       	push	r0
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	8a 83       	std	Y+2, r24	; 0x02
    3eb2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 TEMP;
	TEMP = BUTTON_GetValue(BTN_PORT,BTN_PIN);
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	6b 81       	ldd	r22, Y+3	; 0x03
    3eb8:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3ebc:	89 83       	std	Y+1, r24	; 0x01
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	88 23       	and	r24, r24
    3ec2:	51 f4       	brne	.+20     	; 0x3ed8 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x34>

		if (BTN_STATE == BTN_Pressed_State) {
    3ec4:	80 91 1d 02 	lds	r24, 0x021D
    3ec8:	88 23       	and	r24, r24
    3eca:	41 f4       	brne	.+16     	; 0x3edc <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x38>
			BTN_STATE = BTN_Released_State;
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	80 93 1d 02 	sts	0x021D, r24
			H_Buzzer_Void_BuzzerOnce();
    3ed2:	0e 94 45 1b 	call	0x368a	; 0x368a <H_Buzzer_Void_BuzzerOnce>
    3ed6:	02 c0       	rjmp	.+4      	; 0x3edc <A_APPLICATION_VOID_BUZZER_BEEP_GEAR+0x38>
		}
	}
	else {
		BTN_STATE = BTN_Pressed_State;
    3ed8:	10 92 1d 02 	sts	0x021D, r1
	}



}
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <A_APPLICATION_VOID_LCD_STATICS>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR LCD STATICS,
 * THIS FUNCTION DISPLAYS THE STATIC (NON-CHANGING STUFF) DISPLAYED ON THE LCD SCREEN .		  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_LCD_STATICS(void){
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
	LCD_MoveCursor(0,0);
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"ACCS : OFF");
    3ef8:	81 e8       	ldi	r24, 0x81	; 129
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>

	LCD_MoveCursor(1,0);
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	60 e0       	ldi	r22, 0x00	; 0
    3f04:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"Gear (R,N,D) : N");
    3f08:	8c e8       	ldi	r24, 0x8C	; 140
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>

	LCD_MoveCursor(2,0);
    3f10:	82 e0       	ldi	r24, 0x02	; 2
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"                      ");
    3f18:	8d e9       	ldi	r24, 0x9D	; 157
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>

}
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	08 95       	ret

00003f26 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR HEARBOX CHANGE,
 * THIS FUNCTION CHANGES THE GEAR ON EACH BUTTON PRESS OR TOGGLE .							  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE(void){
    3f26:	df 93       	push	r29
    3f28:	cf 93       	push	r28
    3f2a:	00 d0       	rcall	.+0      	; 0x3f2c <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x6>
    3f2c:	0f 92       	push	r0
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
	A_APPLICATION_VOID_ACCS_DISTANCE_READ();
    3f32:	0e 94 69 20 	call	0x40d2	; 0x40d2 <A_APPLICATION_VOID_ACCS_DISTANCE_READ>
	// calling main BTN action function here
	A_APPLICATION_VOID_BTN_ACTION();
    3f36:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <A_APPLICATION_VOID_BTN_ACTION>
	uint8 TEMP;
	TEMP = BUTTON_GetValue(GBX_BTN_PORT,GBX_BTN_PIN);
    3f3a:	83 e0       	ldi	r24, 0x03	; 3
    3f3c:	66 e0       	ldi	r22, 0x06	; 6
    3f3e:	0e 94 65 1d 	call	0x3aca	; 0x3aca <BUTTON_GetValue>
    3f42:	89 83       	std	Y+1, r24	; 0x01
	uint8 static STATE = E_GEARBOX_NEUTRAL;
	uint8 static BTN_STATE = BTN_Pressed_State;
	if (TEMP == BTN_Pressed_State) {
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	88 23       	and	r24, r24
    3f48:	a9 f4       	brne	.+42     	; 0x3f74 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x4e>

		if (BTN_STATE == BTN_Pressed_State) {
    3f4a:	80 91 1e 02 	lds	r24, 0x021E
    3f4e:	88 23       	and	r24, r24
    3f50:	99 f4       	brne	.+38     	; 0x3f78 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x52>
			BTN_STATE = BTN_Released_State;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	80 93 1e 02 	sts	0x021E, r24

			if (STATE < 4) {
    3f58:	80 91 02 02 	lds	r24, 0x0202
    3f5c:	84 30       	cpi	r24, 0x04	; 4
    3f5e:	30 f4       	brcc	.+12     	; 0x3f6c <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x46>
				STATE++;
    3f60:	80 91 02 02 	lds	r24, 0x0202
    3f64:	8f 5f       	subi	r24, 0xFF	; 255
    3f66:	80 93 02 02 	sts	0x0202, r24
    3f6a:	06 c0       	rjmp	.+12     	; 0x3f78 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x52>

			}else {
				STATE = E_GEARBOX_NEUTRAL;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	80 93 02 02 	sts	0x0202, r24
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x52>

			}
		}
	}
	else{
		BTN_STATE = BTN_Pressed_State;
    3f74:	10 92 1e 02 	sts	0x021E, r1
		//reserved
	}
	switch (STATE) {
    3f78:	80 91 02 02 	lds	r24, 0x0202
    3f7c:	28 2f       	mov	r18, r24
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	3b 83       	std	Y+3, r19	; 0x03
    3f82:	2a 83       	std	Y+2, r18	; 0x02
    3f84:	8a 81       	ldd	r24, Y+2	; 0x02
    3f86:	9b 81       	ldd	r25, Y+3	; 0x03
    3f88:	82 30       	cpi	r24, 0x02	; 2
    3f8a:	91 05       	cpc	r25, r1
    3f8c:	81 f1       	breq	.+96     	; 0x3fee <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0xc8>
    3f8e:	2a 81       	ldd	r18, Y+2	; 0x02
    3f90:	3b 81       	ldd	r19, Y+3	; 0x03
    3f92:	23 30       	cpi	r18, 0x03	; 3
    3f94:	31 05       	cpc	r19, r1
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x74>
    3f98:	4a c0       	rjmp	.+148    	; 0x402e <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x108>
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f9e:	81 30       	cpi	r24, 0x01	; 1
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x80>
    3fa4:	6f c0       	rjmp	.+222    	; 0x4084 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x15e>
	case E_GEARBOX_NEUTRAL:
		//if (A_APPLICATION_UINT8_BTN_CHECK(BRK_BTN_PORT,BRK_BTN_PIN))
		if (!GPIO_ReadPin(BRK_BTN_PORT,BRK_BTN_PIN)&&(!GPIO_ReadPin(GBX_BTN_PORT,GBX_BTN_PIN))){
    3fa6:	83 e0       	ldi	r24, 0x03	; 3
    3fa8:	63 e0       	ldi	r22, 0x03	; 3
    3faa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    3fae:	88 23       	and	r24, r24
    3fb0:	09 f0       	breq	.+2      	; 0x3fb4 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x8e>
    3fb2:	6b c0       	rjmp	.+214    	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>
    3fb4:	83 e0       	ldi	r24, 0x03	; 3
    3fb6:	66 e0       	ldi	r22, 0x06	; 6
    3fb8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    3fbc:	88 23       	and	r24, r24
    3fbe:	09 f0       	breq	.+2      	; 0x3fc2 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x9c>
    3fc0:	64 c0       	rjmp	.+200    	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>
			A_APPLICATION_VOID_ACCS();
    3fc2:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <A_APPLICATION_VOID_ACCS>

			LCD_MoveCursor(1,15);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	6f e0       	ldi	r22, 0x0F	; 15
    3fca:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"N");
    3fce:	84 eb       	ldi	r24, 0xB4	; 180
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
			A_APPLICATION_VOID_BUZZER_BEEP_GEAR(GBX_BTN_PORT,GBX_BTN_PIN);
    3fd6:	83 e0       	ldi	r24, 0x03	; 3
    3fd8:	66 e0       	ldi	r22, 0x06	; 6
    3fda:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>
			A_APPLICATION_VOID_LCD_DISTANCE_ERASE();
    3fde:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <A_APPLICATION_VOID_LCD_DISTANCE_ERASE>
			GEARBOX_CURRENT_STATE = E_GEARBOX_NEUTRAL;
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	80 93 01 02 	sts	0x0201, r24
			CAR_CURRENT_STATE = E_CAR_IS_STOPPED;
    3fe8:	10 92 0f 02 	sts	0x020F, r1
    3fec:	4e c0       	rjmp	.+156    	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>



		break;
	case E_GEARBOX_DRIVE:
		if (!GPIO_ReadPin(BRK_BTN_PORT,BRK_BTN_PIN)&&(!GPIO_ReadPin(GBX_BTN_PORT,GBX_BTN_PIN))) {
    3fee:	83 e0       	ldi	r24, 0x03	; 3
    3ff0:	63 e0       	ldi	r22, 0x03	; 3
    3ff2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    3ff6:	88 23       	and	r24, r24
    3ff8:	09 f0       	breq	.+2      	; 0x3ffc <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0xd6>
    3ffa:	47 c0       	rjmp	.+142    	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>
    3ffc:	83 e0       	ldi	r24, 0x03	; 3
    3ffe:	66 e0       	ldi	r22, 0x06	; 6
    4000:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    4004:	88 23       	and	r24, r24
    4006:	09 f0       	breq	.+2      	; 0x400a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0xe4>
    4008:	40 c0       	rjmp	.+128    	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>

			LCD_MoveCursor(1,15);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	6f e0       	ldi	r22, 0x0F	; 15
    400e:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"D");
    4012:	86 eb       	ldi	r24, 0xB6	; 182
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>


			A_APPLICATION_VOID_BUZZER_BEEP_GEAR(GBX_BTN_PORT,GBX_BTN_PIN);
    401a:	83 e0       	ldi	r24, 0x03	; 3
    401c:	66 e0       	ldi	r22, 0x06	; 6
    401e:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>
			GEARBOX_CURRENT_STATE = E_GEARBOX_DRIVE;
    4022:	82 e0       	ldi	r24, 0x02	; 2
    4024:	80 93 01 02 	sts	0x0201, r24

			A_APPLICATION_VOID_LCD_DISTANCE_SHOW();
    4028:	0e 94 4b 20 	call	0x4096	; 0x4096 <A_APPLICATION_VOID_LCD_DISTANCE_SHOW>
    402c:	2e c0       	rjmp	.+92     	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>


		}
		break;
	case E_GEARBOX_REVERSE:
		if (!GPIO_ReadPin(BRK_BTN_PORT,BRK_BTN_PIN)&&(!GPIO_ReadPin(GBX_BTN_PORT,GBX_BTN_PIN))) {
    402e:	83 e0       	ldi	r24, 0x03	; 3
    4030:	63 e0       	ldi	r22, 0x03	; 3
    4032:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    4036:	88 23       	and	r24, r24
    4038:	41 f5       	brne	.+80     	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>
    403a:	83 e0       	ldi	r24, 0x03	; 3
    403c:	66 e0       	ldi	r22, 0x06	; 6
    403e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_ReadPin>
    4042:	88 23       	and	r24, r24
    4044:	11 f5       	brne	.+68     	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>


			LCD_MoveCursor(1,15);
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	6f e0       	ldi	r22, 0x0F	; 15
    404a:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"R");
    404e:	88 eb       	ldi	r24, 0xB8	; 184
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>

			LCD_MoveCursor(0,0);
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
			LCD_DisplayString((uint8*)"ACCS : OFF");
    405e:	81 e8       	ldi	r24, 0x81	; 129
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
			GEARBOX_CURRENT_STATE = E_GEARBOX_REVERSE;
    4066:	83 e0       	ldi	r24, 0x03	; 3
    4068:	80 93 01 02 	sts	0x0201, r24

			GPIO_WritePin(GRN_LED_PORT,GRN_LED_PIN,LOGIC_LOW);
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	64 e0       	ldi	r22, 0x04	; 4
    4070:	40 e0       	ldi	r20, 0x00	; 0
    4072:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_WritePin>
			A_APPLICATION_VOID_LCD_DISTANCE_ERASE();
    4076:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <A_APPLICATION_VOID_LCD_DISTANCE_ERASE>

			A_APPLICATION_VOID_BUZZER_BEEP_GEAR(GBX_BTN_PORT,GBX_BTN_PIN);
    407a:	83 e0       	ldi	r24, 0x03	; 3
    407c:	66 e0       	ldi	r22, 0x06	; 6
    407e:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <A_APPLICATION_VOID_BUZZER_BEEP_GEAR>
    4082:	03 c0       	rjmp	.+6      	; 0x408a <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE+0x164>
		}
		break;
	default: STATE = E_GEARBOX_NEUTRAL;
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	80 93 02 02 	sts	0x0202, r24
	break;

	}
}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <A_APPLICATION_VOID_LCD_DISTANCE_SHOW>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR DISTANCE SHOW,
 * 			THIS FUNCTION SHOWS THE DISTANCE OFF THE LCD .							  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_LCD_DISTANCE_SHOW(void){
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	cd b7       	in	r28, 0x3d	; 61
    409c:	de b7       	in	r29, 0x3e	; 62
	LCD_MoveCursor(2,0);
    409e:	82 e0       	ldi	r24, 0x02	; 2
    40a0:	60 e0       	ldi	r22, 0x00	; 0
    40a2:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"Distance : ");
    40a6:	8a eb       	ldi	r24, 0xBA	; 186
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>

}
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <A_APPLICATION_VOID_LCD_DISTANCE_ERASE>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR DISTANCE ERASE,
 * 			THIS FUNCTION ERAES THE DISTANCE OFF THE LCD .							  */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_LCD_DISTANCE_ERASE(void){
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
	LCD_MoveCursor(2,0);
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	60 e0       	ldi	r22, 0x00	; 0
    40c0:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
	LCD_DisplayString((uint8*)"                       ");
    40c4:	86 ec       	ldi	r24, 0xC6	; 198
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>

}
    40cc:	cf 91       	pop	r28
    40ce:	df 91       	pop	r29
    40d0:	08 95       	ret

000040d2 <A_APPLICATION_VOID_ACCS_DISTANCE_READ>:
/*--------------------------------------------------------------------------------------------*/
/*   						FUNCTION BODY FOR DISTANCE READ,
 * 			THIS FUNCTION READS DISTANCE FROM THE POTENTIOMETER AT ADC CHANNEL 0 .			 */
/*--------------------------------------------------------------------------------------------*/

void A_APPLICATION_VOID_ACCS_DISTANCE_READ(void){
    40d2:	df 93       	push	r29
    40d4:	cf 93       	push	r28
    40d6:	00 d0       	rcall	.+0      	; 0x40d8 <A_APPLICATION_VOID_ACCS_DISTANCE_READ+0x6>
    40d8:	0f 92       	push	r0
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62


	    uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <ADC_ReadChannelSingleConvertion>
    40e4:	9a 83       	std	Y+2, r25	; 0x02
    40e6:	89 83       	std	Y+1, r24	; 0x01
	    ACCS_DISTANCE = (Adc_value_pure * 10) / 1023.0 ;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	9c 01       	movw	r18, r24
    40ee:	22 0f       	add	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	c9 01       	movw	r24, r18
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	88 0f       	add	r24, r24
    40fa:	99 1f       	adc	r25, r25
    40fc:	82 0f       	add	r24, r18
    40fe:	93 1f       	adc	r25, r19
    4100:	cc 01       	movw	r24, r24
    4102:	a0 e0       	ldi	r26, 0x00	; 0
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	bc 01       	movw	r22, r24
    4108:	cd 01       	movw	r24, r26
    410a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 ec       	ldi	r19, 0xC0	; 192
    411a:	4f e7       	ldi	r20, 0x7F	; 127
    411c:	54 e4       	ldi	r21, 0x44	; 68
    411e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	80 93 10 02 	sts	0x0210, r24
    412a:	90 93 11 02 	sts	0x0211, r25
    412e:	a0 93 12 02 	sts	0x0212, r26
    4132:	b0 93 13 02 	sts	0x0213, r27
	    /*  Here trying to get first number after Sign  */
	    volatile uint8 distance_after_point = ( (uint8)(ACCS_DISTANCE * 10) )  % 10;
    4136:	80 91 10 02 	lds	r24, 0x0210
    413a:	90 91 11 02 	lds	r25, 0x0211
    413e:	a0 91 12 02 	lds	r26, 0x0212
    4142:	b0 91 13 02 	lds	r27, 0x0213
    4146:	bc 01       	movw	r22, r24
    4148:	cd 01       	movw	r24, r26
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e2       	ldi	r20, 0x20	; 32
    4150:	51 e4       	ldi	r21, 0x41	; 65
    4152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	bc 01       	movw	r22, r24
    415c:	cd 01       	movw	r24, r26
    415e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	9a e0       	ldi	r25, 0x0A	; 10
    4168:	69 2f       	mov	r22, r25
    416a:	0e 94 00 21 	call	0x4200	; 0x4200 <__udivmodqi4>
    416e:	89 2f       	mov	r24, r25
    4170:	8b 83       	std	Y+3, r24	; 0x03
if ((GEARBOX_CURRENT_STATE == E_GEARBOX_DRIVE)&&(ACCS_CURRENT_STATE == E_ACCS_ON)) {
    4172:	80 91 01 02 	lds	r24, 0x0201
    4176:	82 30       	cpi	r24, 0x02	; 2
    4178:	71 f5       	brne	.+92     	; 0x41d6 <A_APPLICATION_VOID_ACCS_DISTANCE_READ+0x104>
    417a:	80 91 0e 02 	lds	r24, 0x020E
    417e:	81 30       	cpi	r24, 0x01	; 1
    4180:	51 f5       	brne	.+84     	; 0x41d6 <A_APPLICATION_VOID_ACCS_DISTANCE_READ+0x104>
	    LCD_MoveCursor(2,11);
    4182:	82 e0       	ldi	r24, 0x02	; 2
    4184:	6b e0       	ldi	r22, 0x0B	; 11
    4186:	0e 94 43 19 	call	0x3286	; 0x3286 <LCD_MoveCursor>
	    LCD_intToString((uint8)ACCS_DISTANCE);
    418a:	80 91 10 02 	lds	r24, 0x0210
    418e:	90 91 11 02 	lds	r25, 0x0211
    4192:	a0 91 12 02 	lds	r26, 0x0212
    4196:	b0 91 13 02 	lds	r27, 0x0213
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	88 2f       	mov	r24, r24
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	a0 e0       	ldi	r26, 0x00	; 0
    41ac:	b0 e0       	ldi	r27, 0x00	; 0
    41ae:	bc 01       	movw	r22, r24
    41b0:	cd 01       	movw	r24, r26
    41b2:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <LCD_intToString>
	    LCD_DisplayCharacter('.');
    41b6:	8e e2       	ldi	r24, 0x2E	; 46
    41b8:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_DisplayCharacter>
	    LCD_intToString(distance_after_point);
    41bc:	8b 81       	ldd	r24, Y+3	; 0x03
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	a0 e0       	ldi	r26, 0x00	; 0
    41c4:	b0 e0       	ldi	r27, 0x00	; 0
    41c6:	bc 01       	movw	r22, r24
    41c8:	cd 01       	movw	r24, r26
    41ca:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <LCD_intToString>
	    LCD_DisplayString(" m");
    41ce:	8e ed       	ldi	r24, 0xDE	; 222
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_DisplayString>
//	    LCD_DisplayString(" m");

}


}
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	cf 91       	pop	r28
    41de:	df 91       	pop	r29
    41e0:	08 95       	ret

000041e2 <main>:




int main()
{
    41e2:	df 93       	push	r29
    41e4:	cf 93       	push	r28
    41e6:	cd b7       	in	r28, 0x3d	; 61
    41e8:	de b7       	in	r29, 0x3e	; 62


	init();
    41ea:	0e 94 75 1d 	call	0x3aea	; 0x3aea <init>
	A_APPLICATION_VOID_LCD_STATICS();
    41ee:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <A_APPLICATION_VOID_LCD_STATICS>
	H_Buzzer_Void_BuzzerInit();
    41f2:	0e 94 16 1b 	call	0x362c	; 0x362c <H_Buzzer_Void_BuzzerInit>
	while(1)
	{
		 A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE();
    41f6:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <A_APPLICATION_VOID_MAIN_GEARBOX_CHANGE>
		 A_APPLICATION_VOID_ACCS_DISTANCE_READ();
    41fa:	0e 94 69 20 	call	0x40d2	; 0x40d2 <A_APPLICATION_VOID_ACCS_DISTANCE_READ>
    41fe:	fb cf       	rjmp	.-10     	; 0x41f6 <main+0x14>

00004200 <__udivmodqi4>:
    4200:	99 1b       	sub	r25, r25
    4202:	79 e0       	ldi	r23, 0x09	; 9
    4204:	04 c0       	rjmp	.+8      	; 0x420e <__udivmodqi4_ep>

00004206 <__udivmodqi4_loop>:
    4206:	99 1f       	adc	r25, r25
    4208:	96 17       	cp	r25, r22
    420a:	08 f0       	brcs	.+2      	; 0x420e <__udivmodqi4_ep>
    420c:	96 1b       	sub	r25, r22

0000420e <__udivmodqi4_ep>:
    420e:	88 1f       	adc	r24, r24
    4210:	7a 95       	dec	r23
    4212:	c9 f7       	brne	.-14     	; 0x4206 <__udivmodqi4_loop>
    4214:	80 95       	com	r24
    4216:	08 95       	ret

00004218 <__prologue_saves__>:
    4218:	2f 92       	push	r2
    421a:	3f 92       	push	r3
    421c:	4f 92       	push	r4
    421e:	5f 92       	push	r5
    4220:	6f 92       	push	r6
    4222:	7f 92       	push	r7
    4224:	8f 92       	push	r8
    4226:	9f 92       	push	r9
    4228:	af 92       	push	r10
    422a:	bf 92       	push	r11
    422c:	cf 92       	push	r12
    422e:	df 92       	push	r13
    4230:	ef 92       	push	r14
    4232:	ff 92       	push	r15
    4234:	0f 93       	push	r16
    4236:	1f 93       	push	r17
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	ca 1b       	sub	r28, r26
    4242:	db 0b       	sbc	r29, r27
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	09 94       	ijmp

00004250 <__epilogue_restores__>:
    4250:	2a 88       	ldd	r2, Y+18	; 0x12
    4252:	39 88       	ldd	r3, Y+17	; 0x11
    4254:	48 88       	ldd	r4, Y+16	; 0x10
    4256:	5f 84       	ldd	r5, Y+15	; 0x0f
    4258:	6e 84       	ldd	r6, Y+14	; 0x0e
    425a:	7d 84       	ldd	r7, Y+13	; 0x0d
    425c:	8c 84       	ldd	r8, Y+12	; 0x0c
    425e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4260:	aa 84       	ldd	r10, Y+10	; 0x0a
    4262:	b9 84       	ldd	r11, Y+9	; 0x09
    4264:	c8 84       	ldd	r12, Y+8	; 0x08
    4266:	df 80       	ldd	r13, Y+7	; 0x07
    4268:	ee 80       	ldd	r14, Y+6	; 0x06
    426a:	fd 80       	ldd	r15, Y+5	; 0x05
    426c:	0c 81       	ldd	r16, Y+4	; 0x04
    426e:	1b 81       	ldd	r17, Y+3	; 0x03
    4270:	aa 81       	ldd	r26, Y+2	; 0x02
    4272:	b9 81       	ldd	r27, Y+1	; 0x01
    4274:	ce 0f       	add	r28, r30
    4276:	d1 1d       	adc	r29, r1
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	cd bf       	out	0x3d, r28	; 61
    4282:	ed 01       	movw	r28, r26
    4284:	08 95       	ret

00004286 <itoa>:
    4286:	fb 01       	movw	r30, r22
    4288:	9f 01       	movw	r18, r30
    428a:	e8 94       	clt
    428c:	42 30       	cpi	r20, 0x02	; 2
    428e:	c4 f0       	brlt	.+48     	; 0x42c0 <itoa+0x3a>
    4290:	45 32       	cpi	r20, 0x25	; 37
    4292:	b4 f4       	brge	.+44     	; 0x42c0 <itoa+0x3a>
    4294:	4a 30       	cpi	r20, 0x0A	; 10
    4296:	29 f4       	brne	.+10     	; 0x42a2 <itoa+0x1c>
    4298:	97 fb       	bst	r25, 7
    429a:	1e f4       	brtc	.+6      	; 0x42a2 <itoa+0x1c>
    429c:	90 95       	com	r25
    429e:	81 95       	neg	r24
    42a0:	9f 4f       	sbci	r25, 0xFF	; 255
    42a2:	64 2f       	mov	r22, r20
    42a4:	77 27       	eor	r23, r23
    42a6:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__udivmodhi4>
    42aa:	80 5d       	subi	r24, 0xD0	; 208
    42ac:	8a 33       	cpi	r24, 0x3A	; 58
    42ae:	0c f0       	brlt	.+2      	; 0x42b2 <itoa+0x2c>
    42b0:	89 5d       	subi	r24, 0xD9	; 217
    42b2:	81 93       	st	Z+, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	00 97       	sbiw	r24, 0x00	; 0
    42b8:	a1 f7       	brne	.-24     	; 0x42a2 <itoa+0x1c>
    42ba:	16 f4       	brtc	.+4      	; 0x42c0 <itoa+0x3a>
    42bc:	5d e2       	ldi	r21, 0x2D	; 45
    42be:	51 93       	st	Z+, r21
    42c0:	10 82       	st	Z, r1
    42c2:	c9 01       	movw	r24, r18
    42c4:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <strrev>

000042c8 <strrev>:
    42c8:	dc 01       	movw	r26, r24
    42ca:	fc 01       	movw	r30, r24
    42cc:	67 2f       	mov	r22, r23
    42ce:	71 91       	ld	r23, Z+
    42d0:	77 23       	and	r23, r23
    42d2:	e1 f7       	brne	.-8      	; 0x42cc <strrev+0x4>
    42d4:	32 97       	sbiw	r30, 0x02	; 2
    42d6:	04 c0       	rjmp	.+8      	; 0x42e0 <strrev+0x18>
    42d8:	7c 91       	ld	r23, X
    42da:	6d 93       	st	X+, r22
    42dc:	70 83       	st	Z, r23
    42de:	62 91       	ld	r22, -Z
    42e0:	ae 17       	cp	r26, r30
    42e2:	bf 07       	cpc	r27, r31
    42e4:	c8 f3       	brcs	.-14     	; 0x42d8 <strrev+0x10>
    42e6:	08 95       	ret

000042e8 <__udivmodhi4>:
    42e8:	aa 1b       	sub	r26, r26
    42ea:	bb 1b       	sub	r27, r27
    42ec:	51 e1       	ldi	r21, 0x11	; 17
    42ee:	07 c0       	rjmp	.+14     	; 0x42fe <__udivmodhi4_ep>

000042f0 <__udivmodhi4_loop>:
    42f0:	aa 1f       	adc	r26, r26
    42f2:	bb 1f       	adc	r27, r27
    42f4:	a6 17       	cp	r26, r22
    42f6:	b7 07       	cpc	r27, r23
    42f8:	10 f0       	brcs	.+4      	; 0x42fe <__udivmodhi4_ep>
    42fa:	a6 1b       	sub	r26, r22
    42fc:	b7 0b       	sbc	r27, r23

000042fe <__udivmodhi4_ep>:
    42fe:	88 1f       	adc	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	5a 95       	dec	r21
    4304:	a9 f7       	brne	.-22     	; 0x42f0 <__udivmodhi4_loop>
    4306:	80 95       	com	r24
    4308:	90 95       	com	r25
    430a:	bc 01       	movw	r22, r24
    430c:	cd 01       	movw	r24, r26
    430e:	08 95       	ret

00004310 <_exit>:
    4310:	f8 94       	cli

00004312 <__stop_program>:
    4312:	ff cf       	rjmp	.-2      	; 0x4312 <__stop_program>
